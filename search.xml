<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【排错】项目编译问题，Java版本不匹配： Description Resource Path Location Type Java compiler level does not match the version of</title>
    <url>/2020/10/15/Eclipse/%E3%80%90%E6%8E%92%E9%94%99%E3%80%91%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98%EF%BC%8CJava%E7%89%88%E6%9C%AC%E4%B8%8D%E5%8C%B9%E9%85%8D%EF%BC%9A%20Description%20Resource%20Path%20Location%20Type%20Java%20compiler%20level%20does%20not%20match%20the%20version%20of/</url>
    <content><![CDATA[

	<div class="row">
    <embed src="./项目编译问题，Java版本不匹配.pdf" width="100%" height="550" type="application/pdf">
	</div>




<h1 id="图解-Description-Resource-Path-Location-Type-Java-compiler-level-does-not-match-the-version-of"><a href="#图解-Description-Resource-Path-Location-Type-Java-compiler-level-does-not-match-the-version-of" class="headerlink" title="(图解)Description Resource Path Location Type Java compiler level does not match the version of"></a>(图解)Description Resource Path Location Type Java compiler level does not match the version of</h1><p>project 编译问题，需要三处的jdk版本要保持一致，才能编译通过。</p>
<ol>
<li>在项目上右键properties-&gt;project Facets-&gt;修改右侧的version 保持一致<img src="/2020/10/15/Eclipse/%E3%80%90%E6%8E%92%E9%94%99%E3%80%91%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98%EF%BC%8CJava%E7%89%88%E6%9C%AC%E4%B8%8D%E5%8C%B9%E9%85%8D%EF%BC%9A%20Description%20Resource%20Path%20Location%20Type%20Java%20compiler%20level%20does%20not%20match%20the%20version%20of/1" alt="img"></li>
</ol>
<ol start="2">
<li>window-&gt;preferences-&gt;java-&gt;Compiler-&gt;设置右侧的Compiler compliance level</li>
</ol>
<p><img src="/2020/10/15/Eclipse/%E3%80%90%E6%8E%92%E9%94%99%E3%80%91%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98%EF%BC%8CJava%E7%89%88%E6%9C%AC%E4%B8%8D%E5%8C%B9%E9%85%8D%EF%BC%9A%20Description%20Resource%20Path%20Location%20Type%20Java%20compiler%20level%20does%20not%20match%20the%20version%20of/2" alt="img"></p>
<ol start="3">
<li>window-&gt;preferences-&gt;java-&gt;Installed JREs-&gt;设置或者选择右侧的Installed JREs</li>
</ol>
<p><img src="/2020/10/15/Eclipse/%E3%80%90%E6%8E%92%E9%94%99%E3%80%91%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98%EF%BC%8CJava%E7%89%88%E6%9C%AC%E4%B8%8D%E5%8C%B9%E9%85%8D%EF%BC%9A%20Description%20Resource%20Path%20Location%20Type%20Java%20compiler%20level%20does%20not%20match%20the%20version%20of/3" alt="img"></p>
<p>以上三处的jdk版本要保持一致，才能编译通过</p>
<ol start="4">
<li>另外，一般新导入的工程需要设置编码格式，如下图：</li>
</ol>
<p><img src="/2020/10/15/Eclipse/%E3%80%90%E6%8E%92%E9%94%99%E3%80%91%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98%EF%BC%8CJava%E7%89%88%E6%9C%AC%E4%B8%8D%E5%8C%B9%E9%85%8D%EF%BC%9A%20Description%20Resource%20Path%20Location%20Type%20Java%20compiler%20level%20does%20not%20match%20the%20version%20of/4" alt="img"></p>
]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse排错</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse导出配置文件,并给新工作空间使用</title>
    <url>/2020/10/15/Eclipse/Eclipse%E5%AF%BC%E5%87%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6,%E5%B9%B6%E7%BB%99%E6%96%B0%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="eclipse配置文件导出-并给新工作空间使用"><a href="#eclipse配置文件导出-并给新工作空间使用" class="headerlink" title="eclipse配置文件导出,并给新工作空间使用"></a>eclipse配置文件导出,并给新工作空间使用</h1><p> eclipse的默认配置一般不能满足我们的要求，我们一般会修改一些配置，如字体、背景颜色、快捷键及一些template等等，这样方便我们的开发。可是当我们新建一个工作空间的时候，eclipse又会使用默认配置，怎样将我们习惯的配置导出然后导入新工作空间呢？   </p>
<h2 id="步骤一："><a href="#步骤一：" class="headerlink" title="步骤一："></a>步骤一：</h2><p>  在被复制的工作空间下，File-&gt;Switch workspace-&gt;Other… 打开如下窗口：</p>
<p> <img src="/2020/10/15/Eclipse/Eclipse%E5%AF%BC%E5%87%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6,%E5%B9%B6%E7%BB%99%E6%96%B0%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8/1" alt="img"></p>
<h2 id="步骤二："><a href="#步骤二：" class="headerlink" title="步骤二："></a>步骤二：</h2><p>​       将workspace/.metadata/.plugins/org.eclipse.core.runtime中的.settings文件夹拷贝出来，里面就是所有的配置文件，新建工作空间的时候将该.settings文件夹替换掉新工作空间中的.settings文件夹即可。（有网友是将.plugings文件夹替换，但是.plugings文件夹太大了，实际上就是替换.settings文件夹，.settings只有几百k。）</p>
]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse配置</tag>
      </tags>
  </entry>
  <entry>
    <title>修改eclipse的web项目默认浏览器</title>
    <url>/2020/10/15/Eclipse/%E4%BF%AE%E6%94%B9eclipse%E7%9A%84web%E9%A1%B9%E7%9B%AE%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<p><img src="/2020/10/15/Eclipse/%E4%BF%AE%E6%94%B9eclipse%E7%9A%84web%E9%A1%B9%E7%9B%AE%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8/123.png"></p>
]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse配置</tag>
      </tags>
  </entry>
  <entry>
    <title>【排错】META-INFMANIFEST.MF (系统找不到指定的路径)</title>
    <url>/2020/11/01/Eclipse/%E3%80%90%E6%8E%92%E9%94%99%E3%80%91META-INFMANIFEST.MF%20(%E7%B3%BB%E7%BB%9F%E6%89%BE%E4%B8%8D%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9A%84%E8%B7%AF%E5%BE%84)/</url>
    <content><![CDATA[<p><img src="/2020/11/01/Eclipse/%E3%80%90%E6%8E%92%E9%94%99%E3%80%91META-INFMANIFEST.MF%20(%E7%B3%BB%E7%BB%9F%E6%89%BE%E4%B8%8D%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9A%84%E8%B7%AF%E5%BE%84)/123.png" alt="234"></p>
]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse排错</tag>
      </tags>
  </entry>
  <entry>
    <title>git出现RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errfno 10054</title>
    <url>/2020/11/14/Git/git%E5%87%BA%E7%8E%B0RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errfno-10054/</url>
    <content><![CDATA[<h1 id="git出现RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errfno-10054"><a href="#git出现RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errfno-10054" class="headerlink" title="git出现RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errfno 10054"></a>git出现RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errfno 10054</h1><h2 id="问题：git下载代码时，报“git出现RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errfno-10054”的问题，"><a href="#问题：git下载代码时，报“git出现RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errfno-10054”的问题，" class="headerlink" title="问题：git下载代码时，报“git出现RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errfno 10054”的问题，"></a>问题：git下载代码时，报“git出现RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errfno 10054”的问题，</h2><p>如下所示的截图 </p>
<p> <img src="/2020/11/14/Git/git%E5%87%BA%E7%8E%B0RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errfno-10054/1832793-20191012165127495-1172697860.png" alt="img"></p>
<h2 id="解决步骤："><a href="#解决步骤：" class="headerlink" title="解决步骤："></a>解决步骤：</h2><ol>
<li><p>首先输入如下命令：  　　git config http.sslVerify “false”</p>
</li>
<li><p> 如果输入上面命令提示报“ fatal: not in a git directory  ”，则输入如下命令：git init</p>
</li>
<li><p>重新下载代码：  git clone  <a href="https://gitee.com/">https://gitee.com</a>……</p>
</li>
<li><p>如果还是git代码还是下载失败，则需要修改git缓存的大小为100MB，输入如下命令：  git config –global http.postBuffer 100M</p>
<p><img src="/2020/11/14/Git/git%E5%87%BA%E7%8E%B0RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errfno-10054/1832793-20191012165654492-604506312.png" alt="img"></p>
</li>
<li><p>问题解决了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git排错</tag>
      </tags>
  </entry>
  <entry>
    <title>使用git分支保存hexo博客源码到github</title>
    <url>/2020/11/08/Git/%E4%BD%BF%E7%94%A8git%E5%88%86%E6%94%AF%E4%BF%9D%E5%AD%98hexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E5%88%B0github/</url>
    <content><![CDATA[<h1 id="使用git分支保存hexo博客源码到github"><a href="#使用git分支保存hexo博客源码到github" class="headerlink" title="使用git分支保存hexo博客源码到github"></a>使用git分支保存hexo博客源码到github</h1><p>hexo是当前最火的静态博客框架，支持Markdown格式文章编辑并自动生成对应的静态网页，简单高效令人爱不释手。<br>使用hexo写博客的流程通常是，</p>
<ol>
<li>通过<code>hexo new post_name</code>命令，会自动在<code>source/_post</code>目录下生成一个待写的<code>post_name.md</code>文件</li>
<li>编写完该md文件后，用<code>hexo generate</code>编译生成对应的HTML文件</li>
<li>发布之前，可以用<code>hexo s</code>本地预览，然后通过<code>hexo deploy</code>发布到远程仓库的<strong>master</strong>分支，然后你的个人站点就能看到刚才新加的文章了</li>
</ol>
<h2 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h2><p>然而，使用过hexo搭建个人博客的朋友们想必都会遇到博客源码保存的问题。即远程仓库只会保存hexo发布后的静态HTML文件，你的博客md源文件、主题配置等还在本地，一旦电脑磁盘坏了或者换了电脑，就无法在之前仓库的基础上继续写博客。针对此问题，有不少博主会在github上单独另起一个<strong>repository</strong>来专门保存博客源文件，每次发布完新文章，需要手动地将<code>source/post</code>下的md文件上传到源文件对应的<strong>repository</strong>，确实也能解决问题，但总归是麻烦。后来偶然看到聪明的网友借助git分支来巧妙地实现用同一个仓库保存静态网页和博客源码，自己试了下确实很赞，故总结之。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h4 id="新建git分支"><a href="#新建git分支" class="headerlink" title="新建git分支"></a>新建git分支</h4><p>因Github  Page要求使用master分支作为发布网站的源代码，我们只能用master分支来保存hexo生成的静态网页，对于博客源码，可以新建一个source分支来存储。在github上打开Pages对应的仓库，也就是以”username.github.io”命名的仓库，然后建立一个source分支，如下图：</p>
<p><img src="/2020/11/08/Git/%E4%BD%BF%E7%94%A8git%E5%88%86%E6%94%AF%E4%BF%9D%E5%AD%98hexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E5%88%B0github/create_branch.png" alt="create_branch"></p>
<p>因为我已经创建过source分支，故下方会显示目前该仓库上有master和source两个分支。其中source分支显示打钩，表示当前仓库的默认分支已经是source而不是master了，下面会讲。</p>
<h4 id="更改仓库的默认分支"><a href="#更改仓库的默认分支" class="headerlink" title="更改仓库的默认分支"></a>更改仓库的默认分支</h4><p>github上的仓库初始都会有个master分支，也就是默认分支。对于一个仓库<code>project_name</code>，当我们通过<code>git clone https://github.com/sherlockyb/project_name.git</code>下载代码时，实际拉取的是默认分支master对应的代码。而我们用hexo写博客时，通常是与md源文件打交道，对于deploy生成的master分支代码并不需要我们关注，因此可将仓库的默认分支改为保存源码的source分支，这样通过<code>git clone</code>拉取的就是source分支代码了。</p>
<p>在仓库的主页面，通过Settings -&gt; Branchs，可以看到<strong>Default branch</strong>的Tab，显示的默认分支是master，可以勾选source，然后update即可将默认分支设置为source，如下图：</p>
<p><img src="/2020/11/08/Git/%E4%BD%BF%E7%94%A8git%E5%88%86%E6%94%AF%E4%BF%9D%E5%AD%98hexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E5%88%B0github/default_branch.png" alt="switch_default_branch"></p>
<h4 id="将本地hexo目录与远程仓库关联"><a href="#将本地hexo目录与远程仓库关联" class="headerlink" title="将本地hexo目录与远程仓库关联"></a>将本地hexo目录与远程仓库关联</h4><p>进入到本地hexo工程目录，也就是我们通常执行<code>hexo new post</code>等命令的目录，执行如下操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;sherlockyb&#x2F;sherlockyb.github.io.git</span><br></pre></td></tr></table></figure>

<h4 id="推送博客源码"><a href="#推送博客源码" class="headerlink" title="推送博客源码"></a>推送博客源码</h4><p>将本地的md源文件、站点配置文件等推送到source分支。<br>因为我们只需要保留博客源码，其他无关的文件并不希望推送，需要确保配好了<code>.gitignore</code>文件，通常如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>

<p>然后依次执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;hexo source post&#39;</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure>

<h4 id="删除public等文件（可选）"><a href="#删除public等文件（可选）" class="headerlink" title="删除public等文件（可选）"></a>删除public等文件（可选）</h4><p>因为source分支是从master分支新建的，初始代码实际就是master的拷贝，因而master中已有的public等deploy生成的文件也会一起带过来，这些都不算是博客源文件，如果你也觉着source分支还存着这些有些别扭，就可以先在本地把它删掉，然后执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#39;DEL: public things which only for deploy&#39;</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure>

<p>执行完之后，你的仓库大概就是长这个样子：</p>
<p><img src="/2020/11/08/Git/%E4%BD%BF%E7%94%A8git%E5%88%86%E6%94%AF%E4%BF%9D%E5%AD%98hexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E5%88%B0github/source_files.png" alt="source_files"></p>
<p>后续即便你再发布博客时，deploy生成public文件，在提交博客源码时，也不会将其带上去，因为有<code>.gitignore</code>将其忽略了。</p>
<h2 id="新环境配置"><a href="#新环境配置" class="headerlink" title="新环境配置"></a>新环境配置</h2><p>假设我们换电脑了，要在新环境继续在原有仓库基础上撸文章，此时通过<code>git clone</code>将博客源码拉到本地，然后安装、初始化hexo就能搞定：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ZhangHao0810&#x2F;ZhangHao0810.github.io.git sherlockyb</span><br><span class="line">cd sherlockyb</span><br><span class="line">npm install hexo</span><br><span class="line">npm install hexo-deployer-git -save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; hexo环境配置好后，继续像之前一样</span><br><span class="line">hexo new post_name</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>确保<code>hexo deploy</code>推送的是master分支，hexo目录下的_config.yml文件通常会配置deploy推送的目标地址，这个一般在最初使用hexo时，就会配置为master，不用改动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;ZhangHao0810&#x2F;ZhangHao0810.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Github使用方法：如何将本地的文件夹整体上传到Github上</title>
    <url>/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/</url>
    <content><![CDATA[<h1 id="Git使用方法：如何将本地的文件夹整体上传到Github上"><a href="#Git使用方法：如何将本地的文件夹整体上传到Github上" class="headerlink" title="Git使用方法：如何将本地的文件夹整体上传到Github上"></a>Git使用方法：如何将本地的文件夹整体上传到Github上</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>怎么注册和安装git客户端，可参照以下这篇博客：<a href="http://blog.csdn.net/vipzjyno1/article/details/22098621">http://blog.csdn.net/vipzjyno1/article/details/22098621</a></p>
<p>通过命令行，以上的博客也说德很清楚，下面要说的是如何通过Git GUI将自己本地的文件上传至Github上。</p>
<h2 id="将本地文件上传至Github"><a href="#将本地文件上传至Github" class="headerlink" title="将本地文件上传至Github"></a>将本地文件上传至Github</h2><h3 id="创建本地-git仓库"><a href="#创建本地-git仓库" class="headerlink" title="创建本地.git仓库"></a>创建本地.git仓库</h3><p>  在自己的本地文件（位置随意），点击右键==》选择Git GUI Here ，会弹出以下框，选择create new Repository，也就是箭头处，红色圈内是我自己已经创建的。</p>
<p>点击create new  Repository以后会出现让你输入一个文件夹的弹窗，直接输入一个文件夹名称即可。点击创建，这时打开Git文件夹里面有一个.git文件夹，但有些人是看不到的，这是因为，默认情况下是隐藏的，自己将自己电脑里的文件显示即可，不会的自行百度。这时，这个Git文件夹就是你的项目仓库。只要将你需要上传的项目放在该文件夹即可。</p>
<p><img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center.jpg" alt="img"></p>
<p><img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center22.jpg" alt="img"></p>
<h3 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h3><p>完成点击创建以后，会弹出可视化窗：点击Remote–》Add…</p>
<p><img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center2.jpg" alt="img"></p>
<p>弹出以下框以后输入你Github的用户名（shanerou是我的github名称）和你需要将你本地的项目放在Github的仓库的地址，如我在Github上创建了一个repository名称为Test的，然后添加如下，点击创建，弹出success的框代表创建成功</p>
<p><img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center3.jpg" alt="img"></p>
<p><img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center4.jpg" alt="img"></p>
<h3 id="文件推送"><a href="#文件推送" class="headerlink" title="文件推送"></a>文件推送</h3><p>在Git文件夹下放入我的一个demo：SD_SQList2</p>
<p><img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center5.jpg" alt="img"></p>
<p>按以下步骤操作：</p>
<p><img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center6.jpg" alt="img"><br>点击第三步时，在Initial Commit Message 框里将会看到一行信息</p>
<p>点击第四步，也就是提交命令以后，左边已经缓存的文件被提交，缓存文件消失，这时点击第五步即可，点击第五步后出现以下框：</p>
<p> <img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center7.jpg" alt="img"></p>
<p>输入你Github的用户名 和密码：</p>
<p><img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center8.jpg" alt="img"></p>
<p>点击上传：出现以下弹框则表示上传成功</p>
<p><img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center9.jpg" alt="img"></p>
<h3 id="成功，查看结果"><a href="#成功，查看结果" class="headerlink" title="成功，查看结果"></a>成功，查看结果</h3><p>这时到你的Github上去看，将会看到以下dome：</p>
<p><img src="/2020/11/08/GitHub/Github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E6%95%B4%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A/Center11..jpg" alt="img"></p>
<p>至此上传结束。</p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle命令行黑魔法</title>
    <url>/2020/11/17/Gradle/Gradle%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%BB%91%E9%AD%94%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Gradle命令行黑魔法"><a href="#Gradle命令行黑魔法" class="headerlink" title="Gradle命令行黑魔法"></a>Gradle命令行黑魔法</h1><p>毫无疑问，现在Gradle已经成为java世界最火的构建工具，风头已经盖过了冗余的ant，落后的maven。Gradle是以Groovy语言编写的一套构建脚本的DSL，由于Groovy语法的优雅，所以导致Gradle天生就有简洁、可读性强、灵活等特性。</p>
<p>Gradle的命令行功能也非常强大。本人从maven转到Gradle，深深被gradle强大的命令行功能折服。通过命令行来实现Gradle的各种特性，就像魔法师在表演魔法一样。</p>
<h2 id="日志输出。"><a href="#日志输出。" class="headerlink" title="日志输出。"></a><strong>日志输出。</strong></h2><p>Gradle中的日志有6个层级。从高到低分别是  ERROR（错误信息）、QUIET（重要信息）、WARNGING（警告信息）、LIFECYCLE（进程信息）、INFO（一般信息）、DEBUG（调试信息）。在执行gradle task时可以适时的调整信息输出等级，以便更方便的观看执行结果。</p>
<p><code>-q</code>(或<code>--quiet</code>)是启用重要信息级别，该级别下只会输出自己在命令行下打印的信息及错误信息。</p>
<p><code>-i</code>(或<code>--info</code>)则会输出除debug以外的所有信息。</p>
<p><code>-d</code>（或<code>--debug</code>)会输出所有日志信息。</p>
<p>比如一个build.gradle有这样一个task。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">task hello &lt;&lt; &#123;</span><br><span class="line">     println &#39;hello world!&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入<code>-q</code>与不加<code>-q</code>的输出结果不同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle hello</span><br><span class="line">:hello</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 3.546 secs</span><br><span class="line">$ gradle -q hello</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure>

<h2 id="堆栈跟踪。"><a href="#堆栈跟踪。" class="headerlink" title="堆栈跟踪。"></a><strong>堆栈跟踪。</strong></h2><p>如果执行gradle task失败时，如果想得到更详细的错误信息，那么就可以使用<code>-s</code>(或<code>--stacktrace</code>)来输出详细的错误堆栈。你还可以使用<code>-S</code>(或<code>--full-stacktrace</code>)来输出全部堆栈信息，不过一般不推荐这样做，因为gradle是基于groovy语言，而groovy作为一门动态语言可能会输出与你的错误代码毫不相关的信息。</p>
<h2 id="跳过指定的测试。"><a href="#跳过指定的测试。" class="headerlink" title="跳过指定的测试。"></a><strong>跳过指定的测试。</strong></h2><p>如果你在执行build的时候想跳过test task，那么可以使用<code>-x</code>命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle build -x test</span><br><span class="line">:compileJava UP-TO-DATE</span><br><span class="line">:processResources UP-TO-DATE</span><br><span class="line">:classes UP-TO-DATE</span><br><span class="line">:jar UP-TO-DATE</span><br><span class="line">:assemble UP-TO-DATE</span><br><span class="line">:check</span><br><span class="line">:build</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 3.529 secs</span><br></pre></td></tr></table></figure>

<h2 id="继续执行task而忽略前面失败的task。"><a href="#继续执行task而忽略前面失败的task。" class="headerlink" title="继续执行task而忽略前面失败的task。"></a><strong>继续执行task而忽略前面失败的task。</strong></h2><p>默认情况下，如果有某个task失败，后续的task就不会继续执行。但是有时候我们想运行所有的task来一次性得到所有的构建错误，那么我们可以使用<code>--continue</code>命令。使用<code>--continue</code>命令后即使遇到某些task失败也不会停止后续task的执行。但是需要注意的是如果某个task失败了，那么依赖于这个task的其他task依旧不会执行，因为这会带来不安全的因素。</p>
<h2 id="调用task时使用短名或缩写。"><a href="#调用task时使用短名或缩写。" class="headerlink" title="调用task时使用短名或缩写。"></a><strong>调用task时使用短名或缩写。</strong></h2><p>如果一个task的名称过长，那么调用时可以只输入部分名称即可调用，无需输入全名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">task helloWorld &lt;&lt; &#123;</span><br><span class="line">     println &#39;hello world!&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如调用helloWorld可以通过全名调用、前缀调用或首字母调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle -q helloWorld</span><br><span class="line">hello world!</span><br><span class="line">$ gradle -q hell</span><br><span class="line">hello world!</span><br><span class="line">$ gradle -q hW</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure>

<h2 id="使用指定的gradle文件调用task。"><a href="#使用指定的gradle文件调用task。" class="headerlink" title="使用指定的gradle文件调用task。"></a><strong>使用指定的gradle文件调用task。</strong></h2><p>默认情况下，如果你调用gradle task，那么首先会寻找当前目录下的build.gradle文件,以及根据settings.gradle中的配置寻找子项目的build.gradle。但是有时候我们想指定使用某个gradle文件，那么可以使用<code>-b</code>命令。 比如当前目录有个子目录subproject1,里面有个叫hello.gradle。</p>
<p>subproject1/hello.gradle</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">task helloWorld &lt;&lt; &#123;</span><br><span class="line">     println &#39;hello world!&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么在当前目录可以使用以下命令调用这个task。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle -b subproject1&#x2F;hello.gradle  helloWorld</span><br><span class="line">:helloWorld</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 3.752 secs</span><br></pre></td></tr></table></figure>

<h2 id="使用指定的项目目录调用task。"><a href="#使用指定的项目目录调用task。" class="headerlink" title="使用指定的项目目录调用task。"></a><strong>使用指定的项目目录调用task。</strong></h2><p>前面已经说过，执行gradle的task默认会在当前目录寻找build.gradle及settings.gradle文件。如果我们想在任何地方执行某个项目的task，那么可以使用<code>-p</code>来指定使用的项目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gradle -q -p learnGradle helloWorld </span><br></pre></td></tr></table></figure>

<p>这条命令是调用learnGradle这个项目下的helloWorld task。</p>
<h2 id="显示task之间的依赖关系。"><a href="#显示task之间的依赖关系。" class="headerlink" title="显示task之间的依赖关系。"></a><strong>显示task之间的依赖关系。</strong></h2><p>众所周知，使用<code>gradle tasks</code>可以列出当前所有可被使用的task，但是并没有显示task之间的依赖关系。我们可以加上<code>--all</code>来显示 task的依赖关系。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle tasks --all</span><br><span class="line">………………</span><br><span class="line"></span><br><span class="line">Other tasks</span><br><span class="line">-----------</span><br><span class="line">task0</span><br><span class="line">    task1</span><br><span class="line">    task2</span><br><span class="line">    task3</span><br><span class="line"></span><br><span class="line">…………</span><br></pre></td></tr></table></figure>

<p>从上面可以看出task0依赖task1、task2及task3。</p>
<h2 id="查看指定阶段的依赖关系。"><a href="#查看指定阶段的依赖关系。" class="headerlink" title="查看指定阶段的依赖关系。"></a><strong>查看指定阶段的依赖关系。</strong></h2><p>使用<code>gradle dependencies</code> 可以查看项目中包的依赖关系。不过是列出了所有阶段的依赖，如果项目中依赖复杂的话看起来有点头痛。那么可以使用<code>--configuration</code>来查看指定阶段的依赖情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle -q dependencies</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Root project</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">archives - Configuration for archive artifacts.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">compile - Compile classpath for source set &#39;main&#39;.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">default - Configuration for default artifacts.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">runtime - Runtime classpath for source set &#39;main&#39;.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">testCompile - Compile classpath for source set &#39;test&#39;.</span><br><span class="line">\--- junit:junit:4.11</span><br><span class="line">     \--- org.hamcrest:hamcrest-core:1.3</span><br><span class="line"></span><br><span class="line">testRuntime - Runtime classpath for source set &#39;test&#39;.</span><br><span class="line">\--- junit:junit:4.11</span><br><span class="line">     \--- org.hamcrest:hamcrest-core:1.3</span><br></pre></td></tr></table></figure>

<p>使用<code>gradle -q dependencies --configuration testCompile</code>可以只查看testComiple的依赖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle -q dependencies --configuration testCompile</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Root project</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">testCompile - Compile classpath for source set &#39;test&#39;.</span><br><span class="line">\--- junit:junit:4.11</span><br><span class="line">     \--- org.hamcrest:hamcrest-core:1.3</span><br></pre></td></tr></table></figure>

<h2 id="查看指定dependency的依赖情况。"><a href="#查看指定dependency的依赖情况。" class="headerlink" title="查看指定dependency的依赖情况。"></a><strong>查看指定dependency的依赖情况。</strong></h2><p>假如我想查看项目中有没有引入junit，那些阶段引入了junit，那么可以使用<code>dependecyInsight</code>来查看。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle dependencyInsight --dependency junit --configuration testCompile</span><br><span class="line">:dependencyInsight</span><br><span class="line">junit:junit:4.11</span><br><span class="line">\--- testCompile</span><br></pre></td></tr></table></figure>

<p>注意<code>dependencyInsight</code>默认只会查看compile阶段的依赖，如果要查看其他阶段可以使用<code>--configuration</code>来指定。</p>
<h2 id="使用-profile命令行可以产生build运行时间的报告。"><a href="#使用-profile命令行可以产生build运行时间的报告。" class="headerlink" title="使用--profile命令行可以产生build运行时间的报告。"></a><strong>使用<code>--profile</code>命令行可以产生build运行时间的报告。</strong></h2><p>该报告存储在build/report/profile目录，名称为build运行的时间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle build --profile</span><br><span class="line">:compileJava UP-TO-DATE</span><br><span class="line">:processResources UP-TO-DATE</span><br><span class="line">:classes UP-TO-DATE</span><br><span class="line">:jar UP-TO-DATE</span><br><span class="line">:assemble UP-TO-DATE</span><br><span class="line">:compileTestJava UP-TO-DATE</span><br><span class="line">:processTestResources UP-TO-DATE</span><br><span class="line">:testClasses UP-TO-DATE</span><br><span class="line">:test UP-TO-DATE</span><br><span class="line">:check UP-TO-DATE</span><br><span class="line">:build UP-TO-DATE</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 3.726 secs</span><br></pre></td></tr></table></figure>

<p>然后在build/report/profile目录下可以看到build的report。</p>
<p><img src="/2020/11/17/Gradle/Gradle%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%BB%91%E9%AD%94%E6%B3%95/gradle_profile.png" alt="img"></p>
<p>这个报表非常有用，尤其是在在缩短build时间时可以快速定位那些耗时长的task。</p>
<h2 id="试运行build。"><a href="#试运行build。" class="headerlink" title="试运行build。"></a><strong>试运行build。</strong></h2><p>如果你想知道某个task执行时那些task会被一起执行，但是你又不想真正的执行这些task，可以使用<code>-m</code>来试运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle -m build</span><br><span class="line">:compileJava SKIPPED</span><br><span class="line">:processResources SKIPPED</span><br><span class="line">:classes SKIPPED</span><br><span class="line">:jar SKIPPED</span><br><span class="line">:assemble SKIPPED</span><br><span class="line">:compileTestJava SKIPPED</span><br><span class="line">:processTestResources SKIPPED</span><br><span class="line">:testClasses SKIPPED</span><br><span class="line">:test SKIPPED</span><br><span class="line">:check SKIPPED</span><br><span class="line">:build SKIPPED</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 3.53 secs</span><br></pre></td></tr></table></figure>

<p>这样我们可以一目了然的看到那些task被执行了，又不需要花太多的时间。</p>
<h2 id="Gradle的图形界面。"><a href="#Gradle的图形界面。" class="headerlink" title="Gradle的图形界面。"></a><strong>Gradle的图形界面。</strong></h2><p>其实Gradle自带一个图形界面来让习惯gui操作的人来操作Gradle。打开方式很简单。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gradle --gui </span><br></pre></td></tr></table></figure>

<p>这样就会弹出一个gui界面。</p>
<p><img src="/2020/11/17/Gradle/Gradle%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%BB%91%E9%AD%94%E6%B3%95/gradle_gui.png" alt="img"></p>
<p>通过这个gui界面可以很方面的执行gradle的各种命令，还可以将常用的命令保存为favorites。该gui的配置信息默认被存储在当前项目的gradle-app.setting文件中。</p>
<p>注意使用<code>gradle --gui</code>会阻塞当前终端，可以使用<code>gradle --gui&amp;</code>来实现后台运行。</p>
<h2 id="重新编译Gradle脚本。"><a href="#重新编译Gradle脚本。" class="headerlink" title="重新编译Gradle脚本。"></a><strong>重新编译Gradle脚本。</strong></h2><p>第一次运行Gradle命令，会在项目更目录下生成一个.gradle目录来存放编译后的脚本。只有当构建脚本发生修改时采用重新编译。我们可以使用<code>--recompile-scripts</code>来强行重新编译。</p>
]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle 打包springboot war包部署到tomcat</title>
    <url>/2020/10/14/Gradle/gradle-%E6%89%93%E5%8C%85springboot-war%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0tomcat/</url>
    <content><![CDATA[<h2 id="gradle把SpringBoot项目打成war包在tomcat中运行"><a href="#gradle把SpringBoot项目打成war包在tomcat中运行" class="headerlink" title="gradle把SpringBoot项目打成war包在tomcat中运行"></a>gradle把SpringBoot项目打成war包在tomcat中运行</h2><p>springboot项目内置有tomcat容器，打war包时需要去掉项目中内置的tomcat的相关jar包，否则启动会报错。</p>
<ol>
<li>首先在eclipse中配置好gradle;</li>
</ol>
<p><img src="/2020/10/14/Gradle/gradle-%E6%89%93%E5%8C%85springboot-war%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0tomcat/9f6154c1a465f09f4d70495110b8ed7c.png" alt="img"></p>
<ol start="2">
<li>找到项目中配置的build.gradle文件，把spring-boot-starter-tomcat的jar包引入方式改为providedCompile，改为providedCompile后spring-boot-starter-tomcat的jar包只会在编译时引入，在打包时不会引入该jar包；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">providedCompile group: <span class="string">&#x27;org.springframework.boot&#x27;</span>, name: <span class="string">&#x27;spring-boot-starter-tomcat&#x27;</span>, version: springBootVersion</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打开Gradle Tasks窗口；</li>
</ol>
<p><img src="/2020/10/14/Gradle/gradle-%E6%89%93%E5%8C%85springboot-war%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0tomcat/ffbc503b2dadf62a58a4dd9900e6e450.png" alt="img"></p>
<ol start="4">
<li>在Gradle Task窗口中的Project选项中选择要打包的项目，双击war按钮即可把war包打包至项目的\build\libs目录下。</li>
</ol>
<p><img src="/2020/10/14/Gradle/gradle-%E6%89%93%E5%8C%85springboot-war%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0tomcat/91177840f3c1167a89958e2cac537450.png" alt="img"></p>
<ol start="5">
<li>把打包好的jar包放置在tomcat的webapps目录下，启动tomcat即可，此时项目运行的端口为tomcat的server.xml中配置的端口。</li>
</ol>
]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>SpringBoot</tag>
        <tag>项目部署</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA-Maven报Unable-to-import-maven-project</title>
    <url>/2020/10/26/IDEA/IDEA-Maven%E6%8A%A5Unable-to-import-maven-project/</url>
    <content><![CDATA[<h2 id="IDEA-Maven报Unable-to-import-maven-project-See-logs-for-details解决方法"><a href="#IDEA-Maven报Unable-to-import-maven-project-See-logs-for-details解决方法" class="headerlink" title="IDEA Maven报Unable to import maven project See logs for details解决方法"></a>IDEA Maven报Unable to import maven project See logs for details解决方法</h2><p><img src="/2020/10/26/IDEA/IDEA-Maven%E6%8A%A5Unable-to-import-maven-project/%E5%9B%BE%E7%89%87.png" alt="IDEA"></p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA排错</tag>
      </tags>
  </entry>
  <entry>
    <title>一分钟上手Gradle</title>
    <url>/2020/10/14/Gradle/%E4%B8%80%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BGradle/</url>
    <content><![CDATA[<h1 id="没用过Maven，没用过Gradle，直接上Gradle，一分钟直接使用"><a href="#没用过Maven，没用过Gradle，直接上Gradle，一分钟直接使用" class="headerlink" title="没用过Maven，没用过Gradle，直接上Gradle，一分钟直接使用"></a>没用过Maven，没用过Gradle，直接上Gradle，一分钟直接使用</h1><p>最近做项目，要使用Gradle构建工具，常用的构建工具有Ant，Maven和Gradle，综合来讲Gradle应该是这里面最好用的，Maven的配置有些残忍。<br>  使用之前，一直在查Gradle使用教程啥啥的，发现大家都从Groovy开始讲起，我想对于像我这样时间很急，急于使用Gradle构建Java程序的人，显然这些干货有点潮湿，所以我索性就不再看了，直接摸索这进行，下面就分享一下我所学的的东西，按步骤来讲： </p>
<ol>
<li><p>新建Gradle Project 。很简单 右键-&gt;Project，就会看到下图：<br><img src="/2020/10/14/Gradle/%E4%B8%80%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BGradle/1" alt="这里写图片描述"></p>
</li>
<li><p>一路next，当然这个过程中的路径你可以选择改一下，如果不修改，其默认在C盘 </p>
</li>
<li><p>当建好一个Gradle Project后，如下：<br><img src="/2020/10/14/Gradle/%E4%B8%80%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BGradle/2" alt="这里写图片描述"> </p>
</li>
<li><p>需要在src/main/java下写逻辑代码，在src/test/java下写测试代码。 </p>
</li>
<li><p>我对于Gradle的第一个印象是我不用再去CSDN上花积分下载jar包了。这些都可以在build.gradle中解决。打开build.gradle，会看到如下的内容：<br><img src="/2020/10/14/Gradle/%E4%B8%80%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BGradle/3" alt="这里写图片描述"><br> 你只需将你使用的jar包在里面配置即可，即在dependencies（）里的compile（）里进行配置，你可能会想我只知道jar包叫mybatis，可是不知道具体叫啥，是的，配置需要详细的jar包版本等，这个可以去<strong>Maven中央仓库</strong>寻找，以mybatis的jar包为例子。你可以用度娘度一下，也可以输入下图的网址。<br><img src="/2020/10/14/Gradle/%E4%B8%80%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BGradle/4" alt="这里写图片描述"><br>然后输入你要找的jar包。点击进去<br><img src="/2020/10/14/Gradle/%E4%B8%80%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BGradle/5" alt="这里写图片描述"><br>这里就是需要的配置，maven的gradle的都有，你只需将内容<strong>复制</strong>进你的build.gradle里的dependencies（）下。 </p>
</li>
<li><p><strong>右键项目，选择Gradle，选择更新。</strong><br><img src="/2020/10/14/Gradle/%E4%B8%80%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BGradle/6" alt="这里写图片描述"><br>会自己下载jar包，如果成功了，你会在这里看到这个jar包<br><img src="/2020/10/14/Gradle/%E4%B8%80%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BGradle/7" alt="这里写图片描述">。 </p>
</li>
<li><p>结束</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>idea2019版与maven3-6-2版本不兼容的解决方法</title>
    <url>/2020/11/14/IDEA/idea2019%E7%89%88%E4%B8%8Emaven3-6-2%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="idea2019版与maven3-6-2版本不兼容的解决方法"><a href="#idea2019版与maven3-6-2版本不兼容的解决方法" class="headerlink" title="idea2019版与maven3-6-2版本不兼容的解决方法"></a>idea2019版与maven3-6-2版本不兼容的解决方法</h2><p><img src="/2020/11/14/IDEA/idea2019%E7%89%88%E4%B8%8Emaven3-6-2%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.png" alt="idea2019版与maven3.6.2版本不兼容的解决方法"></p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven和Gradle对比</title>
    <url>/2020/10/14/Gradle/Maven%E5%92%8CGradle%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<h1 id="Maven和Gradle对比"><a href="#Maven和Gradle对比" class="headerlink" title="Maven和Gradle对比"></a>Maven和Gradle对比</h1><p>Java世界中主要有三大构建工具：Ant、Maven和Gradle。经过几年的发展，Ant几乎销声匿迹、Maven也日薄西山，而Gradle的发展则如日中天。笔者有幸见证了Maven的没落和Gradle的兴起。Maven的主要功能主要分为5点，分别是依赖管理系统、多模块构建、一致的项目结构、一致的构建模型和插件机制。我们可以从这五个方面来分析一下Gradle比起Maven的先进之处。</p>
<h2 id="依赖管理系统"><a href="#依赖管理系统" class="headerlink" title="依赖管理系统"></a>依赖管理系统</h2><p>Maven为Java世界引入了一个新的依赖管理系统。在Java世界中，可以用groupId、artifactId、version组成的Coordination（坐标）唯一标识一个依赖。任何基于Maven构建的项目自身也必须定义这三项属性，生成的包可以是Jar包，也可以是war包或者ear包。一个典型的依赖引用如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;    &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;    &lt;version&gt;4.12&lt;&#x2F;version&gt;    &lt;scope&gt;test&lt;&#x2F;scope&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-test&lt;&#x2F;artifactId&gt; &lt;&#x2F;dependency&gt; </span><br></pre></td></tr></table></figure>

<p>从上面可以看出当引用一个依赖时，version可以省略掉，这样在获取依赖时会选择最新的版本。而存储这些组件的仓库有远程仓库和本地仓库之分。远程仓库可以使用世界公用的central仓库，也可以使用Apache  Nexus自建私有仓库；本地仓库则在本地计算机上。通过Maven安装目录下的settings.xml文件可以配置本地仓库的路径，以及采用的远程仓库的地址。</p>
<p>Gradle在设计的时候基本沿用了Maven的这套依赖管理体系。不过它在引用依赖时还是进行了一些改进。</p>
<ol>
<li>首先引用依赖方面变得非常简洁。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;org.hibernate:hibernate-core:3.6.7.Final&#39;</span><br><span class="line">    testCompile ‘junit:junit:4.+&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>第二，Maven和Gradle对依赖项的scope有所不同。在Maven世界中，一个依赖项有6种scope，分别是complie(默认)、provided、runtime、test、system、import。而grade将其简化为了4种，compile、runtime、testCompile、testRuntime。那么如果想在gradle使用类似于provided的scope怎么办？别着急，由于gradle语言的强大表现力，我们可以轻松编写代码来实现类似于provided scope的概念（例如<a href="http://stackoverflow.com/questions/18738888/how-to-use-provided-scope-for-jar-file-in-gradle-build">How to use provided scope for jar file in Gradle build?</a>）。</p>
</li>
<li><p>第三点是Gradle支持动态的版本依赖。在版本号后面使用+号的方式可以实现动态的版本管理。</p>
</li>
<li><p>第四点是在解决依赖冲突方面Gradle的实现机制更加明确。使用Maven和Gradle进行依赖管理时都采用的是传递性依赖；而如果多个依赖项指向同一个依赖项的不同版本时就会引起依赖冲突。而Maven处理这种依赖关系往往是噩梦一般的存在。而Gradle在解决依赖冲突方面相对来说比较明确。在<a href="https://docs.gradle.org/current/userguide/dependency_management.html">Chapter 23. Dependency Management </a>中的23.2.3章节详细解读了gradle是如何处理版本冲突的。</p>
</li>
</ol>
<h2 id="多模块构建"><a href="#多模块构建" class="headerlink" title="多模块构建"></a>多模块构建</h2><p>在SOA和微服务的浪潮下，将一个项目分解为多个模块已经是很通用的一种方式。在Maven中需要定义个parent POM作为一组module的聚合POM。在该POM中可以使用<code>&lt;modules&gt;</code>标签来定义一组子模块。parent POM不会有什么实际构建产出。而parent POM中的build配置以及依赖配置都会自动继承给子module。</p>
<p>而Gradle也支持多模块构建。而在parent的build.gradle中可以使用allprojects和subprojects代码块来分别定义里面的配置是应用于所有项目还是子项目。对于子模块的定义是放置在setttings.gradle文件中的。在gradle的设计当中，每个模块都是Project的对象实例。而在parent build.gradle中通过allprojects或subprojects可以对这些对象进行各种操作。这无疑比Maven要灵活的多。</p>
<p>比如在parent的build.gradle中有以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    task hello &lt;&lt; &#123; task -&gt; println &quot;I&#39;m $task.project.name&quot; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行命令<code>gradle -q hello</code>会依次打印出父module以及各个submodule的项目名称。这种强大的能力能让gradle对各个模块具有更强的定制化。</p>
<h2 id="一致的项目结构"><a href="#一致的项目结构" class="headerlink" title="一致的项目结构"></a>一致的项目结构</h2><p>在Ant时代大家创建Java项目目录时比较随意，然后通过Ant配置指定哪些属于source，那些属于testSource等。而Maven在设计之初的理念就是Conversion over configuration（约定大于配置）。其制定了一套项目目录结构作为标准的Java项目结构。一个典型的Maven项目结构如下：</p>
<p><img src="/2020/10/14/Gradle/Maven%E5%92%8CGradle%E5%AF%B9%E6%AF%94/project_structure.png" alt="img"></p>
<p>Gradle也沿用了这一标准的目录结构。如果你在Gradle项目中使用了标准的Maven项目结构的话，那么在Gradle中也无需进行多余的配置,只需在文件中包含<code>apply plugin:&#39;java&#39;</code>,系统会自动识别source、resource、test srouce、 test  resource等相应资源。不过Gradle作为JVM上的构建工具，也同时支持groovy、scala等源代码的构建，甚至支持Java、groovy、scala语言的混合构建。虽然Maven通过一些插件（比如<a href="http://scala-tools.org/mvnsites/maven-scala-plugin/">maven-scala-plugin</a>）也能达到相同目的，但配置方面显然Gradle要更优雅一些。</p>
<h2 id="一致的构建模型"><a href="#一致的构建模型" class="headerlink" title="一致的构建模型"></a>一致的构建模型</h2><p>为了解决Ant中对项目构建活动缺乏标准化的问题，Maven特意设置了标准的项目构建周期，其默认的构建周期如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;phases&gt;</span><br><span class="line">  &lt;phase&gt;validate&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;initialize&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;generate-sources&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;process-sources&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;generate-resources&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;process-resources&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;compile&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;process-classes&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;generate-test-sources&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;process-test-sources&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;generate-test-resources&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;process-test-resources&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;test-compile&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;process-test-classes&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;test&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;prepare-package&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;pre-integration-test&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;integration-test&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;post-integration-test&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;verify&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;install&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;phase&gt;deploy&lt;&#x2F;phase&gt;</span><br><span class="line">&lt;&#x2F;phases&gt;</span><br></pre></td></tr></table></figure>

<p>而这种构建周期也是Maven最为人诟病的地方。因为Maven将项目的构建周期限制的太死，你无法在构建周期中添加新的phase，只能将插件绑定到已有的phase上。而现在项目的构建过程变得越来越复杂，而且多样化，显然Maven对这种复杂度缺少足够的应变能力。比如你想在项目构建过程中进行一项压缩所有javascript的任务，那么就要绑定到Maven的现有的某个phase上，而显然貌似放在哪个phase都不太合适。而且这些phase都是串行的，整个执行下来是一条线，这也限制了Maven的构建效率。而Gradle在构建模型上则非常灵活。在Gradle世界里可以轻松创建一个task，并随时通过<code>depends</code>语法建立与已有task的依赖关系。甚至对于Java项目的构建来说，Gradle是通过名为<code>java</code>的插件来包含了一个对Java项目的构建周期，这等于Gradle本身直接与项目构建周期是解耦的。</p>
<h2 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h2><p>Maven和Gradle设计时都采用了插件机制。但显然Gradle更胜一筹。主要原因在于Maven是基于XML进行配置。所以其配置语法太受限于XML。即使实现很小的功能都需要设计一个插件，建立其与XML配置的关联。比如想在Maven中执行一条shell命令，其配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.codehaus.mojo&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;exec-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;executions&gt;</span><br><span class="line">    &lt;execution&gt;</span><br><span class="line">      &lt;id&gt;drop DB &#x3D;&gt; db_name&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;phase&gt;pre-integration-test&lt;&#x2F;phase&gt;</span><br><span class="line">      &lt;goals&gt;</span><br><span class="line">        &lt;goal&gt;exec&lt;&#x2F;goal&gt;</span><br><span class="line">      &lt;&#x2F;goals&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">        &lt;executable&gt;curl&lt;&#x2F;executable&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">          &lt;argument&gt;-s&lt;&#x2F;argument&gt;</span><br><span class="line">          &lt;argument&gt;-S&lt;&#x2F;argument&gt;</span><br><span class="line">          &lt;argument&gt;-X&lt;&#x2F;argument&gt;</span><br><span class="line">          &lt;argument&gt;DELETE&lt;&#x2F;argument&gt;</span><br><span class="line">          &lt;argument&gt;http:&#x2F;&#x2F;$&#123;db.server&#125;:$&#123;db.port&#125;&#x2F;db_name&lt;&#x2F;argument&gt;</span><br><span class="line">        &lt;&#x2F;arguments&gt;</span><br><span class="line">      &lt;&#x2F;configuration&gt;</span><br><span class="line">    &lt;&#x2F;execution&gt;</span><br><span class="line">  &lt;&#x2F;executions&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>

<p>而在Gradle中则一切变得非常简单。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">task dropDB(type: Exec) &#123;</span><br><span class="line"> commandLine ‘curl’,’-s’,’s’,’-x’,’DELETE’,&quot;http:&#x2F;&#x2F;$&#123;db.server&#125;:&#123;db.port&#125;&#x2F;db_name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在创建自定义插件方面，Maven和Gradle的机制都差不多，都是继承自插件基类，然后实现要求的方法。这里就不展开说明。</p>
<hr>
<p>从以上五个方面可以看出Maven和Gradle的主要差异。Maven的设计核心<code>Convention Over Configuration</code>被Gradle更加发扬光大，而Gradle的<code>配置即代码</code>又超越了Maven。在Gradle中任何配置都可以作为代码被执行的，我们也可以随时使用已有的Ant脚本（Ant task是Gradle中的一等公民）、Java类库、Groovy类库来辅助完成构建任务的编写。</p>
<p>这种采用本身语言实现的DSL对本身语言项目进行构建管理的例子比比皆是。比如Rake和Ruby、Grunt和JavaScript、Sbt和Ruby…..而Gradle之所以使用Groovy语言实现，是因为Groovy比Java语言更具表现力，其语法特性更丰富，又兼具函数式的特点。这几年兴起的语言（比如Scala、Go、Swift）都属于强类型的语言，兼具面向对象和函数式的特点。</p>
<p>Gradle的命令行比Maven的也要要强大的多。</p>
]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>如何调出IDEA的Maven-Project视图</title>
    <url>/2020/11/14/IDEA/%E5%A6%82%E4%BD%95%E8%B0%83%E5%87%BAIDEA%E7%9A%84Maven-Project%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="如何调出IDEA的Maven-Project-视图"><a href="#如何调出IDEA的Maven-Project-视图" class="headerlink" title="如何调出IDEA的Maven-Project-视图"></a>如何调出IDEA的Maven-Project-视图</h2><p><img src="/2020/11/14/IDEA/%E5%A6%82%E4%BD%95%E8%B0%83%E5%87%BAIDEA%E7%9A%84Maven-Project%E8%A7%86%E5%9B%BE/123.png" alt="关于idea右侧的maven project 如何调出来"></p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ-IDEA中Project和Module的概念及区别</title>
    <url>/2020/10/19/IDEA/IntelliJ-IDEA%E4%B8%ADProject%E5%92%8CModule%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="IntelliJ-IDEA-中-Project-和-Module-的概念及区别"><a href="#IntelliJ-IDEA-中-Project-和-Module-的概念及区别" class="headerlink" title="IntelliJ IDEA 中 Project 和 Module 的概念及区别"></a>IntelliJ IDEA 中 Project 和 Module 的概念及区别</h1><p>在 IntelliJ IDEA 中，没有类似于 Eclipse 工作空间（<code>Workspace</code>）的概念，而是提出了<code>Project</code>和<code>Module</code>这两个概念。接下来，就让我们一起看看 IntelliJ IDEA 官方是如何描述两者的吧！<strong>对于 Project，IntelliJ IDEA 官方是这样介绍的</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A project is a top-level organizational unit for your  development work in IntelliJ IDEA. In its finished form, a project may  represent a complete software solution. A project is a collection of:</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Your work results: source code, build scripts, configuration files, documentation, artifacts, etc.</code></li>
<li><code>SDKs and libraries that you use to develop, compile, run and test your code.</code></li>
<li><code>Project settings that represent your working preferences in the context of a project.</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A project has one or more modules as its parts.</span><br></pre></td></tr></table></figure>

<p><strong>对于 Module，IntelliJ IDEA 官方是这样介绍的</strong>：</p>
<ul>
<li><code>A module is a part of a project that you can compile, run, test and debug independently.</code></li>
<li><code>Modules are a way to reduce complexity of large projects while maintaining a common (project) configuration.</code></li>
<li><code>Modules are reusable: if necessary, a module can be included in more than one project.</code></li>
</ul>
<p>通过上面的介绍，我们知道：在 IntelliJ IDEA 中<code>Project</code>是最顶级的结构单元，然后就是<code>Module</code>，一个<code>Project</code>可以有多个<code>Module</code>。目前，主流的大型项目结构基本都是多<code>Module</code>的结构，这类项目一般是按功能划分的，比如：<code>user-core-module</code>、<code>user-facade-module</code>和<code>user-hessian-module</code>等等，模块之间彼此可以相互依赖。通过这些<code>Module</code>的命名可以看出，它们都是处于同一个项目中的模块，彼此之间是有着不可分割的业务关系。因此，我们可以大致总结出：一个<code>Project</code>是由一个或多个<code>Module</code>组成，</p>
<ul>
<li>当为单<code>Module</code>项目的时候，这个单独的<code>Module</code>实际上就是一个<code>Project</code>；</li>
<li>当为多<code>Module</code>项目的时候，多个模块处于同一个<code>Project</code>之中，此时彼此之间具有互相依赖的关联关系。</li>
</ul>
<p>此外， IntelliJ IDEA 的<code>Project</code>是一个不具备任何编码设置、构建等开发功能的概念，其主要作用就是起到一个项目定义、范围约束、规范类型的效果，或许，我们也可以简单地理解<code>Project</code>就是一个单纯的目录，只是这个目录在命名上必须有其代表性的意义。在缺省情况下，IntelliJ IDEA 是默认单<code>Project</code>单<code>Module</code>的，这时<code>Project</code>和<code>Module</code>合二为一，在没有修改存储路径的时候，显然<code>Project</code>对<code>Module</code>具有强约束作用！不过说实话，这里就是将<code>Module</code>的内容放在了<code>Project</code>的目录下，实际上还是<code>Module</code>自己约束自己。</p>
<p><img src="/2020/10/19/IDEA/IntelliJ-IDEA%E4%B8%ADProject%E5%92%8CModule%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%8C%BA%E5%88%AB/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMzIzMjEwMDU2MjYz" alt="000"></p>
<ul>
<li><strong>标注 1</strong>：<code>Project name</code>，项目名称；</li>
<li><strong>标注 2</strong>：<code>Project location</code>，项目存储地址；</li>
<li><strong>标注 3</strong>：<code>Module name</code>，模块名称；</li>
<li><strong>标注 4</strong>：<code>Module file location</code>，模块存储地址。</li>
</ul>
<p>如上图所示，通过观察<code>Project</code>和<code>Module</code>的存储地址，我们可以发现，IntelliJ IDEA 在此处建立了一个名为<code>user-core-module</code>的目录，并将其放在了名为<code>user-modules-project</code>的目录下，而没有将两个目录合二为一，也就为我们建立多<code>Module</code>的<code>Project</code>作了准备。</p>
<p><img src="/2020/10/19/IDEA/IntelliJ-IDEA%E4%B8%ADProject%E5%92%8CModule%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%8C%BA%E5%88%AB/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMzI0MTQxODEzNDk1" alt="111"></p>
<p>如上图所示，显然<code>user-modules-project</code>仅表现为一个目录而已。</p>
<p><img src="/2020/10/19/IDEA/IntelliJ-IDEA%E4%B8%ADProject%E5%92%8CModule%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%8C%BA%E5%88%AB/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMzI0MTQyNzUwNDI3" alt="112"></p>
<p>如上图所示，依次点击<code>File -&gt; New -&gt; Module</code>，进入如下界面：</p>
<p><img src="/2020/10/19/IDEA/IntelliJ-IDEA%E4%B8%ADProject%E5%92%8CModule%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%8C%BA%E5%88%AB/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMzI0MTQyOTEyNDk0" alt="113"></p>
<p>如上图所示，输入<code>Module name</code>之后，<code>Content root</code>和<code>Module file location</code>自动发生改变，然后点击<code>Finish</code>，完成：</p>
<p><img src="/2020/10/19/IDEA/IntelliJ-IDEA%E4%B8%ADProject%E5%92%8CModule%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%8C%BA%E5%88%AB/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMzI0MTQzMTAyMDI4" alt="114"></p>
<p>如上图所示，我们在项目<code>user-modules-project</code>中，建立了两个<code>Module</code>，分别为<code>user-core-module</code>和<code>user-hessian-module</code>，然后我们再来看看存储目录：</p>
<p><img src="/2020/10/19/IDEA/IntelliJ-IDEA%E4%B8%ADProject%E5%92%8CModule%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%8C%BA%E5%88%AB/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMzI0MTQzNTU2ODk5" alt="115"></p>
<p>如上图所示，显然在<code>user-modules-project</code>目录中，又多了一个名为<code>user-hessian-module</code>的目录。</p>
<p>至此，多<code>Module</code>的<code>Project</code>构建完成！</p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>在Intellij-IDEA中使用Debug</title>
    <url>/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/</url>
    <content><![CDATA[<h1 id="在Intellij-IDEA中使用Debug"><a href="#在Intellij-IDEA中使用Debug" class="headerlink" title="在Intellij IDEA中使用Debug"></a>在Intellij IDEA中使用Debug</h1><p>　　Debug用来追踪代码的运行流程，通常在程序运行过程中出现异常，启用Debug模式可以分析定位异常发生的位置，以及在运行过程中参数的变化。通常我们也可以启用Debug模式来跟踪代码的运行流程去学习三方框架的源码。</p>
<p>　　所以学习下如何在Intellij IDEA中使用好Debug，主要包括如下内容：</p>
<h2 id="一、Debug开篇"><a href="#一、Debug开篇" class="headerlink" title="一、Debug开篇"></a>一、Debug开篇</h2><p>　　首先看下IDEA中Debug模式下的界面。</p>
<p>　　如下是在IDEA中启动Debug模式，进入断点后的界面，我这里是Windows，可能和Mac的图标等会有些不一样。就简单说下图中标注的8个地方：</p>
<p>　　① 以Debug模式启动服务，左边的一个按钮则是以Run模式启动。在开发中，我一般会直接启动Debug模式，方便随时调试代码。</p>
<p>　　② 断点：在左边行号栏单击左键，或者快捷键Ctrl+F8 打上/取消断点，断点行的颜色可自己去设置。</p>
<p>　　③ Debug窗口：访问请求到达第一个断点后，会自动激活Debug窗口。如果没有自动激活，可以去设置里设置，如图1.2。</p>
<p>　　④ 调试按钮：一共有8个按钮，调试的主要功能就对应着这几个按钮，鼠标悬停在按钮上可以查看对应的快捷键。在菜单栏Run里可以找到同样的对应的功能，如图1.4。</p>
<p>　　⑤ 服务按钮：可以在这里关闭/启动服务，设置断点等。</p>
<p>　　⑥ 方法调用栈：这里显示了该线程调试所经过的所有方法，勾选右上角的[Show All Frames]按钮，就不会显示其它类库的方法了，否则这里会有一大堆的方法。</p>
<p>　　⑦ Variables：在变量区可以查看当前断点之前的当前方法内的变量。</p>
<p>　　⑧ Watches：查看变量，可以将Variables区中的变量拖到Watches中查看 </p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905221418147-1205043020.png" alt="img"></p>
<p> 在设置里勾选Show debug window on breakpoint，则请求进入到断点后自动激活Debug窗口</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905111655647-1134637623.png" alt="img"></p>
<p> 如果你的IDEA底部没有显示工具栏或状态栏，可以在View里打开，显示出工具栏会方便我们使用。可以自己去尝试下这四个选项。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905112617351-1554043487.png" alt="img"></p>
<p> 在菜单栏Run里有调试对应的功能，同时可以查看对应的快捷键。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905124338444-556465721.png" alt="img"></p>
<h2 id="二、基本用法-amp-快捷键"><a href="#二、基本用法-amp-快捷键" class="headerlink" title="二、基本用法&amp;快捷键"></a>二、基本用法&amp;快捷键</h2><p>Debug调试的功能主要对应着图一中4和5两组按钮：</p>
<p>　　1. 说第一组按钮，共8个按钮，从左到右依次如下：</p>
<p>　　　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905134837851-1615718043.png" alt="img"> </p>
<p>　　　　&gt; Show Execution Point (Alt + F10)：如果你的光标在其它行或其它页面，点击这个按钮可跳转到当前代码执行的行。</p>
<p>　　　　&gt; Step Over (F8)：步过，一行一行地往下走，如果这一行上有方法不会进入方法。</p>
<p>　　　　&gt; Step Into (F7)：步入，如果当前行有方法，可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法，如第25行的put方法。</p>
<p>　　　　&gt; Force Step Into (Alt + Shift + F7)：强制步入，能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法。</p>
<p>　　　　&gt; Step Out (Shift + F8)：步出，从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。</p>
<p>　　　　&gt; Drop Frame (默认无)：回退断点，后面章节详细说明。</p>
<p>　　　　&gt; Run to Cursor (Alt + F9)：运行到光标处，你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点。</p>
<p>　　　　&gt; Evaluate Expression (Alt + F8)：计算表达式，后面章节详细说明。</p>
<p>　　2. 按钮，共7个按钮，从上到下依次如下：</p>
<p> 　　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905134011101-1824595229.png" alt="img"> </p>
<p>　　　　&gt; Rerun ‘xxxx’：重新运行程序，会关闭服务后重新启动程序。</p>
<p>　　　　&gt; Update ‘tech’ application (Ctrl + F5)：更新程序，一般在你的代码有改动后可执行这个功能。而这个功能对应的操作则是在服务配置里，如图2.3。</p>
<p>　　　　&gt; Resume Program (F9)：恢复程序，比如，你在第20行和25行有两个断点，当前运行至第20行，按F9，则运行到下一个断点(即第25行)，再按F9，则运行完整个流程，因为后面已经没有断点了。</p>
<p>　　　　&gt; Pause Program：暂停程序，启用Debug。目前没发现具体用法。</p>
<p>　　　　&gt; Stop ‘xxx’ (Ctrl + F2)：连续按两下，关闭程序。有时候你会发现关闭服务再启动时，报端口被占用，这是因为没完全关闭服务的原因，你就需要查杀所有JVM进程了。</p>
<p>　　　　&gt; View Breakpoints (Ctrl + Shift + F8)：查看所有断点，后面章节会涉及到。</p>
<p>　　　　&gt; Mute Breakpoints：哑的断点，选择这个后，所有断点变为灰色，断点失效，按F9则可以直接运行完程序。再次点击，断点变为红色，有效。如果只想使某一个断点失效，可以在断点上右键取消Enabled，如图 则该行断点失效。 <img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905193821194-225518192.png" alt="img"></p>
<ul>
<li><p>更新程序，On ‘Update’ actions，执行更新操作时所做的事情，一般选择’Update classes and resources’，即更新类和资源文件。</p>
<p>一般配合热部署插件会更好用，如JRebel，这样就不用每次更改代码后还要去重新启动服务。如何激活JRebel，在最后章节附上。</p>
<p>下面的On frame deactivation，在IDEA窗口失去焦点时触发，即一般你从idea切换到浏览器的时候，idea会自动帮你做的事情，一般可以设置Do nothing，频繁切换会比较消耗资源的。</p>
<p>　 　 <img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905143932694-500925087.png" alt="img"></p>
</li>
</ul>
<p>　　</p>
<h2 id="三、变量查看"><a href="#三、变量查看" class="headerlink" title="三、变量查看"></a>三、变量查看</h2><p>在Debug过程中，跟踪查看变量的变化是非常必要的，这里就简单说下IDEA中可以查看变量的几个地方，相信大部分人都了解。</p>
<p>　　1. 如下，在IDEA中，参数所在行后面会显示当前变量的值。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905154209179-9123997.png" alt="img"> </p>
<p>　　2. 光标悬停到参数上，显示当前变量信息。点击打开详情如图。我一般会使用这种方式，快捷方便。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905154425772-770303651.png" alt="img"> </p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905154724866-160919363.png" alt="img"> </p>
<p>　　3. 在Variables里查看，这里显示当前方法里的所有变量。</p>
<p> 　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905155339491-1166069157.png" alt="img"></p>
<p>　　4. 在Watches里，点击New Watch，输入需要查看的变量。或者可以从Variables里拖到Watche里查看。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905160057038-750351531.png" alt="img"> </p>
<p>　　如果你发现你没有Watches，可能在下图所在的地方。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905160433710-2004658473.png" alt="img"> </p>
<p>　  <img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905160515538-1647769062.png" alt="img"> </p>
<h2 id="四、计算表达式"><a href="#四、计算表达式" class="headerlink" title="四、计算表达式"></a>四、计算表达式</h2><p>　　在前面提到的计算表达式如图4.1的按钮，Evaluate Expression (Alt + F8) 。可以使用这个操作在调试过程中计算某个表达式的值，而不用再去打印信息。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905160826444-1625048711.png" alt="img"> </p>
<p>　　1. 按Alt + F8或按钮，或者，你可以选中某个表达式再Alt + F8，弹出计算表达式的窗口，如下，回车或点击Evaluate计算表达式的值。</p>
<p>　　　 这个表达式不仅可以是一般变量或参数，也可以是方法，当你的一行代码中调用了几个方法时，就可以通过这种方式查看查看某个方法的返回值。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905161614694-93470669.png" alt="img"> </p>
<p>　　2. 设置变量，在计算表达式的框里，可以改变变量的值，这样有时候就能很方便我们去调试各种值的情况了不是。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905162404288-824548249.png" alt="img"></p>
<h2 id="五、智能步入"><a href="#五、智能步入" class="headerlink" title="五、智能步入"></a>五、智能步入</h2><p>　　想想，一行代码里有好几个方法，怎么只选择某一个方法进入。之前提到过使用Step Into (Alt + F7) 或者 Force  Step Into (Alt + Shift + F7)进入到方法内部，但这两个操作会根据方法调用顺序依次进入，这比较麻烦。</p>
<p>　　那么智能步入就很方便了，智能步入，这个功能在Run里可以看到，Smart Step Into (Shift + F7)，如图5.1</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905152523304-803289488.png" alt="img"> </p>
<p>　　按Shift + F7，会自动定位到当前断点行，并列出需要进入的方法，如图5.2，点击方法进入方法内部。</p>
<p>　　如果只有一个方法，则直接进入，类似Force Step Into。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905163730929-1374653206.png" alt="img"> </p>
<h2 id="六、断点条件设置"><a href="#六、断点条件设置" class="headerlink" title="六、断点条件设置"></a>六、断点条件设置</h2><p>　　通过设置断点条件，在满足条件时，才停在断点处，否则直接运行。</p>
<p>　　通常，当我们在遍历一个比较大的集合或数组时，在循环内设置了一个断点，难道我们要一个一个去看变量的值？那肯定很累，说不定你还错过这个值得重新来一次。</p>
<p>　　1. 在断点上右键直接设置当前断点的条件，如图6.1，我设置exist为true时断点才生效。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905165253944-1162138475.png" alt="img"></p>
<p>　　2. 点击View Breakpoints (Ctrl + Shift + F8)，查看所有断点。</p>
<p>　　　　Java Line Breakpoints 显示了所有的断点，在右边勾选Condition，设置断点的条件。</p>
<p>　　　　勾选Log message to console，则会将当前断点行输出到控制台，如图6.3</p>
<p>　　　　勾选Evaluate and log，可以在执行这行代码是计算表达式的值，并将结果输出到控制台。</p>
<p>　　</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905170655163-1805982960.png" alt="img"></p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905170947257-1667065155.png" alt="img"></p>
<p>　　3. 再说说右边的Filters过滤，这些一般情况下不常用，简单说下意思。</p>
<p>　　　　Instance filters：实例过滤，输入实例ID(如图6.5中的实例ID)，但是我这里没有成功，不知道什么原因，知道的朋友留个言。</p>
<p>　　　　Class filters：类过滤，根据类名过滤，同样没有成功….</p>
<p>　　　　Pass count：用于循环中，如果断点在循环中，可以设置该值，循环多少次后停在断点处，之后的循环都会停在断点处。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905185247132-1922055922.png" alt="img"> </p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905190253304-1057381593.png" alt="img"></p>
<p>　　4. 异常断点，通过设置异常断点，在程序中出现需要拦截的异常时，会自动定位到异常行。</p>
<p>　　如图6.6，点击+号添加Java Exception Breakpoints，添加异常断点。然后输入需要断点的异常类，如图6.7，之后可以在Java Exception Breakpoints里看到添加的异常断点。</p>
<p>　　我这里添加了一个NullPointerException异常断点，如图6.8，出现空指针异常后，自动定位在空指针异常行。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905200131851-150143203.png" alt="img"></p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905200305147-527881101.png" alt="img"> </p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905200726069-688175303.png" alt="img"> </p>
<h2 id="七、多线程调试"><a href="#七、多线程调试" class="headerlink" title="七、多线程调试"></a>七、多线程调试</h2><p>　　一般情况下我们调试的时候是在一个线程中的，一步一步往下走。但有时候你会发现在Debug的时候，想发起另外一个请求都无法进行了？</p>
<p>　　那是因为IDEA在Debug时默认阻塞级别是ALL，会阻塞其它线程，只有在当前调试线程走完时才会走其它线程。可以在View Breakpoints里选择Thread，如图7.1，然后点击Make Default设置为默认选项。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905204329757-1196950664.png" alt="img"> </p>
<p>　　切换线程，在图7.2中Frames的下拉列表里，可以切换当前的线程，如下我这里有两个Debug的线程，切换另外一个则进入另一个Debug的线程。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905205012663-56609868.png" alt="img"> </p>
<h2 id="八、回退断点"><a href="#八、回退断点" class="headerlink" title="八、回退断点"></a>八、回退断点</h2><p>　　在调试的时候，想要重新走一下流程而不用再次发起一个请求？</p>
<p>　　1. 首先认识下这个方法调用栈，如图8.1，首先请求进入DemoController的insertDemo方法，然后调用insert方法，其它的invoke我们且先不管，最上面的方法是当前断点所在的方法。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905210917741-1095775464.png" alt="img"> </p>
<p>　　2. 断点回退</p>
<p>　　所谓的断点回退，其实就是回退到上一个方法调用的开始处，在IDEA里测试无法一行一行地回退或回到到上一个断点处，而是回到上一个方法。</p>
<p>　　回退的方式有两种，一种是Drop Frame按钮(图8.2)，按调用的方法逐步回退，包括三方类库的其它方法(取消Show All Frames按钮会显示三方类库的方法，如图8.3)。</p>
<p>　　第二种方式，在调用栈方法上选择要回退的方法，右键选择Drop Frame(图8.4)，回退到该方法的上一个方法调用处，此时再按F9(Resume Program)，可以看到程序进入到该方法的断点处了。</p>
<p>　　但有一点需要注意，断点回退只能重新走一下流程，之前的某些参数/数据的状态已经改变了的是无法回退到之前的状态的，如对象、集合、更新了数据库数据等等。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905211428554-1617570377.png" alt="img"></p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905211723304-1223322879.png" alt="img"></p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905212138101-113776159.png" alt="img"></p>
<h2 id="九、中断Debug"><a href="#九、中断Debug" class="headerlink" title="九、中断Debug"></a>九、中断Debug</h2><p>　　想要在Debug的时候，中断请求，不要再走剩余的流程了？</p>
<p>　　有些时候，我们看到传入的参数有误后，不想走后面的流程了，怎么中断这次请求呢(后面的流程要删除数据库数据呢….)，难道要关闭服务重新启动程序？嗯，我以前也是这么干的。</p>
<p>　　确切的说，我也没发现可以直接中断请求的方式(除了关闭服务)，但可以通过Force Return，即强制返回来避免后续的流程，如图9.1。</p>
<p>　　点击Force Return，弹出Return Value的窗口，我这个方法的返回类型为Map，所以，我这里直接返回 results，来强制返回，从而不再进行后续的流程。或者你可以new HashMap&lt;&gt;()。</p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905213656241-1998475384.png" alt="img"></p>
<p>　　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905214031397-1943297392.png" alt="img"></p>
<h2 id="十、附：JRebel激活"><a href="#十、附：JRebel激活" class="headerlink" title="十、附：JRebel激活"></a>十、附：JRebel激活</h2><p>　　目前本人一直使用JRebel做热部署工具，效果还算理想，修改Java代码或者xml等配置文件都能热更新。偶尔服务开久了，或更改的文件较多时，热更新没有生效，需要重新启动服务。</p>
<p>　　这里只是简单说下我在网上看到的一种免费获得永久使用权的方式(非破解)，不确定这种方式什么时候不能用。</p>
<p>　　① 首先你需要一个Facebook或Twitter的账号(最好Twitter)</p>
<p>　　② 进入这个网址：<a href="https://my.jrebel.com/%EF%BC%8C%E5%B9%B6%E7%99%BB%E5%BD%95%EF%BC%8C%E5%A6%82%E5%9B%BE10.1">https://my.jrebel.com/，并登录，如图10.1</a></p>
<p>　　③ 然后在Install and Acticate里可以得到你的永久激活码。</p>
<p>　　④ 在设置里Jrebel里设置激活码，如图10.3，如果没有安装JRebel插件，先在Plugins里安装搜索安装JRebel插件。</p>
<p> 　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905215607882-171678285.png" alt="img"></p>
<p>　<img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905215814194-779245117.png" alt="img"></p>
<p>​    <img src="/2020/11/14/IDEA/%E5%9C%A8Intellij-IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Debug/856154-20170905220123351-598613604.png" alt="img"></p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>将Java项目转换成exe可执行文件</title>
    <url>/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="java项目转换成exe可执行文件（使用exe4j）"><a href="#java项目转换成exe可执行文件（使用exe4j）" class="headerlink" title="java项目转换成exe可执行文件（使用exe4j）"></a>java项目转换成exe可执行文件（使用exe4j）</h1><p>exe4j 32位及64位及jre百度云盘地址：<a href="https://pan.baidu.com/s/12yFNmajy4hSCXlDU51ukZg">https://pan.baidu.com/s/12yFNmajy4hSCXlDU51ukZg</a></p>
<p>直接上图</p>
<ol>
<li>右击项目–选择export</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/1" alt="img"></p>
<ol start="2">
<li>选择导出类型JAR file,下一步</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/2" alt="img"></p>
<ol start="3">
<li>红框中配置文件jar什么的不要选择，后期再加，下一步</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/3" alt="img"></p>
<ol start="4">
<li>下一步</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/4" alt="img"></p>
<ol start="5">
<li>选择项目中程序运行的 main方法所在的类文件，点击完成</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/5" alt="img"></p>
<ol start="6">
<li>如有报错，不要理会点击ok</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/6" alt="img"></p>
<ol start="7">
<li>复制32位的jre到要生成exe的目录里（不管系统是64还是32，最好都放一个32位jre到目录里）</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/7" alt="img"></p>
<ol start="8">
<li>打开exe4j，注意要激活软件，下一步</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/8" alt="img"></p>
<ol start="9">
<li>再下一步</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/9" alt="img"></p>
<ol start="10">
<li>选择程序名称，及生成位置</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/10" alt="img"></p>
<ol start="11">
<li>选择控制台应用，可以选择gui应用，选择gui时要在Icon File添加图片路径，下一步</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/11" alt="img"></p>
<ol start="12">
<li>点击加号添加生成的jar文件，选择main class</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/12" alt="img"></p>
<ol start="13">
<li>点击加号添加项目依赖的其他jar包</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/13" alt="img"></p>
<ol start="14">
<li>选择运行时最低需要的jre环境</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/14" alt="img"></p>
<ol start="15">
<li>选择advanced options–Search sequence来添加运行环境</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/15" alt="img"></p>
<ol start="16">
<li>点击加号，添加本地运行环境</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/16" alt="img"></p>
<ol start="17">
<li> 下一步</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/17" alt="img"></p>
<ol start="18">
<li><p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/18'" alt="img"></p>
</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/18" alt="img"></p>
<ol start="19">
<li>点击红框中可以测试打包的exe程序</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/19" alt="img"></p>
<ol start="20">
<li>点击exit，会提示你要不要保存刚才的设置，不需要保存；如果保存了，可以直接点击保存的文件进行对exe打包过程的修改</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/20" alt="img"></p>
<ol start="21">
<li>如下分别是运行环境，复制过来的配置文件，以及打包生成的exe文件</li>
</ol>
<p><img src="/2020/11/14/Java/%E5%B0%86Java%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/21" alt="img"></p>
<p>为什么我的exe文件没法打开呢</p>
<p>回复: 在控制台打开的，不能双击1年前回复![img]</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>项目部署</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO插入图片（详细版）</title>
    <url>/2019/11/08/Hexo/HEXO%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="HEXO插入图片（详细版）"><a href="#HEXO插入图片（详细版）" class="headerlink" title="HEXO插入图片（详细版）"></a>HEXO插入图片（详细版）</h1><p>菜鸟一枚，插入图片的时候走了不少弯路，写篇blog记录一下。</p>
<h2 id="第一步：安装插件，在hexo根目录打开Git-Bash-执行"><a href="#第一步：安装插件，在hexo根目录打开Git-Bash-执行" class="headerlink" title="第一步：安装插件，在hexo根目录打开Git Bash,执行"></a>第一步：安装插件，在hexo根目录打开Git Bash,执行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<h2 id="第二步：打开hexo的配置文件-config-yml"><a href="#第二步：打开hexo的配置文件-config-yml" class="headerlink" title="第二步：打开hexo的配置文件_config.yml"></a>第二步：打开hexo的配置文件_config.yml</h2><p>找到 post_asset_folder，把这个选项从false改成true</p>
<h2 id="第三步：修改Js"><a href="#第三步：修改Js" class="headerlink" title="第三步：修改Js"></a>第三步：修改Js</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;node_modules&#x2F;hexo-asset-image&#x2F;index.js</span><br></pre></td></tr></table></figure>

<p>将内容更换为下面的代码<br> （在此感谢Ericam_ 大神：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/xjm850552586">https://blog.csdn.net/xjm850552586</a>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var cheerio = require(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        var link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of <span class="string">&quot;about&quot;</span> page is like <span class="string">&quot;.../about/index.html&quot;</span>.</span><br><span class="line">    var endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(this).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            // For windows style path, we replace <span class="string">&#x27;\&#x27;</span> to <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line">            var src = $(this).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.<span class="built_in">test</span>(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.<span class="built_in">test</span>(src)) &#123;</span><br><span class="line">              // For <span class="string">&quot;about&quot;</span> page, the first part of <span class="string">&quot;src&quot;</span> can<span class="string">&#x27;t be removed.</span></span><br><span class="line"><span class="string">              // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">              var linkArray = link.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              var srcArray = src.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">                srcArray.shift();</span></span><br><span class="line"><span class="string">              src = srcArray.join(&#x27;</span>/<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">              $(this).attr(&#x27;</span>src<span class="string">&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="string">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>

<h2 id="第四步：插入图片"><a href="#第四步：插入图片" class="headerlink" title="第四步：插入图片"></a>第四步：插入图片</h2><p>比如hexo new post photo之后<br> 就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内，<br> 在photo.md文件里面按markdown的标准写,（我的文件名是head.jpeg）比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![这是代替图片的文字，随便写](16864484-0ab72eb5148a5cb6.jpeg)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/08/Hexo/HEXO%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/16864484-0ab72eb5148a5cb6.jpeg" alt="img"></p>
<p>然后就……完事了。</p>
<h2 id="小小的遗憾"><a href="#小小的遗憾" class="headerlink" title="小小的遗憾"></a>小小的遗憾</h2><p>因为Hexo的缘故吧，md文档如果用了上面的方式来插入图片，部署起来是可行的，但是在本地用md编辑器 如Typora 编辑查看的时候，所有的图片都没了，因为这个图片的位置是错的。<br>希望以后可以找到方法来解决这个问题。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java环境变量，真的还有必要配吗？</title>
    <url>/2020/10/15/Java/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E7%9C%9F%E7%9A%84%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E9%85%8D%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="Java环境变量，真的有必要配吗？"><a href="#Java环境变量，真的有必要配吗？" class="headerlink" title="Java环境变量，真的有必要配吗？"></a>Java环境变量，真的有必要配吗？</h2><p>　　作为年龄上堪称老鸟而技术上却是菜鸟的老菜鸟，为了祖国的编程事业，不惜拿出一个月工资，淘了一台配置稍高的二手笔记本，打算与老笔记本中的撸啊撸片彻底说再见，誓要在新机种开启一番撸啊撸的新事业。当然，撸代码离不开基本的环境搭建，每次新机上手都要百度一堆杂乱的似是而非的环境搭建教程，才勉强把开发环境搭建起来，时间耗费不少，但终是拾人牙慧，生搬硬套，从未能理解深层原理，将其内化吸收形成自己的技术积累；而环境搭建虽然基础，但编程界多少前辈大牛都是从此开始的，千万行代码的撸出也都依赖于此，所以，花时间总结一下，思考一番，确有必要。今天先来讲讲最最基本的<strong>环境变量</strong>，博主度娘无数，收获不小，现分两个方面来探究<strong>环境变量</strong>的问题：一是为什么要配置，二是如何配置。</p>
<h2 id="配置环境变量-Why"><a href="#配置环境变量-Why" class="headerlink" title="配置环境变量:Why?"></a>配置环境变量:Why?</h2><p>　　为了回答为什么的问题，还是先将JDK下载好，然后布衣博主先一步步的试错完毕，然后再跟大家分享正确的姿势。安装JDK首先肯定是去<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle官网</a>下载适合自己的开发版本啦，或许是沉浸在JDK1.7的开发环境中太久了，不看官网不知道，一看尼玛JDK1.9都发布了，可怜布衣博主连JDK1.8长啥样都还没见过呢。伤心三秒，果断下载JDK1.8的版本来尝尝。下面是下载主页的重点内容，相信大家都知道具体操作：</p>
<p>　 <img src="/2020/10/15/Java/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E7%9C%9F%E7%9A%84%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E9%85%8D%E5%90%97%EF%BC%9F/1" alt="img"></p>
<p>　<img src="/2020/10/15/Java/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E7%9C%9F%E7%9A%84%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E9%85%8D%E5%90%97%EF%BC%9F/1231169-20180317214916299-1964189242.png" alt="img"></p>
<p>　　安装JDK也很简单，先是JDK，然后是JRE,如果要自定义路径，注意两者不要安装在同一个包下面。然后，作为Java开发者，就会按基本套路开始配置起环境变量。如果仅仅是作为一个代码搬运工，百度有一堆环境变量的配置方式，傻瓜也会配置，但要想成为一个高阶一些的码农，在进行一个操作之前，总该知道你干这件事的缘由——为什么要配置环境变量，如果不配置又会怎样？平时看起来只是开发入门的基础操作，深究起来其实并不简单。有人会呵呵一笑很倾城——不配环境变量，我们怎么开发？欸，这样的问题，我只能说，编程这玩意儿，很多时候不动脑子是可以的，但是不动手却不行。布衣博主以前的固有思想也是觉得，配置环境变量是Java开发的固定姿势，可是今天为了深究环境变量这个问题，下载JDK1.8来折腾一番后发现，仅仅是安装好JDK和JRE，<strong>根本用不着配置什么环境变量就可以开发和跑项目了</strong>，这是怎么回事？到环境变量配置页查看，会发现在path的值中有个C:\ProgramData\Oracle\Java\javapath路径值生成，如以下图中展示（注：图例一为Win10系统的环境变量配置界面，和Win7有很大不同）</p>
<p><img src="/2020/10/15/Java/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E7%9C%9F%E7%9A%84%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E9%85%8D%E5%90%97%EF%BC%9F/1231169-20180318121337115-1327749370.png" alt="img"></p>
<p><img src="/2020/10/15/Java/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E7%9C%9F%E7%9A%84%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E9%85%8D%E5%90%97%EF%BC%9F/1231169-20180318121921514-508139080.png" alt="img"></p>
<p>　　而在映射的路径文件夹中已经存在了可执行的java.exe,这似乎是说明新版JDK（1.8）在安装的时候就已经自动为我们添加好了环境配置。当博主删除该path映射的路径值C:\ProgramData\Oracle\Java\javapath的时候，集成开发环境中的Eclipse/MyEclipse就无法正常打开了，提示需要JDK或JRE,但是IDEA依然能正常使用，恢复之后Eclipse/MyEclipse能够正常使用。接着将JDK1.8卸载，仅保留运行环境JRE，这个时候IDEA少了JDK的支持就无法正常开发使用了，而Eclipse/MyEclipse却依然可以正常使用，这是因为Eclipse/MyEclipse比较例外的是它自己内嵌了Java编译器，对javac没有任何依赖关系,所以Eclipse/Myeclipse其实只需要依赖JRE就可以做开发并编译运行Java文件的，有了JDK只是为了方便查询源码——其实我们不用安装JDK同样可以查看源码，你只要我们的源码包放在任意路径，然后在设置中绑定源码包就可以了，如下图——</p>
<p><img src="/2020/10/15/Java/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E7%9C%9F%E7%9A%84%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E9%85%8D%E5%90%97%EF%BC%9F/1231169-20180409112312315-306384893.png" alt="img"></p>
<p>　　接着卸载JRE,这个时候开发工具肯定是没法使用了，关键是在环境变量的Path值C:\ProgramData\Oracle\Java\javapath也消失了，对应路径下的文件也被删除了，这就说明在安装JRE的时候，是会为我们自动配置好环境变量的。环境变量都没配置就成功的布衣博主实在不甘心，卸载了JDK1.8之后又单独安装了JDK1.7继续尝试，安装完成后Path值并没有自动添加，博主也没有主动的去配置任何环境变量，但是打开Eclipse或者Idea等IDE，依然可以正常开发跑项目。尝试至此，似乎证明了长久以来大家配置环境变量只是思维和行为固化后的自以为是，纯粹是多此一举，对日常开发调试并没有卵用。难道，这么多程序员都在信奉了一个错误的认知而且丝毫不觉得有异？</p>
<p>　　要搞解开这个疑惑，还是得搞清楚环境变量到底是干什么的，为什么要配置它。所谓环境变量，其实就是操作系统中用来指定操作系统运行环境的一些参数，比如临时文件夹位置和系统文件夹位置等。当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到环境变量的PATH中指定的路径值去找。也就是说当执行可执行文件找不到位置的时候，就会去PATH中配置的路径去找。这里你可以做个小测试，就是任意位置新建一个哪怕普通文本文件，将其路径配置成环境变量，然后通过cmd命令行输入文件名，都能打开那个文件，这就环境变量的功劳。因此可以设想如果直接在可执行文件所在文件夹取执行，那不就是找得到吗？为了证明，博主先打开cmd执行编译命令javac，返回不是内部或外部命令，当我们切换到JDK的bin目录C:\Program Files\Java\jdk1.8.0_162\bin路径去执行javac命令的时候，就能够成功执行，好像配置了环境变量一样——<img src="/2020/10/15/Java/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E7%9C%9F%E7%9A%84%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E9%85%8D%E5%90%97%EF%BC%9F/1231169-20180318133207556-1396963808.png" alt="img"></p>
<p>　　既然可以执行javac，那么我们就在该目录下测试编译一个Java文件。先用记事本编写测试代码 public class Test { public static void main(String[] args) { System.out.println(“博客园 陈本布衣”); } } ，文件名必须和类名保持一致Test.java,然后我们执行编译命令并运行文件——</p>
<p><img src="/2020/10/15/Java/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E7%9C%9F%E7%9A%84%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E9%85%8D%E5%90%97%EF%BC%9F/1231169-20180318134335060-1793339583.png" alt="img"></p>
<p>　　可是正常情况下我的Java文件是不可能放在bin目录下的，所以我们接着配置好环境变量，使我们能够在任意目录编译Java文件——</p>
<p><img src="/2020/10/15/Java/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E7%9C%9F%E7%9A%84%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E9%85%8D%E5%90%97%EF%BC%9F/1231169-20180318135110770-2087106493.png" alt="img"></p>
<p><img src="/2020/10/15/Java/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E7%9C%9F%E7%9A%84%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E9%85%8D%E5%90%97%EF%BC%9F/1231169-20180318140334495-42043158.png" alt="img"></p>
<p>　　配置环境变量的目的似乎达到了，仅仅是为了不用切换到JDK的bin目录就能执行编译命令的方便，可是，现在都是用集成开发环境如idea或eclipse等开发并编译Java程序，如果不是使用命令行javac的方式来编译Java程序，那么，广大的程序员们，你在搭建开发环境的时候，配置环境变量到底是因为什么？</p>
<h2 id="配置环境变量-How"><a href="#配置环境变量-How" class="headerlink" title="配置环境变量:How?"></a>配置环境变量:How?</h2><p>　　欸，本来前文阐述了环境变量的原理后，这里计划该写如何配置了，但是布衣博主在不断尝试之后发现环境变量在Java的开发环境中根本不是必须的配置，所以，这里的How就只能戛然而止了，实在不想多叨叨如何配置那不必要的玩意儿了。当然，或许我前文的尝试和总结很有问题，因为配置了多年环境变量的博主自己一直都还在怀疑上文的尝试是否正确，也<strong>诚心希望各路大神指出阐述中的问题</strong>，共同来探讨环境变量配置的必要性和可用之处，以免误导他人；</p>
<p>作者：<a href="http://grenet.cnblogs.com/">陈本布衣</a></p>
<p>出处：<a href="http://www.cnblogs.com/chenbenbuyi">http://www.cnblogs.com/chenbenbuyi</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 使用注意事项</title>
    <url>/2019/11/07/Hexo/Hexo%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>最好是用命令行来新建文章，否则会报一些奇奇怪怪的错误<br>也就是说，每个文章的开头，都要把标题，时间 等等信息填充好。</p>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>每次 hexo d  之后，并不能立刻在网页中看到 ， 需要等个一两分钟才行。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Gitee</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-创建相册图库以及相册</title>
    <url>/2020/11/16/Hexo/Hexo-%E5%88%9B%E5%BB%BA%E7%9B%B8%E5%86%8C%E5%9B%BE%E5%BA%93%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%86%8C/</url>
    <content><![CDATA[<h1 id="Hexo-创建相册图库以及相册"><a href="#Hexo-创建相册图库以及相册" class="headerlink" title="Hexo-创建相册图库以及相册"></a>Hexo-创建相册图库以及相册</h1><p><img src="/2020/11/16/Hexo/Hexo-%E5%88%9B%E5%BB%BA%E7%9B%B8%E5%86%8C%E5%9B%BE%E5%BA%93%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%86%8C/1.png"></p>
<p>一个好的博客，需要音乐，图库和电影等播放的功能，这样才足够有趣！</p>
<ul>
<li>以下设置基于Buttfly主题</li>
</ul>
<h3 id="相册图库"><a href="#相册图库" class="headerlink" title="相册图库"></a>相册图库</h3><p><img src="/2020/11/16/Hexo/Hexo-%E5%88%9B%E5%BB%BA%E7%9B%B8%E5%86%8C%E5%9B%BE%E5%BA%93%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%86%8C/%E7%9B%B8%E5%86%8C%E5%9B%BE%E5%BA%93.png"></p>
<p>Gallery相册图库——一个图库集合。</p>
<p>图库页面只是普通的页面，只需要<code>hexo n page xxx</code> 创建我的页面就行</p>
<p>创建完之后，会在根目录/source 下创建以xxx为名的文件夹，里面有一个index.md文件，title为xxx</p>
<p>这个index.md 就是我的图库页面。 这个xxx文件夹就可以放这个页面用到的前端资源。 </p>
<h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>name：图库名字<br>description：图库描述<br>link：连接到对应相册的地址<br>img-url：图库封面的地址</p>
</blockquote>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup &#39;壁纸&#39; &#39;收藏的一些壁纸&#39; &#39;&#x2F;Gallery&#x2F;wallpaper&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;11&#x2F;10&#x2F;T7Mu8Aod3egmC4Q.png %&#125;</span><br><span class="line">&#123;% galleryGroup &#39;漫威&#39; &#39;关于漫威的图片&#39; &#39;&#x2F;Gallery&#x2F;marvel&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;8t97aVlp4hgyBGu.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup &#39;七七&#39; &#39;超可爱的妹子 Dubess的图集&#39; &#39;&#x2F;Gallery&#x2F;七七&#39;  </span><br><span class="line">Gallery&#x2F;123.jpg %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意图片索引的写法</strong></p>
<p>如果是外链，直接写网址；如果是内链，写图片的路径。  </p>
<p>这里路径需要提一下，Hexo的路径是基于_post 文件夹下的路径的，所以我放在那一层文件子目录，部署之后的url就是相应的路径。</p>
<p><img src="/2020/11/16/Hexo/Hexo-%E5%88%9B%E5%BB%BA%E7%9B%B8%E5%86%8C%E5%9B%BE%E5%BA%93%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%86%8C/%E8%B7%AF%E5%BE%84.jpg"></p>
<p>所以若想在index下调用到123.jpg， 需要写的路径为 Gallery/123.jpg</p>
<p>相册的地址是   /Gallery/七七   说明我把七七相册文件夹放在了Gallery文件夹中之中，七七文件夹有一个index.md 是七七相册页面的配置。 七七文件夹放相关的资源。 下文就不重复这个知识了。</p>
<h3 id="Gallery相册（图库的子页面）"><a href="#Gallery相册（图库的子页面）" class="headerlink" title="Gallery相册（图库的子页面）"></a>Gallery相册（图库的子页面）</h3><p><img src="/2020/11/16/Hexo/Hexo-%E5%88%9B%E5%BB%BA%E7%9B%B8%E5%86%8C%E5%9B%BE%E5%BA%93%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%86%8C/%E7%9B%B8%E5%86%8C.png" alt="相册"></p>
<p>Gallery相册会自动根据图片长度进行排版，书写方便，与markdown格式一样。可根据需要插入到相应的md。</p>
<p>子页面也是普通的页面，只需要<code>hexo n page xxxxx</code> 创建页面就行，然后将xxxxx文件夹放在合适的目录即可。</p>
<h4 id="写法-1"><a href="#写法-1" class="headerlink" title="写法:"></a>写法:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;ryLVePaqkYm4TEK.jpg)</span><br><span class="line">![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;gEy5Zc1Ai6VuO4N.jpg)</span><br><span class="line">![](234.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
<p>234.jpg 就放在xxxxx文件夹里面即可，可以调用的到。无需像博客那样另外建立文件夹。</p>
<h1 id="Hexo文件索引原理-URL规则"><a href="#Hexo文件索引原理-URL规则" class="headerlink" title="Hexo文件索引原理,URL规则"></a>Hexo文件索引原理,URL规则</h1><ol>
<li><p>Hexo的url路径是基于_post 文件夹下的路径的，所以我放在那一层文件子目录，部署之后的url就是相应的路径。</p>
<p><img src="/2020/11/16/Hexo/Hexo-%E5%88%9B%E5%BB%BA%E7%9B%B8%E5%86%8C%E5%9B%BE%E5%BA%93%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%86%8C/%E8%B7%AF%E5%BE%84.jpg"></p>
<p>所以若想在index下调用到123.jpg， 需要写的路径为 Gallery/123.jpg</p>
</li>
<li><p>相册的地址是   /Gallery/七七   说明我把七七相册文件夹放在了Gallery文件夹中之中，七七文件夹有一个index.md 是七七相册页面的配置。 七七文件夹放相关的资源。 比如15.jpg 就放在七七文件夹里面，直接在七七的index中<code>![](15.jpg)</code>可以调用的到。无需像博客那样另外建立文件夹。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客-搜索功能实现</title>
    <url>/2020/11/16/Hexo/Hexo%E5%8D%9A%E5%AE%A2-%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="实现Hexo博客的搜索功能"><a href="#实现Hexo博客的搜索功能" class="headerlink" title="实现Hexo博客的搜索功能"></a>实现Hexo博客的搜索功能</h1><p>随着我的博客越来越多，仅仅依靠标签和分类已经难以满足自己和他人快速查看博文的需求，所以今天实现了Hexo博客的搜索功能。</p>
<p>使用这个方法，可以无脑进行配置，最终的博客上方标题栏会自动出现 搜索按钮， 很是完美。</p>
<p><img src="/2020/11/16/Hexo/Hexo%E5%8D%9A%E5%AE%A2-%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/11111.png"></p>
<p>需要注意的一点是，只有在GitHub上部署的博客可以正常使用，在Gitee上部署的这种本地搜索功能会有Bug。</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在自己博客根目录下（如：D:\workspace\hexo），执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h2 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><p>修改根目录下Hexo的_config.yml，在最底部添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><p>修改主题的配置文件，搜索local_search，修改enable为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h2 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h2><p>开启本地server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>访问 ：<a href="http://localhost:4000/">http://localhost:4000</a> 即可看到想要的搜索功能</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安装并配置admin插件</title>
    <url>/2019/11/13/Hexo/Hexo%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEadmin%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="【hexo】安装并配置admin插件"><a href="#【hexo】安装并配置admin插件" class="headerlink" title="【hexo】安装并配置admin插件"></a>【hexo】安装并配置admin插件</h1><h3 id="1-编写目的"><a href="#1-编写目的" class="headerlink" title="1. 编写目的"></a>1. 编写目的</h3><p>使用hexo-admin插件，方便后台登录管理hexo博客，编写文章。</p>
<h3 id="2-新建项目"><a href="#2-新建项目" class="headerlink" title="2. 新建项目"></a>2. 新建项目</h3><p>为了方便，我们直接使用之前一篇文章介绍新建的项目，当然也可以自己新建一个新的项目，这个并不碍事。</p>
<h3 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3. 安装插件"></a>3. 安装插件</h3><ul>
<li>插件地址：<a href="https://github.com/jaredly/hexo-admin">https://github.com/jaredly/hexo-admin</a></li>
<li>安装步骤与github介绍一样，但是对我们而言只有一步。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> npm install --save hexo-admin</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="4-启动项目"><a href="#4-启动项目" class="headerlink" title="4. 启动项目"></a>4. 启动项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> hexo s</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>浏览器访问localhost:4000/admin。<br> 效果如下：<br> <img src="/2019/11/13/Hexo/Hexo%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEadmin%E6%8F%92%E4%BB%B6/1" alt="在这里插入图片描述"></p>
<h3 id="5-配置admin"><a href="#5-配置admin" class="headerlink" title="5. 配置admin"></a>5. 配置admin</h3><p>为了安全，不能让所有人访问这个地址都能够有admin的权限，我们需要添加用户名与密码，在localhost:4000/admin/网站中点击右上角的settings，然后点击下面的 Setup authentification here 。<br> <img src="/2019/11/13/Hexo/Hexo%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEadmin%E6%8F%92%E4%BB%B6/2" alt="在这里插入图片描述"><br> 效果如图所示：<br> <img src="/2019/11/13/Hexo/Hexo%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEadmin%E6%8F%92%E4%BB%B6/3" alt="在这里插入图片描述"><br> 填写好用户名与密码，还有secret。<br> <img src="/2019/11/13/Hexo/Hexo%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEadmin%E6%8F%92%E4%BB%B6/4" alt="在这里插入图片描述"><br> 然后我们可以看到后面加密后的信息，我们需要复制粘贴到配置文件中去。<br> 如图所示：<br> <img src="/2019/11/13/Hexo/Hexo%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEadmin%E6%8F%92%E4%BB%B6/5" alt="在这里插入图片描述"><br> 把这些信息全部都复制粘贴到项目的核心配置文件test/_config.yml中，粘贴到最后面即可。<br> 如图：<br> <img src="/2019/11/13/Hexo/Hexo%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEadmin%E6%8F%92%E4%BB%B6/6" alt="在这里插入图片描述"><br> 保存后重新运行hexo，查看localhost:4000/admin，即可看到效果。<br> <img src="/2019/11/13/Hexo/Hexo%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEadmin%E6%8F%92%E4%BB%B6/7" alt="在这里插入图片描述"><br> 即跳转到登录界面，需要登录才能拥有admin权限，用户名和密码即我们设定好的，那个看起来像是乱码的密码是加密后的密码。</p>
<h3 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h3>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-admin插件windows系统插入图片失败问题解决</title>
    <url>/2019/11/13/Hexo/hexo-admin%E6%8F%92%E4%BB%B6windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="hexo-admin插件windows系统插入图片失败问题解决，hexo-admin汉化，通过修改源码完美解决，以及插件的一点点优化"><a href="#hexo-admin插件windows系统插入图片失败问题解决，hexo-admin汉化，通过修改源码完美解决，以及插件的一点点优化" class="headerlink" title="hexo-admin插件windows系统插入图片失败问题解决，hexo-admin汉化，通过修改源码完美解决，以及插件的一点点优化"></a>hexo-admin插件windows系统插入图片失败问题解决，hexo-admin汉化，通过修改源码完美解决，以及插件的一点点优化</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本人win10系统，在使用插件时插入图片遇到了图片插入裂图的问题，在网上找了一下教程都无法解决，只有说手动改路径，但是我觉得手动改太麻烦，于是开始翻源码，被我找到了问题所在，顺便根据个人喜好做了一点点修改。文章可能还有很多不足，请大家谅解，欢迎大佬提意见。</p>
<p>附带插件GitHub地址：<a href="https://github.com/jaredly/hexo-admin">hexo-admin</a></p>
<p>文章可能有点长，这代表着我写的详细，时间并没有多少内容，每一步我都写的很详细，简单易懂。</p>
<h2 id="本文使用到的东西"><a href="#本文使用到的东西" class="headerlink" title="本文使用到的东西"></a>本文使用到的东西</h2><ol>
<li>win10电脑</li>
<li>hexo 3.1.0</li>
<li>hexo-admin 2.3.0</li>
</ol>
<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h2><p>在使用hexo插入图片的时候，我发现插入的 图片显示错误，而且链接有问题，不应该是“’！[upload successful] (\images\pasted-1.png)’”<br> 应该是“’！[upload successful] (/images/pasted-1.png)’”<br> <img src="/2019/11/13/Hexo/hexo-admin%E6%8F%92%E4%BB%B6windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2.问题分析"></a>2.问题分析</h2><p>既然图片链接格式有错，我就手动改了一下链接，发现图片成功显示了，发布之后都可以正常使用。但是不能每次都怎么自己改代码，太麻烦了。后来我赵找到了问题所在。</p>
<h2 id="3-问题解决第一步"><a href="#3-问题解决第一步" class="headerlink" title="3.问题解决第一步"></a>3.问题解决第一步</h2><p>1.打开我们博客的目录的“<code>node_modules</code>”子目录，找到“<code>hexo-admin</code>”快捷方式。<br> <img src="/2019/11/13/Hexo/hexo-admin%E6%8F%92%E4%BB%B6windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/20191204123835452.png" alt="在这里插入图片描述"><br> 2.双击进入该文件夹，打开“<code>api.js</code>”文件，通过搜索“<code>imagePath</code>”字符找到下图的代码片段，红框内就是我们要改的代码。<br> <img src="/2019/11/13/Hexo/hexo-admin%E6%8F%92%E4%BB%B6windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/2" alt="在这里插入图片描述"><br> 3.将代码修改为</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">filename = imagePath+<span class="string">&quot;/&quot;</span>+ filename	<span class="comment">//修改点</span></span><br><span class="line"><span class="keyword">var</span> outpath = path.<span class="built_in">join</span>(hexo.source_dir, filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataURI = req.body.data.slice(&#x27;data:image/png;base64,&#x27;.length)</span><br><span class="line"><span class="keyword">var</span> buf = new <span class="type">Buffer</span>(dataURI, &#x27;base64&#x27;)</span><br><span class="line">hexo.log.d(`saving image to $&#123;outpath&#125;`)</span><br><span class="line">fs.writeFile(outpath, buf, function (err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">  hexo.source.process().then(function () &#123;</span><br><span class="line">    res.done(&#123;</span><br><span class="line">      src: filename,	<span class="comment">//修改点</span></span><br><span class="line">      msg: msg</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-问题解决第二步"><a href="#4-问题解决第二步" class="headerlink" title="4.问题解决第二步"></a>4.问题解决第二步</h2><p>修改代码之后，我们可以看到，生成的已经是正确的图片路径了，但是图片还是加载失败了，我发现是因为图片刚上传上前去，hexo还没来得及让图片链接生效，重新刷新一下界面就可以显示了。</p>
<p>但是不能让我们插入一张图片就刷新一次，我们可以让图片上传后暂停一分钟再显示，所以要修改第二处代码。</p>
<p>1.打开hexo-admin目录下的子目录，找到“bundle.js文件”，并打开它。<br> <img src="/2019/11/13/Hexo/hexo-admin%E6%8F%92%E4%BB%B6windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/3" alt="在这里插入图片描述"><br> 2.搜索“‘upload’”找到以下代码</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">uploadImage: function(data, filename)  &#123;<span class="keyword">return</span> post(&#x27;/images/upload&#x27;, &#123;data: data, filename: filename&#125;);&#125;,</span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">   uploadImage: function(data, filename)  &#123;</span><br><span class="line">	<span class="keyword">var</span> imgJson=post(&#x27;/images/upload&#x27;, &#123;data: data, filename: filename&#125;);</span><br><span class="line">	<span class="keyword">var</span> start = (new <span class="type">Date</span>()).getTime();</span><br><span class="line">	<span class="keyword">while</span>((new <span class="type">Date</span>()).getTime() - start &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> imgJson;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>到这里，图片无法显示的问题完美解决。</p>
<h2 id="5-插件修复-优化（附补丁下载地址）"><a href="#5-插件修复-优化（附补丁下载地址）" class="headerlink" title="5.插件修复+优化（附补丁下载地址）"></a>5.插件修复+优化（附补丁下载地址）</h2><h3 id="5-1优化1：修复了插图失败"><a href="#5-1优化1：修复了插图失败" class="headerlink" title="5.1优化1：修复了插图失败"></a>5.1优化1：修复了插图失败</h3><p>就是如上1-4步骤、修改源码，修复了插图失败bug。</p>
<h3 id="5-2优化2：汉化"><a href="#5-2优化2：汉化" class="headerlink" title="5.2优化2：汉化"></a>5.2优化2：汉化</h3><p>虽然hexo-admin使用起来非常简单，但是作为一个英语学渣，看着英文界面就是不舒服，所以汉化了该插件，爽。<br> <img src="/2019/11/13/Hexo/hexo-admin%E6%8F%92%E4%BB%B6windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/4" alt="在这里插入图片描述"><img src="/2019/11/13/Hexo/hexo-admin%E6%8F%92%E4%BB%B6windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/5" alt="在这里插入图片描述"></p>
<h3 id="5-3优化3：添加按文章存储图片功能（方便管理）"><a href="#5-3优化3：添加按文章存储图片功能（方便管理）" class="headerlink" title="5.3优化3：添加按文章存储图片功能（方便管理）"></a>5.3优化3：添加按文章存储图片功能（方便管理）</h3><p>原本系统默认将图片统一存储在“<code>images</code>”目录下，文章一多，图片数量疯涨，就不容易维护，所以我添加了按文章存储图片的功能，图片将存储在与文章同目录的同名文件夹下。<br> <img src="/2019/11/13/Hexo/hexo-admin%E6%8F%92%E4%BB%B6windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/6" alt="在这里插入图片描述"><br> 只需要在设置界面，勾选“图片存储在资源目录下”选项即可，取消勾选则将图片存放在hexo-admin定义的存储目录下。<img src="/2019/11/13/Hexo/hexo-admin%E6%8F%92%E4%BB%B6windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/7" alt="在这里插入图片描述"></p>
<h3 id="5-4优化4：修复了编辑界面预览链接错误bug"><a href="#5-4优化4：修复了编辑界面预览链接错误bug" class="headerlink" title="5.4优化4：修复了编辑界面预览链接错误bug"></a>5.4优化4：修复了编辑界面预览链接错误bug</h3><p>原本“分页”的编辑界面的预览链接是错误的，跳转的页面不正确，这里也修复了一下。<br> <img src="/2019/11/13/Hexo/hexo-admin%E6%8F%92%E4%BB%B6windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/8" alt="在这里插入图片描述"></p>
<h3 id="5-5优化5：修复了新建分页失败bug"><a href="#5-5优化5：修复了新建分页失败bug" class="headerlink" title="5.5优化5：修复了新建分页失败bug"></a>5.5优化5：修复了新建分页失败bug</h3><p>最初新建分页无法点击确定时会提示如下错误，并且界面没有反应。但是刷新之后可以看到分页是新建成功的，就是有点麻烦，要刷新。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Unhandled</span> rejection <span class="type">TypeError</span>: <span class="type">Cannot</span> read property &#x27;source&#x27; of undefined</span><br><span class="line">    at addIsDraft (<span class="type">G</span>:\blog\node_modules\_hexo-admin@<span class="number">2.3</span>.<span class="number">0</span>@hexo-admin\api.js:<span class="number">14</span>:<span class="number">25</span>)</span><br><span class="line">    at <span class="type">G</span>:\blog\node_modules\_hexo-admin@<span class="number">2.3</span>.<span class="number">0</span>@hexo-admin\api.js:<span class="number">218</span>:<span class="number">18</span></span><br><span class="line">    at tryCatcher (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromiseFromHandler (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">547</span>:<span class="number">31</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromise (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">604</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromise0 (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">649</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromises (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">729</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="type">Promise</span>._fulfill (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">673</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="type">Promise</span>._resolveCallback (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">466</span>:<span class="number">57</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromiseFromHandler (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">559</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromise (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">604</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromise0 (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">649</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromises (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">725</span>:<span class="number">18</span>)</span><br><span class="line">    at _drainQueueStep (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\async.js:<span class="number">93</span>:<span class="number">12</span>)</span><br><span class="line">    at _drainQueue (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\async.js:<span class="number">86</span>:<span class="number">9</span>)</span><br><span class="line">    at <span class="type">Async</span>._drainQueues (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\async.js:<span class="number">102</span>:<span class="number">5</span>)</span><br><span class="line">    at <span class="type">Immediate</span>.<span class="type">Async</span>.drainQueues [<span class="keyword">as</span> _onImmediate] (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\async.js:<span class="number">15</span>:<span class="number">14</span>)</span><br><span class="line">    at processImmediate (<span class="keyword">internal</span>/timers.js:<span class="number">439</span>:<span class="number">21</span>)</span><br><span class="line"><span class="number">12345678910111213141516171819</span></span><br></pre></td></tr></table></figure>

<p>修复之后该功能可以正常使用，但是还是会提示另一个错误，我弄了好久，没办法解决，等待懂的大佬教教我。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Unhandled</span> rejection <span class="type">WarehouseError</span>: <span class="type">ID</span> `source/<span class="number">444444</span>/index.md` has been used</span><br><span class="line">    at new <span class="type">WarehouseError</span> (<span class="type">G</span>:\blog\node_modules\warehouse\lib\error.js:<span class="number">14</span>:<span class="number">11</span>)</span><br><span class="line">    at _Model._insertOne (<span class="type">G</span>:\blog\node_modules\warehouse\lib\model.js:<span class="number">153</span>:<span class="number">29</span>)</span><br><span class="line">    at <span class="type">G</span>:\blog\node_modules\warehouse\lib\model.js:<span class="number">179</span>:<span class="number">63</span></span><br><span class="line">    at tryCatcher (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at <span class="type">G</span>:\blog\node_modules\bluebird\js\release\using.js:<span class="number">185</span>:<span class="number">26</span></span><br><span class="line">    at tryCatcher (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromiseFromHandler (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">547</span>:<span class="number">31</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromise (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">604</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromise0 (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">649</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromises (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">729</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="type">Promise</span>._fulfill (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">673</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="type">PromiseArray</span>._resolve (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise_array.js:<span class="number">127</span>:<span class="number">19</span>)</span><br><span class="line">    at <span class="type">PromiseArray</span>._promiseFulfilled (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise_array.js:<span class="number">145</span>:<span class="number">14</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromise (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">609</span>:<span class="number">26</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromise0 (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">649</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="type">Promise</span>._settlePromises (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\promise.js:<span class="number">729</span>:<span class="number">18</span>)</span><br><span class="line">    at _drainQueueStep (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\async.js:<span class="number">93</span>:<span class="number">12</span>)</span><br><span class="line">    at _drainQueue (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\async.js:<span class="number">86</span>:<span class="number">9</span>)</span><br><span class="line">    at <span class="type">Async</span>._drainQueues (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\async.js:<span class="number">102</span>:<span class="number">5</span>)</span><br><span class="line">    at <span class="type">Immediate</span>.<span class="type">Async</span>.drainQueues [<span class="keyword">as</span> _onImmediate] (<span class="type">G</span>:\blog\node_modules\bluebird\js\release\async.js:<span class="number">15</span>:<span class="number">14</span>)</span><br><span class="line">    at processImmediate (<span class="keyword">internal</span>/timers.js:<span class="number">439</span>:<span class="number">21</span>)</span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure>

<h3 id="5-6补丁下载地址"><a href="#5-6补丁下载地址" class="headerlink" title="5.6补丁下载地址"></a>5.6补丁下载地址</h3><p><strong>使用方法</strong><br> 打开博客目录下的“<code>\node_modules\hexo-admin</code>”目录，全选复制所有补丁覆盖原文件即可。</p>
<p><strong>注意</strong><br> 我使用的是<code>hexo-admin 2.3.0</code>版本，其他版本补丁覆盖之后可能会有问题，可能会有问题，没有测试。</p>
<p>如果使用的和我不是同一个版本，建议先卸载插件，然后再重新添加和我同个版本的hexo-admin，这样就不会有问题。</p>
<p>卸载hexo-admin：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-admin –save</span><br></pre></td></tr></table></figure>

<p>重新安装2.3.0版本</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">npm install hexo-admin@<span class="number">2.3</span>.<span class="number">0</span> –save</span><br></pre></td></tr></table></figure>

<p>然后覆盖插件。</p>
<p><strong>下载链接</strong>：链接：<a href="https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw">https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw</a><br> 提取码：t3r0</p>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>弄这个插件耗费我一整天时间，做了一些些优化，目前本人用着还好，没有发现什么问题。有不清楚的地方欢迎评论留言，看到的我都会回复的。本文到此结束，有什么不足的地方请大家不吝指正。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo页面的属性设置</title>
    <url>/2020/07/27/Hexo/Hexo%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="hexo创建各种页面问题"><a href="#hexo创建各种页面问题" class="headerlink" title="hexo创建各种页面问题"></a>hexo创建各种页面问题</h1><p>1，创建一般的文章：hexo new “文章名称”<br> 2，创建”关于我”等页面：hexo new page “about”这里的about要和在主题的_config.yml文件中的menu中进行匹配<br> 如：menu:<br> Home: /<br> Archives: /archives<br> About: /about<br> 那创建关于我的页面：hexo new page “about” 在编辑创建出来的md文件，然后部署就能看到<br> 3，创建友情链接：在主题的配置中：<br> links_title: 友情链接<br> links:<br> CSDN: <a href="https://link.jianshu.com/?t=http://blog.csdn.net/u012900536">http://blog.csdn.net/u012900536</a><br> 4，打赏链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打赏</span><br><span class="line"># reward_comment: 您的支持将鼓励我继续创作！</span><br><span class="line"># wechatpay: &#x2F;images&#x2F;wechat-reward-image.JPG</span><br></pre></td></tr></table></figure>

<p>5，设置网站信息：<br> title: 标题<br> subtitle: 副标题<br> description: 描述<br> author: 作者<br> avatar: /images/图标<br> language: zh-Hans（中文）</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hexo中对_posts下的md分类</title>
    <url>/2019/11/08/Hexo/%E5%9C%A8Hexo%E4%B8%AD%E5%AF%B9_posts%E4%B8%8B%E7%9A%84md%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="如何在Hexo中对文章md文件分类？"><a href="#如何在Hexo中对文章md文件分类？" class="headerlink" title="如何在Hexo中对文章md文件分类？"></a>如何在Hexo中对文章md文件分类？</h1><p>Hexo是一个快速、简洁且高效的博客框架，常用在Github Page上部署个人博客。</p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在默认配置下，我们使用<code>hexo new post [title]</code>会在<code>source/_post/</code>目录下生成对应的markdown文件，而使用<code>hexo g</code>生成的html文件路径是<code>:year/:month/:day/:title.html</code>。当我们写的博客越来越多的时候，会发现，所有文章都是在<code>source/_post/</code>下，查找起来会不大方便，而希望对它进行一个分类，但是在生成的文章链接上保持不变。</p>
<p>生成的文章名字及其对应永久链接，可以在<code>_config.yml</code>中配置，分别是<code>new_post_name: :title.md # File name of new posts</code>和<code>permalink: :year/:month/:day/:title/</code>这两项。我们把<code>new_post_name</code>的值改为<code>:year/:title.md</code>，让每次运行<code>hexo new post [title]</code>时新建的文件按年份存放，但是却发现生成的html文件的链接也变了，比如<code>source/_post/2018/test.md</code>对应的博客地址，原本应该是<code>2018/12/22/test/</code>，现在却变成了<code>2018/12/22/2018/test/</code>。也就是，配置中的<code>permalink</code>值里的<code>:title</code>，实际取的不是<strong>文件名称</strong>，而是相对于<code>source/_post</code>的<strong>相对路径</strong>（不含后缀）。<br> 这可能是个Bug，因为在<code>permalink</code>和<code>new_post_name</code>中，用的是同一个变量<code>:title</code>，但是它们的值却是不同的。</p>
<h2 id="按照文件的类型手动分类。"><a href="#按照文件的类型手动分类。" class="headerlink" title="按照文件的类型手动分类。"></a>按照文件的类型手动分类。</h2><p>不是给文章内容内加标签的方式，我希望是可以在source源目录中就对各个文章的分类分别放到不同文件夹</p>
<p>其实md文件存储位置，和最终展现成html是没有关系的，想放到post的哪个目录下面，就可以放到哪个目录下面</p>
<p>可以手动进行文档分类，就是将md文件放到_post文件夹下不同的categories文件夹下，hexo g的时候，还是能够生成的。但是如果使用hexo new命令来创建的话，还是没有找到自动放到对应categories文件夹的方法。</p>
<h2 id="按照年月日进行分类"><a href="#按照年月日进行分类" class="headerlink" title="按照年月日进行分类"></a>按照年月日进行分类</h2><p>如果我们是按年月日归档，而链接保持不变，大可配置为如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:title</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>但是这样的分类太细了，别说一天写不了几篇，一个月我也不会写太多。我只想生成的文章按年份分文件夹，其他保持不变。所以在<code>_config.yml</code>中是要修改配置为如下的：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:title</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>而文章的链接，一番搜索之后，发现可以在我们文章的markdown文件的<code>Front-matter</code>中添加<code>permalink</code>参数，来指定文章的链接（见 <a href="https://hexo.io/docs/permalinks.html#comment-2657776966">https://hexo.io/docs/permalinks.html#comment-2657776966</a> ）。如果我们在<code>_config.yml</code>中的<code>permalink</code>配置为如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>那最终生成的文章的链接就是<code>:year/:month/:day/:文章中的permalink/</code>。这完全就是我想要的！</p>
<h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><p>接下来，修改文章模版，增加 <code>permalink</code>一项就好了。文章的模版在<code>scaffolds/post.md</code>，内容修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">permalink: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>

<p>而我们使用<code>hexo new post [title]</code>创建文章的时候，应注意把标题里的空格换为<code>-</code>。</p>
<h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><p>现在新建文章的路径我们是已经处理好了，那以前创建的文章是不是要一个个手动分类并打开添加<code>permalink</code>参数呢？<br> 当然不用那么麻烦。作为终端控，这种事使用命令行来完成最好了。思路为：</p>
<ol>
<li>找出2018年的文章</li>
<li>移动到<code>2018</code>文件夹下</li>
<li>使用<code>sed</code>命令批量修改文件内容</li>
<li>找出2017年的文章，按1-3步的方式处理……</li>
</ol>
<p>需要注意的是，mac下的<code>sed</code>命令在替换文件上与ubuntu上有所不同。比如我想在<code>title:</code>开头的这一行下面添加内容，ubuntu下的命令为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &quot;/title:.* /a\\xxx&quot; $file</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>在mac下，需要换行，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &quot;&quot; &quot;/title.*/ a\ </span><br><span class="line">xxx</span><br><span class="line">&quot; $file</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>上面的<code>a\</code>，反斜杠后要加一个空格，最后的双引号也是要换一行的。<br> 另外要注意的是，<code>sed</code>会修改文章的创建时间，所以我们需要先分类，再修改。以整理2018年的文章为例，完整命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入_post目录</span></span><br><span class="line">cd source/_post</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个2018年1月1日的文件，用于过滤出2018年的文章</span></span><br><span class="line">touch -t 201801010000 timestamp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建2018文件夹</span></span><br><span class="line">mkdir 2018</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将2018年的文章移到2018文件夹下</span></span><br><span class="line">for file in `find . -type f -newer timestamp`; do mv $file 2018 ; done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除刚才创建的用于过滤的文件</span></span><br><span class="line">rm timestamp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入2018文件夹</span></span><br><span class="line">cd 2018</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文章内容，添加permalink</span></span><br><span class="line">for file in `ls`; do link=`echo $file|sed -n &#x27;s/\.md//p&#x27;`; sed -i &quot;&quot; &quot;/title.*/ a\ </span><br><span class="line">permalink: $link</span><br><span class="line">&quot; $file; done;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 回到_post</span></span><br><span class="line">cd ..</span><br><span class="line">123456789101112131415161718</span><br></pre></td></tr></table></figure>

<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>上面提到，<code>sed</code>和<code>mv</code>会导致文件的创建时间改变，所以需要先分类再修改。尽管这样，当看到所有文件的创建时间都变成一样了之后，对于有强迫症的我还是觉得看着别扭。好在发现，<code>touch</code>命令也可以用于修改文件的创建时间。所以前面的操作可以优化一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入_post目录</span></span><br><span class="line">cd source/_post</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文章内容，添加permalink</span></span><br><span class="line">for file in `ls`; do link=`echo $file|sed -n &#x27;s/\.md//p&#x27;`; sed -i &quot;&quot; &quot;/title.*/ a\ </span><br><span class="line">permalink: $link</span><br><span class="line">&quot; $file; done;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文章的创建时间为Front-matter中的时间</span></span><br><span class="line">for file in `find . -type f`; do d=`head $file|sed -n &#x27;s/^date: //p&#x27; |sed -n &#x27;s/[- :]//pg&#x27; |sed -n &#x27;s/\([0-9]\&#123;2\&#125;\)$/\.\1/p&#x27;`; echo $d ; done;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个2018年1月1日的文件，用于过滤出2018年的文章</span></span><br><span class="line">touch -t 201801010000 timestamp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建2018文件夹</span></span><br><span class="line">mkdir 2018</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将2018年的文章移到2018文件夹下</span></span><br><span class="line">for file in `find . -type f -newer timestamp`; do mv $file 2018 ; done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将timestamp创建时间修改为2017年1月1日，然后参考2018年文章归类方法，这里略</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 完成归类之后删除刚才创建的用于过滤的文件</span></span><br><span class="line">rm timestamp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后如果想再恢复文章的创建时间，再执行第三步命令</span></span><br><span class="line">for file in `find . -type f`; do d=`head $file|sed -n &#x27;s/^date: //p&#x27; |sed -n &#x27;s/[- :]//pg&#x27; |sed -n &#x27;s/\([0-9]\&#123;2\&#125;\)$/\.\1/p&#x27;`; echo $d ; done;</span><br><span class="line">12345678910111213141516171819202122232425</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>推送Hexo博客到码云（Gitee）</title>
    <url>/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/</url>
    <content><![CDATA[<h1 id="使用Hexo搭建个人博客并部署到Gitee码云"><a href="#使用Hexo搭建个人博客并部署到Gitee码云" class="headerlink" title="使用Hexo搭建个人博客并部署到Gitee码云"></a>使用Hexo搭建个人博客并部署到Gitee码云</h1><h2 id="1-提前准备"><a href="#1-提前准备" class="headerlink" title="1.提前准备"></a>1.提前准备</h2><ol>
<li>下载Git, 地址: <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ol>
<p><img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/1" alt="在这里插入图片描述"><br> 测试是否安装成功:<br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/2" alt="在这里插入图片描述"></p>
<ol>
<li>下载Nodejs, 地址: <a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/3" alt="在这里插入图片描述"><br> 测试是否安装成功:<br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/4" alt="在这里插入图片描述"></li>
</ol>
<h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h2><p>在命令行输入:<br> <code>npm install -g hexo-cli</code></p>
<p>之后新建文件夹:<br> 进入文件夹, 右键打开Git bash, 或者直接在命令行中进入该文件夹目录<br> 演示使用命令行进入文件目录:<br> 新建的文件夹为 hexoblog<br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/5" alt="在这里插入图片描述"></p>
<p>之后输入一下命令:<br> <code>hexo init</code><br> 稍等一会儿<br> 之后输入<br> <code>npm install</code></p>
<p>开启博客: <code>hexo s</code><br> 之后开启博客<br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/20200807214507294.png" alt="在这里插入图片描述"><br> 访问 <a href="http://localhost:4000/">http://localhost:4000/</a>, 之后Ctrl+C 终止</p>
<h2 id="3-创建新的博客文章"><a href="#3-创建新的博客文章" class="headerlink" title="3.创建新的博客文章"></a>3.创建新的博客文章</h2><p>3.1 在博客目录下, 输入一下命令:<br> <code>hexo n &quot;我的第一篇博客&quot;</code></p>
<p>之后会自动创建一篇名为”我的第一篇博客”的博客, 位置在 博客目录\source_posts 目录下</p>
<p>3.2 使用用MarkDown编辑器进行编辑</p>
<p>3.3 编辑结束</p>
<p><code>hexo clean</code> 进行清理</p>
<p><code>hexo g</code> 进行生成</p>
<p>重新启动 <code>hexo s</code></p>
<h2 id="4-将自己的博客部署到Gitee上"><a href="#4-将自己的博客部署到Gitee上" class="headerlink" title="4. 将自己的博客部署到Gitee上"></a>4. 将自己的博客部署到Gitee上</h2><p>4.1 下载插件 <code>npm install --save hexo-deployer-git</code></p>
<p>4.2 在Gitee上创建新的仓库(注意: <strong>仓库名称</strong>应该和<strong>用户名</strong>相同)</p>
<ol>
<li><p>个人首页, 用户名:<br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/20200808163314896.png" alt="在这里插入图片描述"></p>
</li>
<li><p>创建仓库:<br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/6" alt="在这里插入图片描述"><br> 说明: 即使仓库名称和用户名不同, 路径一定要相同</p>
</li>
<li><p>开启静态博客(网页)支持</p>
<p>到仓库首页-&gt; 服务-&gt; Gitee Pages<br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/7" alt="在这里插入图片描述"><br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/8" alt="在这里插入图片描述"></p>
</li>
</ol>
<p>4,3 修改 <strong>_config.yml</strong> 文件内容, 最下方的<strong>deploy</strong>(建议使用 Visiual Studio Code进行修改)<br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/9" alt="在这里插入图片描述"></p>
<p>4.4 重新进行编译并提交到仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>之后访问生成的静态网页地址: <a href="https://huihuangshijian.gitee.io/">https://huihuangshijian.gitee.io/</a>, 即可查看自己的个人博客</p>
<p>存在的问题: 我的每次进行 <code>hexo d</code> 提交到仓库后, 需要更新一下静态网站地址, 访问的时候才能够显示提交的内容<br> <img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/10" alt="在这里插入图片描述"></p>
<p><strong>Gitee 不能自动部署</strong></p>
<p>Github 自动部署，但是慢。Gitee 多个 pages，很快，但是不能自动部署，得加钱。<br><img src="/2019/11/08/Hexo/%E6%8E%A8%E9%80%81Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E7%A0%81%E4%BA%91%EF%BC%88Gitee%EF%BC%89/11" alt="img"><br>所以 最好是在面试之前将自己的最新版博客部署到Gitee上去。日常使用部署到GitHub上即可。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Gitee</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 hexo-admin 後台管理工具</title>
    <url>/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="教學-使用-hexo-admin-後台管理工具"><a href="#教學-使用-hexo-admin-後台管理工具" class="headerlink" title="[教學] 使用 hexo-admin 後台管理工具"></a>[教學] 使用 hexo-admin 後台管理工具</h1><p>繼 前篇文章，部落格架設完成後，就可以開始撰寫我們第一篇文章了。不過有以下幾點必須先瞭解：</p>
<ol>
<li>之前提到 GitHub Pages 只能存放靜態網站，而 Hexo 只能在<strong>「本地端」更改部落格樣式、寫文章等，最後再 push 到 GitHub Pages</strong>；因此無法在戶外，也就是「遠端」登入後台，然後寫文章或修改 Blog 樣式等。</li>
<li>部落格上傳到 GitHub 後，程式碼就是存放在公開的倉庫(repository)，如下圖。但這個 repository 就像是一隻程式的「執行檔」，一般人即使翻出這個 repository 也無法用它來寫文章改樣式等，只能透過「原始檔」。而「原始檔」就是在本地端的那個資料夾，所以這個資料夾非常的重要，一定要保存好；如果不見，無法從 GitHub 還原回來。</li>
</ol>
<p>▼ Push 到 GitHub 的 repository 目錄，相當於「執行檔」；若要寫文章，還是得透過電腦中 Hexo 資料夾。<br><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/07/261848/original/b0c07be9efd79c87297be4fb3b555ab9.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/b0c07be9efd79c87297be4fb3b555ab9.png" alt="img"></a></p>
<h1 id="步驟一、安裝-管理文章的後台插件"><a href="#步驟一、安裝-管理文章的後台插件" class="headerlink" title="步驟一、安裝 管理文章的後台插件"></a>步驟一、安裝 管理文章的後台插件</h1><p>雖然我們能在「本地端」先查看該部落格的樣子，但還無法進入後台來編輯管理文章，需先安裝 hexo-admin 的套件(該指令只須執行一次)。請先在 Hexo 資料夾根目錄打開命令提示字元(cmd)，輸入以下指令來安裝：</p>
<p>PS. 由於插件作者已經一年以上沒有更新，可能會看到如圖的一些警告與錯誤；之後的步驟雖然會遇到問題，但尚不至於影響使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-admin --save  &#x2F;&#x2F;安裝 hexo-admin 文章管理的後台插件</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/08/261850/original/6b7d80e82200487e3f0669b7166067da.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/6b7d80e82200487e3f0669b7166067da.png" alt="img"></a></p>
<h1 id="步驟二、進入-hexo-admin-後台"><a href="#步驟二、進入-hexo-admin-後台" class="headerlink" title="步驟二、進入 hexo-admin 後台"></a>步驟二、進入 hexo-admin 後台</h1><p>Hexo 部落格可以在 push 到 GitHub 之前，先透過以下指令在「本地端」查看該部落格的樣子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s  &#x2F;&#x2F;架設本地端伺服器，也可以輸入 hexo server</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/08/261851/original/a69c7f47cde6298be2347a044bee9a50.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/a69c7f47cde6298be2347a044bee9a50.png" alt="img"></a></p>
<p>架設好本地伺服器後，在瀏覽器輸入 <a href="http://localhost:4000/">http://localhost:4000</a> 就能看到該部落格，要注意這個部落格<strong>尚未 push 到網路上</strong>，都還可以做修改。</p>
<p>本地伺服器運作的時候，不管是在後台編輯文章，還是正在修改部落樣式，只要直接按下 F5 重新整理頁面，基本上是會<strong>即時顯示新的樣式/修改後的文章</strong> (除非更改樣式後有語法錯誤)。</p>
<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/08/261852/original/9eaf6d7b278a0c85a5ab218f509929ba.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/9eaf6d7b278a0c85a5ab218f509929ba.png" alt="img"></a></p>
<p>在網址尾端加入 <strong>/admin</strong> (例如 <a href="http://localhost:4000/admin">http://localhost:4000/admin</a> )就能進入後台，這裡能看到所有文章及其內容。 </p>
<p><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/08/261853/original/fbd766076f790f5a490f2e50e3e050da.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/fbd766076f790f5a490f2e50e3e050da.png" alt="img"></a></p>
<h1 id="步驟三、新增文章並-publish-該文章"><a href="#步驟三、新增文章並-publish-該文章" class="headerlink" title="步驟三、新增文章並 publish 該文章"></a>步驟三、新增文章並 publish 該文章</h1><p>進入後台後，按一下左上角的”New Post”。</p>
<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/08/261946/original/ed21daa8e2c6946b1e03a953e1c8fe98.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/ed21daa8e2c6946b1e03a953e1c8fe98.png" alt="img"></a></p>
<p>接著要先輸入該文章的<strong>「連結網址名稱」</strong>，然後按下 Enter。</p>
<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/08/261947/original/050a1053206b8a37c6a24c4bbfa3fd6a.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/050a1053206b8a37c6a24c4bbfa3fd6a.png" alt="img"></a></p>
<p>照理來說按下 Enter後，要直接進入編輯頁面。不過如果像筆者一樣，按下 Enter 後沒有反應者，且 cmd 視窗會出現如圖的錯誤訊息；這邊不用擔心，<strong>直接在瀏覽器按下 F5 重新整理，剛新增的文章就會出現在文章列表中了</strong>，接著點一下鉛筆符號來編輯文章。</p>
<p><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/08/261949/original/7f072a11126a8f96a11b97859ed737e7.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/7f072a11126a8f96a11b97859ed737e7.png" alt="img"></a></p>
<p>進去頁面後，再把標題列修改為<strong>「文章標題名稱」</strong>；而左方就是用 Markdown 語法來寫文章，右方會即時預覽文章(注意這裡編輯文章都是<strong>即時儲存</strong>內容的)，最後按下右上角的 Publish 來發布文章。</p>
<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/08/261948/original/79e9f01c27fb7a2637114f60895ce0be.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/79e9f01c27fb7a2637114f60895ce0be.png" alt="img"></a></p>
<p>若前一步驟有按下「Publish」發布文章，回到 <a href="http://localhost:4000/">http://localhost:4000</a> ，就能看到剛新增的文章。</p>
<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/08/261956/original/f7477640f18f0e3d67ceb63ba8819a83.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/f7477640f18f0e3d67ceb63ba8819a83.png" alt="img"></a></p>
<p>點進文章後，可以看到剛才輸入文章「連結網址名稱」和「文章標題名稱」的差異在哪。</p>
<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/08/261957/original/b6b358bd559ef31cd7f114de61e4578a.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/b6b358bd559ef31cd7f114de61e4578a.png" alt="img"></a></p>
<h1 id="步驟四、停止本地伺服器"><a href="#步驟四、停止本地伺服器" class="headerlink" title="步驟四、停止本地伺服器"></a>步驟四、停止本地伺服器</h1><p>若要 push 到 GitHub 上，還是要先停止本地伺服器的運作；要<strong>停止本地伺服器</strong>，只要在命令提示字元的畫面中按下 <strong>Ctrl+C</strong>，然後再按一次 <strong>Ctrl+C</strong> 或輸入 <strong>Y</strong> 來停止。</p>
<p><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/08/261854/original/71feb54196645b685d59f5622c6d1808.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/71feb54196645b685d59f5622c6d1808.png" alt="img"></a></p>
<h1 id="步驟五、部署至-GitHub"><a href="#步驟五、部署至-GitHub" class="headerlink" title="步驟五、部署至 GitHub"></a>步驟五、部署至 GitHub</h1><p>部署至 GitHub的三個指令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo cl  &#x2F;&#x2F;清除之前建立的靜態檔案，也可以輸入 hexo cleanhexo g  &#x2F;&#x2F;建立靜態檔案，也可以輸入 hexo generatehexo d  &#x2F;&#x2F;部署至 Github Pages，也可以輸入 hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署完成後，到自己的 github.io 就能看到剛新增的文章摟！</p>
<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/08/261952/original/ede7abe9bddf371000521fe49b4034ed.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/ede7abe9bddf371000521fe49b4034ed.png" alt="img"></a></p>
<h1 id="附錄：實用教學"><a href="#附錄：實用教學" class="headerlink" title="附錄：實用教學"></a>附錄：實用教學</h1><h2 id="加入「Read-More」來截斷文章"><a href="#加入「Read-More」來截斷文章" class="headerlink" title="加入「Read More」來截斷文章"></a>加入「Read More」來截斷文章</h2><p>部落格首頁的預設是會顯示 10 篇最新發布的文章，如果每篇文章都照原始篇幅來顯示，那麼首頁就會非常非常的<del>長</del>。</p>
<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/08/261958/original/0e969d0aa238713e0f2157a6944d1dd3.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/0e969d0aa238713e0f2157a6944d1dd3.png" alt="img"></a></p>
<p>要解決這個問題，只要在指定位置加入 ``，也就是「繼續閱讀」的語法，就能在首頁隱藏文章以下的部分。</p>
<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/08/261959/original/9f1672e6d7a6fc522cec3ecdb411bec6.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/9f1672e6d7a6fc522cec3ecdb411bec6.png" alt="img"></a></p>
<p>回到首頁後，文章多餘的部分會被隱藏。如果要閱讀更多內容，除了能點選「Read More」，也能點選文章的標題。</p>
<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/08/261960/original/ab73c6842eae6c6ea82ec29dfb357edf.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/ab73c6842eae6c6ea82ec29dfb357edf.png" alt="img"></a></p>
<h2 id="文章狀態在-Hexo-資料夾中的架構"><a href="#文章狀態在-Hexo-資料夾中的架構" class="headerlink" title="文章狀態在 Hexo 資料夾中的架構"></a>文章狀態在 Hexo 資料夾中的架構</h2><p>所有的文章包含未發布、已發布、已刪除的文章，都會以<strong>不同資料夾</strong>做區分，被放在 /Hexo資料夾/source 之下(如下圖)。要注意的是，雖然從後台刪除了文章，但其實文章還是會被存放在 /Hexo資料夾/source/_discarded 中。</p>
<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/08/261961/original/ec16d7be3e5e4c5f71dc134fcacaaeb2.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/ec16d7be3e5e4c5f71dc134fcacaaeb2.png" alt="img"></a></p>
<p>另外，文章的檔案是以「連結網址名稱」來命名，所以如果要修改文章連結，後台是無法修改的，需<strong>直接修改檔名</strong>。</p>
<p><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/08/261962/original/14bbc965f6864269c24064ab4558733f.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/14bbc965f6864269c24064ab4558733f.png" alt="img"></a></p>
<h2 id="如何不在家，也能隨時隨地寫文章？"><a href="#如何不在家，也能隨時隨地寫文章？" class="headerlink" title="如何不在家，也能隨時隨地寫文章？"></a>如何不在家，也能隨時隨地寫文章？</h2><p>由於修改部落格樣式、新增/修改文章只能透過 Hexo 資料夾，然後再部署到網路上。如果要在外或其他裝置上也能寫文章，這裡提供兩種方法：</p>
<ul>
<li><strong>將 hexo-admin 後台管理架設成伺服器</strong>：可以架在 NAS 或其它服務上，不過需要自備硬體，所以這邊不討論。</li>
<li><strong>同步 Hexo 資料夾到所有裝置上</strong>：而同步方式又有兩種方法：</li>
</ul>
<p>一種是透過雲端硬碟(Google Drive, Dropbox等)的應用程式同步功能，這種方法筆者沒有試過，因為 Hexo 資料夾內有數萬個檔案，如果常部署的人，雲端硬碟就會頻繁同步檔案，會十分吃資源。</p>
<p>而另外一種方法則是直接複製整個 Hexo 資料夾到隨身碟，這樣的好處是資料會跟著隨身碟到處跑，但<strong>務必保持整個資料夾定期備份的好習慣。</strong></p>
<p>PS. 貼心提醒：備份的方式，建議可以先執行 <code>hexo cl</code> 清除暫存檔，再將整個資料夾壓縮成一個壓縮檔唷！</p>
<p>然後在目標電腦上一樣安裝以下軟體：</p>
<ol>
<li><a href="https://nodejs.org/en/">Node.js</a></li>
<li><a href="https://git-scm.com/">Git</a></li>
<li><a href="https://notepad-plus-plus.org/download/">Notepad++</a> (文字編輯器，建議安裝；如果使用者有自己習慣使用的文字編輯器則不用裝)</li>
<li><a href="https://apps.apple.com/tw/app/xcode/id497799835?mt=12">Xcode</a> (Mac 用戶才需要安裝)</li>
</ol>
<p>接著在命令提示字元(cmd)，輸入以下指令安裝 Hexo，整個環境就算安裝完成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/07/260731/original/9875f1ae9febd27ddee61157dbe719af.png?1562918224"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20hexo-admin%20%E5%BE%8C%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/2" alt="img"></a></p>
<p>​           </p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter-notebook文件默认存储路径以及更改方法</title>
    <url>/2020/11/17/Jupyter%20notebook/Jupyter-notebook%E6%96%87%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%94%B9%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Jupyter-notebook文件默认存储路径以及更改方法"><a href="#Jupyter-notebook文件默认存储路径以及更改方法" class="headerlink" title="Jupyter notebook文件默认存储路径以及更改方法"></a>Jupyter notebook文件默认存储路径以及更改方法</h1><h2 id="文件默认存储路径怎么查？"><a href="#文件默认存储路径怎么查？" class="headerlink" title="文件默认存储路径怎么查？"></a>文件默认存储路径怎么查？</h2><ul>
<li>安装Anaconda后，新建文件的默认存储路径一般在C系统盘，那么路径是什么呢？</li>
<li>首先，新建一个.ipynb文件，</li>
</ul>
<p><img src="/2020/11/17/Jupyter%20notebook/Jupyter-notebook%E6%96%87%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%94%B9%E6%96%B9%E6%B3%95/1197448-20190726221603426-804476305.png" alt="img"></p>
<ul>
<li><ul>
<li>输入以下脚本，运行出的结果即是当前jupyter文件默认保存路径</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">print(os.path.abspath(&#39;.&#39;))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/17/Jupyter%20notebook/Jupyter-notebook%E6%96%87%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%94%B9%E6%96%B9%E6%B3%95/1197448-20190726222110330-64960677.png" alt="img"></p>
<h2 id="文件默认存储路径怎么改？"><a href="#文件默认存储路径怎么改？" class="headerlink" title="文件默认存储路径怎么改？"></a>文件默认存储路径怎么改？</h2><ul>
<li>第一步：找到配置文件<ul>
<li>菜单中打开Anaconda Prompt</li>
<li>输入命令 <strong>jupyter notebook –generate-config</strong></li>
<li>根据上面运行处的路径打开C:\Users\HS.jupyter\jupyter_notebook_config.py文件</li>
</ul>
</li>
<li>第二步：更改配置<ul>
<li>找到 **#c.NotebookApp.notebook_dir = ‘’**，去掉该行前面的“#”；在打算存放文件的位置先新建一个文件夹（很重要，最好是英文的），然后将新的路径设置在单引号中，保存配置文件</li>
<li>在开始菜单找到“Jupyte Notebook”快捷键，鼠标右击 – 更多 – 打开文件位置</li>
<li>找到对应的“Jupyte Notebook”快捷图标，鼠标右击 – 属性 – 目标，去掉后面的 “%USERPROFILE%/“（很重要），然后点击“应用”，“确定”　　</li>
<li>重新启动Jupyte Notebook即可</li>
</ul>
</li>
</ul>
<p><em><img src="/2020/11/17/Jupyter%20notebook/Jupyter-notebook%E6%96%87%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%94%B9%E6%96%B9%E6%B3%95/1197448-20190726223157248-811206404.png" alt="img"></em></p>
<p><img src="/2020/11/17/Jupyter%20notebook/Jupyter-notebook%E6%96%87%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%94%B9%E6%96%B9%E6%B3%95/1197448-20190726223338682-2067818899.png" alt="img"></p>
<p> <img src="/2020/11/17/Jupyter%20notebook/Jupyter-notebook%E6%96%87%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%94%B9%E6%96%B9%E6%B3%95/1197448-20190726223442748-163849161.png" alt="img"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>更新Hexo时遇到的问题</title>
    <url>/2020/11/07/Hexo/%E6%9B%B4%E6%96%B0Hexo%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>部署Hexo时遇到的问题</p>
<h3 id="每次更新博客之后的推送方式"><a href="#每次更新博客之后的推送方式" class="headerlink" title="每次更新博客之后的推送方式."></a>每次更新博客之后的推送方式.</h3><p>hexo g  生成静态文件,</p>
<p>hexo d  部署到github上.</p>
<p>注意, 如果md文件是手动创建的,则需要在头部添加标题和日期等信息.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 部署Hexo时遇到的问题</span><br><span class="line">date:  2020年4月8日21:58:31</span><br><span class="line">type:  &quot;Hexo教程&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>


<p>英文冒号和值之间要有<strong>空格</strong>, 下面要用<strong>—</strong> 来与正文分隔.</p>
<p>包括_config.yml 中的 属性和值之间也要有空格来分隔. 否则会报错.</p>
<h3 id="使用Github-SSH-Key来避免Hexo部署时输入账户密码"><a href="#使用Github-SSH-Key来避免Hexo部署时输入账户密码" class="headerlink" title="使用Github SSH Key来避免Hexo部署时输入账户密码"></a>使用Github SSH Key来避免Hexo部署时输入账户密码</h3><p>当我用hexo d 时, 总会要在cmd中输入GitHub的账户名和密码,推送较为麻烦, 之前的GitHub项目明明都设置好了ssh 可以免密推送,为什么这里不行呢? 下面是解决方案.</p>
<h5 id="操作-修改-config-yml，将部署方式从https方式修改为ssh方式。注意-repository-属性的值"><a href="#操作-修改-config-yml，将部署方式从https方式修改为ssh方式。注意-repository-属性的值" class="headerlink" title="操作 修改_config.yml，将部署方式从https方式修改为ssh方式。注意 repository 属性的值."></a>操作 修改_config.yml，将部署方式从https方式修改为ssh方式。注意 repository 属性的值.</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;ZhangHao0810&#x2F;ZhangHao0810.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:ZhangHao0810&#x2F;ZhangHao0810.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h2 id="hexo-d命令报错-ERROR-Deployer-not-found-git"><a href="#hexo-d命令报错-ERROR-Deployer-not-found-git" class="headerlink" title="hexo d命令报错 ERROR Deployer not found: git"></a>hexo d命令报错 ERROR Deployer not found: git</h2><p>已经在站点配置文件中写入了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:   # Github pages地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>但是执行，hexo d报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>

<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>这是因为没安装hexo-deployer-git插件，在站点目录下输入下面的插件安装就好了：</p>
<p>npm install hexo-deployer-git –save</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后在使用Hexo -d命令就可以推送了。</p>
<h2 id="hexo博客搭建时图片无法正常显示的问题"><a href="#hexo博客搭建时图片无法正常显示的问题" class="headerlink" title="hexo博客搭建时图片无法正常显示的问题"></a>hexo博客搭建时图片无法正常显示的问题</h2><p>最近在GitHub Pages中搭建了hexo博客，并且使用了主题，当使用文字博客或者外链图片时没有什么问题，但是使用内置图片却出现了问题，在此记录下来。<br>hexo-asset-image无法在新版本使用</p>
<p>当发布新文章时，我使用了hexo-asset-image这个插件，这个插件需要在_config.yml中设置<code>post_asset_folder=true</code>才能开启，并且需要安装插件，安装方法为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>外网太慢, 使用cnpm来安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>使用该插件后新建文章hexo new  “测试文章”，就会在post文件夹生成同名的文件夹，该文件夹为存放图片的文件夹，然后再在文章里使用markdown的引用图片的方式进行引用，在使用hexo generate后，生成的html文件会自动的加上图片的绝对路径。</p>
<p>但是这中方法在hexo3.0之后貌似无法使用，目前我用的hexo版本为4.2，也是无法使用的，生成的链接类似：</p>
<p>/.ml//logo.jpg</p>
<p>导致在网页上无法显示<br>修改方法</p>
<p>第一种修改方法为通过hexo自带的图片标签，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>详见hexo官方对资源文件夹的说明,官方也明确提到了，如果使用markdown的语法，图片可能不会正常显示。</p>
<p>第二种修改方法时是通过修改hexo-asset-image这个插件的源代码来实现的，找到路径node_modules\hexo-asset-image\index.js,替换其中的内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class="line">hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class="line">  var config &#x3D; hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    	var link &#x3D; data.permalink;</span><br><span class="line">	if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class="line">	   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class="line">	else</span><br><span class="line">	   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class="line">	&#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class="line">	var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class="line">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class="line">    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key &#x3D; toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#39;img&#39;).each(function()&#123;</span><br><span class="line">		if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class="line">			&#x2F;&#x2F; For windows style path, we replace &#39;\&#39; to &#39;&#x2F;&#39;.</span><br><span class="line">			var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;&#x2F;&#39;);</span><br><span class="line">			if(!&#x2F;http[s]*.*|\&#x2F;\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class="line">			   !&#x2F;^\s*\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class="line">			  &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class="line">			  &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class="line">			  var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">				return elem !&#x3D; &#39;&#39;;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">				return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  if(srcArray.length &gt; 1)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class="line">			  $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class="line">			  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">			console.info&amp;&amp;console.info($(this));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] &#x3D; $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>当我使用插件时,推送到网络之后,图片依然无法显示, 查看图片的链接, 其中出现了child  </p>
<p><a href="https://zhanghao0810.github.io/child/2020/04/11/ceshi/20190410220553413.jpg">https://zhanghao0810.github.io/child/2020/04/11/ceshi/20190410220553413.jpg</a></p>
<p><a href="https://zhanghao0810.github.io/2020/04/11/ceshi/20190410220553413.jpg%E6%89%8D%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%9C%B0%E5%9D%80">https://zhanghao0810.github.io/2020/04/11/ceshi/20190410220553413.jpg才是正确的地址</a>.</p>
<p>所以不能链接到正确的图片地址.</p>
<p>修改方式, 将_config.yml 这里出现了child 尝试将url后面原来带的child去了,url改成自己的url 奇迹般的可以了.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URL&#96;</span><br><span class="line">&#96;If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;&#96;</span><br><span class="line">&#96;url: http:&#x2F;&#x2F;ZhangHao.com&#x2F;&#96;</span><br><span class="line">&#96;root: &#x2F;</span><br></pre></td></tr></table></figure>

<p>这样是可以的. 利用了hexo提供的规范. 但是在本地MarkDown看不到图片,不方便. </p>
<h2 id="Hexo启动页面显示extends-includes-layout-pug-block-content-include-includes-recent-posts-pug-include"><a href="#Hexo启动页面显示extends-includes-layout-pug-block-content-include-includes-recent-posts-pug-include" class="headerlink" title="Hexo启动页面显示extends includes/layout.pug block content include includes/recent-posts.pug include"></a>Hexo启动页面显示extends includes/layout.pug block content include includes/recent-posts.pug include</h2><p>Hexo更改主题后启动服务器，界面显如下字符:</p>
<p>extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial</p>
<p>解决方案:</p>
<p>执行如下命令</p>
<blockquote>
<p>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive </p>
</blockquote>
<p>清除缓存<br>hexo clean</p>
<p>生成静态文件,推送即可<br>hexo g<br>hexo d </p>
<h3 id="Node-js版本的问题。"><a href="#Node-js版本的问题。" class="headerlink" title="Node.js版本的问题。"></a>Node.js版本的问题。</h3><p>12.14即可。</p>
<h3 id="YAMLException-end-of-the-stream-or-a-document-separator-is-expected-at-line-6-column-1"><a href="#YAMLException-end-of-the-stream-or-a-document-separator-is-expected-at-line-6-column-1" class="headerlink" title="YAMLException: end of the stream or a document separator is expected at line 6, column 1"></a>YAMLException: end of the stream or a document separator is expected at line 6, column 1</h3><p>找找  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">------------- </span><br></pre></td></tr></table></figure>

<p>的后面有没有 空格， 必须加上一个空格才行。 </p>
<p><strong>还有 生成文件的时候， 最好是用  hexo new “title” 而不要直接拖一个md过来。</strong></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo生成的页面中嵌入PDF</title>
    <url>/2019/11/13/Hexo/Hexo%E7%94%9F%E6%88%90%E7%9A%84%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%B5%8C%E5%85%A5PDF/</url>
    <content><![CDATA[<h2 id="hexo-博客添加pdf-插件"><a href="#hexo-博客添加pdf-插件" class="headerlink" title="hexo 博客添加pdf 插件"></a>hexo 博客添加pdf 插件</h2><p>一、安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-pdf</span><br></pre></td></tr></table></figure>

<p>二、配置</p>
<p>创建 123 页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page 123 </span><br></pre></td></tr></table></figure>


<p>三、编写</p>
<p>在生成的md文件中添加pdf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">外部链接：</span><br><span class="line">&#123;% pdf http:&#x2F;&#x2F;7xov2f.com1.z0.glb.clouddn.com&#x2F;bash_freshman.pdf %&#125;</span><br><span class="line">本地连接：</span><br><span class="line">&#123;% pdf .&#x2F;pdf名字.pdf %&#125;</span><br></pre></td></tr></table></figure>



	<div class="row">
    <embed src="./123.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>创建maven项目报错“Cannot  hange  ersion  f  roject  acet  ynamic Web Module to 3.0.”</title>
    <url>/2020/11/17/Maven/%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%E2%80%9CCannot-hange-ersion-f-roject-acet-ynamic-Web-Module-to-3-0-%E2%80%9D/</url>
    <content><![CDATA[<h1 id="创建maven项目报错“Cannot-hange-ersion-f-roject-acet-ynamic-Web-Module-to-3-0-”"><a href="#创建maven项目报错“Cannot-hange-ersion-f-roject-acet-ynamic-Web-Module-to-3-0-”" class="headerlink" title="创建maven项目报错“Cannot  hange  ersion  f  roject  acet  ynamic Web Module to 3.0.”"></a>创建maven项目报错“Cannot  hange  ersion  f  roject  acet  ynamic Web Module to 3.0.”</h1><p><img src="/2020/11/17/Maven/%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%E2%80%9CCannot-hange-ersion-f-roject-acet-ynamic-Web-Module-to-3-0-%E2%80%9D/%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99.png"></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>新建Maven项目，JAR包或者test目录显示灰色</title>
    <url>/2020/11/17/Maven/%E6%96%B0%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%EF%BC%8Ctest%E5%8C%85%E6%88%96%E8%80%85JAR%E5%8C%85%E6%98%BE%E7%A4%BA%E7%81%B0%E8%89%B2/</url>
    <content><![CDATA[<h1 id="新建Maven项目，test包或者JAR包显示灰色"><a href="#新建Maven项目，test包或者JAR包显示灰色" class="headerlink" title="新建Maven项目，test包或者JAR包显示灰色"></a>新建Maven项目，test包或者JAR包显示灰色</h1><h2 id="src-test-文件夹显示灰色"><a href="#src-test-文件夹显示灰色" class="headerlink" title="src/test 文件夹显示灰色"></a>src/test 文件夹显示灰色</h2><ol>
<li>build path-&gt;configure build path-&gt;source,双击“conntains test source:yes” 变为“conntains test source:yes”<br> <img src="/2020/11/17/Maven/%E6%96%B0%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%EF%BC%8Ctest%E5%8C%85%E6%88%96%E8%80%85JAR%E5%8C%85%E6%98%BE%E7%A4%BA%E7%81%B0%E8%89%B2/1" alt="在这里插入图片描述"></li>
<li>pom文件里面去掉或注释掉test<br> <img src="/2020/11/17/Maven/%E6%96%B0%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%EF%BC%8Ctest%E5%8C%85%E6%88%96%E8%80%85JAR%E5%8C%85%E6%98%BE%E7%A4%BA%E7%81%B0%E8%89%B2/2" alt="在这里插入图片描述"></li>
</ol>
<h2 id="maven项目里jar包变成了灰色"><a href="#maven项目里jar包变成了灰色" class="headerlink" title="maven项目里jar包变成了灰色"></a>maven项目里jar包变成了灰色</h2><p><img src="/2020/11/17/Maven/%E6%96%B0%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%EF%BC%8Ctest%E5%8C%85%E6%88%96%E8%80%85JAR%E5%8C%85%E6%98%BE%E7%A4%BA%E7%81%B0%E8%89%B2/3" alt="img"></p>
<p>是因为pom里面带上了<scope>XXX</scope>导致的，</p>
<h3 id="scope的分类"><a href="#scope的分类" class="headerlink" title="scope的分类"></a>scope的分类</h3><p>在POM 4中，<dependency>中还引入了<scope>，它主要管理依赖的部署。目前<scope>可以使用5个值： </scope></scope></dependency></p>
<p>* compile，缺省值，适用于所有阶段，会随着项目一起发布。<br>* provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。<br>* runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。<br>* test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。<br>* system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。</p>
<p>依赖范围控制哪些依赖在哪些classpath 中可用，哪些依赖包含在一个应用中。让我们详细看一下每一种范围：</p>
<ol>
<li><p><strong>compile（编译范围）</strong></p>
<p>compile是默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath 中可用，同时它们也会被打包。</p>
</li>
<li><p><strong>provided</strong> <strong>（已提供范围）</strong></p>
<p>provided 依赖只有在当JDK 或者一个容器已提供该依赖之后才使用。例如， 如果你开发了一个web 应用，你可能在编译 classpath 中需要可用的Servlet API 来编译一个servlet，但是你不会想要在打包好的WAR 中包含这个Servlet API；这个Servlet API  JAR 由你的应用服务器或者servlet 容器提供。已提供范围的依赖在编译classpath （不是运行时）可用。它们不是传递性的，也不会被打包。</p>
</li>
<li><p><strong>runtime（运行时范围）</strong></p>
<p>runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如，你可能在编译的时候只需要JDBC API JAR，而只有在运行的时候才需要JDBC<br>驱动实现。</p>
</li>
<li><p><strong>test</strong> <strong>（测试范围）</strong></p>
<p>test范围依赖 在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。</p>
</li>
<li><p><strong>system</strong> <strong>（系统范围）</strong></p>
<p>system范围依赖与provided 类似，但是你必须显式的提供一个对于本地系统中JAR 文件的路径。这么做是为了允许基于本地对象编译，而这些对象是系统类库的一部分。这样的构件应该是一直可用的，Maven 也不会在仓库中去寻找它。如果你将一个依赖范围设置成系统范围，你必须同时提供一个 systemPath 元素。注意该范围是不推荐使用的（你应该一直尽量去从公共或定制的 Maven 仓库中引用依赖）。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Maven</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>项目打包Maven Install报错：Perhaps you are running on a JRE rather than a JDK</title>
    <url>/2020/11/17/Maven/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85Maven-Install%E6%8A%A5%E9%94%99%EF%BC%9APerhaps-you-are-running-on-a-JRE-rather-than-a-JDK/</url>
    <content><![CDATA[<h1 id="项目打包Maven-Install报错：Perhaps-you-are-running-on-a-JRE-rather-than-a-JDK"><a href="#项目打包Maven-Install报错：Perhaps-you-are-running-on-a-JRE-rather-than-a-JDK" class="headerlink" title="项目打包Maven Install报错：Perhaps you are running on a JRE rather than a JDK"></a>项目打包Maven Install报错：Perhaps you are running on a JRE rather than a JDK</h1><p><img src="/2020/11/17/Maven/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85Maven-Install%E6%8A%A5%E9%94%99%EF%BC%9APerhaps-you-are-running-on-a-JRE-rather-than-a-JDK/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85Maven-Install%E6%8A%A5%E9%94%99.png"></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Mybatis完整详细版</title>
    <url>/2020/10/28/MyBatis/SpringBoot%20%E6%95%B4%E5%90%88Mybais/</url>
    <content><![CDATA[<h1 id="SpringBoot整合Mybatis完整详细版"><a href="#SpringBoot整合Mybatis完整详细版" class="headerlink" title="SpringBoot整合Mybatis完整详细版"></a>SpringBoot整合Mybatis完整详细版</h1><p>记得刚接触SpringBoot时，大吃一惊，世界上居然还有这么省事的框架，立马感叹：SpringBoot是世界上最好的框架。哈哈！</p>
<p>当初跟着教程练习搭建了一个框架，传送门：<a href="https://blog.csdn.net/iku5200/article/details/81163395">spring boot + jpa + bootstrap + thymeleaf 简单的增删改查Demo</a></p>
<p>后来进了新公司，用不到而且忙于任务，今天重温一遍居然有些忘了，看来真是好记性不如烂笔头。于是写下本篇SpringBoot整合Mybatis的文章，做个笔记。</p>
<p>本章节主要搭建框架，下章节实现登录注册以及拦截器的配置：<a href="https://blog.csdn.net/iku5200/article/details/82878893">SpringBoot整合Mybatis完整详细版二：注册、登录、拦截器配置</a></p>
<p>本章项目源码下载：<a href="https://download.csdn.net/download/iku5200/10690117">springBoot整合mybatis完整详细版</a></p>
<p>github地址：<a href="https://github.com/zhanghao/springBoot_Mybatis">https://github.com/zhanghao/springBoot_Mybatis</a></p>
<p><strong>练习完此篇，可下载<a href="http://blog.zhanghao.top/2019/09/30/%E4%B8%80%E5%B0%8F%E6%97%B6%E5%BF%AB%E9%80%9F%E6%92%B8%E5%87%BA%E7%9F%AD%E7%BD%91%E5%9D%80%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE/">一小时快速撸出一个短网址生成项目</a>源码来看（欢迎star），也是非常适合入门练手的。</strong></p>
<p>天也不早了，言归正传，开始</p>
<hr>
<blockquote>
<p>IDE：idea、DB：mysql</p>
</blockquote>
<ul>
<li><strong><em>新建一个Spring Initializr项目</em></strong></li>
</ul>
<p><img src="https://img-blog.csdn.net/20180926174038560?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<ul>
<li><strong><em>创建项目的文件结构以及jdk的版本</em></strong> </li>
</ul>
<p><img src="https://img-blog.csdn.net/20180926174149120?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<ul>
<li><strong><em>选择项目所需要的依赖</em></strong></li>
</ul>
<p><img src="https://img-blog.csdn.net/20180926174507971?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<ul>
<li><strong><em>修改项目名，finish完成</em></strong></li>
</ul>
<p><img src="https://img-blog.csdn.net/20180926174536917?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<ul>
<li><strong><em>来看下建好后的pom</em></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong><em>修改配置文件</em></strong></li>
</ul>
<p>本文不使用application.properties文件  而使用更加简洁的application.yml文件。将resource文件夹下原有的application.properties文件删除，创建application.yml配置文件（备注：其实SpringBoot底层会把<strong>application.yml文件解析为\</strong>application.properties****），本文创建了两个yml文件（application.yml和application-dev.yml），分别来看一下内容</p>
<p>application.yml</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure>

<p>application-dev.yml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line"> </span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">1234</span></span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line"> </span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapping<span class="comment">/*Mapper.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.example.entity</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">#showSql</span></span><br><span class="line"><span class="comment">logging:</span></span><br><span class="line"><span class="comment">  level:</span></span><br><span class="line"><span class="comment">    com:</span></span><br><span class="line"><span class="comment">      example:</span></span><br><span class="line"><span class="comment">        mapper : debug</span></span><br></pre></td></tr></table></figure>

<p>两个文件的意思是：</p>
<blockquote>
<p>在项目中配置多套环境的配置方法。<br> 因为现在一个项目有好多环境，开发环境，测试环境，准生产环境，生产环境，每个环境的参数不同，所以我们就可以把每个环境的参数配置到yml文件中，这样在想用哪个环境的时候只需要在主配置文件中将用的配置文件写上就行如application.yml</p>
<p>笔记：在Spring Boot中多环境配置文件名需要满足application-{profile}.yml的格式，其中{profile}对应你的环境标识，比如：</p>
<p>application-dev.yml：开发环境<br> application-test.yml：测试环境<br> application-prod.yml：生产环境<br> 至于哪个具体的配置文件会被加载，需要在application.yml文件中通过spring.profiles.active属性来设置，其值对应{profile}值。</p>
</blockquote>
<p>还有配置文件中最好不要有中文注释，会报错。</p>
<p>解决方法（未测试）：<a href="https://blog.csdn.net/u013887008/article/details/82528066">spring boot application.yml文件中文注释乱码</a></p>
<p>接下来把启动文件移到com.example下，而且springboot的启动类不能放在java目录下！！！必须要个包将它包进去</p>
<p>否则会报错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your ApplicationContext is unlikely to start due to a @ComponentScan of the default package.</span><br></pre></td></tr></table></figure>

<p>这个原因值得注意就是因为有时候很难在IDEA中的项目目录认出来这个错误并且还容易扫描不到一些类，传送门：<a href="https://blog.csdn.net/iku5200/article/details/81112665">SpringBoot扫描不到controller</a></p>
<p>​      <img src="https://img-blog.csdn.net/20180726185807306?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nX2xpX2tl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">       <img src="https://img-blog.csdn.net/20180726185825592?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nX2xpX2tl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<ul>
<li><strong><em>然后开始创建实体类实现业务流程</em></strong></li>
</ul>
<p>创建包controller、entity、mapper、service。resources下创建mapping文件夹，用于写sql语句，也可以用注解的方式直接写在mapper文件里。下面直接贴代码</p>
<p>数据库表结构（之前小项目的表，直接拿来用）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`userName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`passWord`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`realName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdn.net/20180927092715962?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>entity.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.entity;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:zhanghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/26 0026</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>: 14:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassWord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> passWord;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassWord</span><span class="params">(String passWord)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRealName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> realName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRealName</span><span class="params">(String realName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realName = realName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, passWord=&#x27;&quot;</span> + passWord + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, realName=&#x27;&quot;</span> + realName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.example.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:zhanghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/26 0026</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>: 14:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testBoot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;getUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">GetUser</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.Sel(id).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.example.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.example.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:zhanghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/26 0026</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>: 15:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">Sel</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.Sel(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.example.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:zhanghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/26 0026</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>: 15:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function">User <span class="title">Sel</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapper.xml</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">package com.example.mapper;</span><br><span class="line"> </span><br><span class="line">import com.example.entity.User;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * @Author:zhanghao</span><br><span class="line"> * @Date: 2018/9/26 0026</span><br><span class="line"> * @Time: 15:20</span><br><span class="line"> */</span><br><span class="line">@Repository</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line"> </span><br><span class="line">    User Sel(int id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><em>最终框架结构</em></strong></li>
</ul>
<p><img src="https://img-blog.csdn.net/20180927095129598?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"><img src="https://img-blog.csdn.net/20180927095234881?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<ul>
<li><strong><em>完成以上，下面在启动类里加上注解用于给出需要扫描的mapper文件路径@MapperScan(“com.example.mapper”)</em></strong> </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span> <span class="comment">//扫描的mapper</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><em>最后启动，浏览器输入地址看看吧：<a href="http://localhost:8080/testBoot/getUser/1">http://localhost:8080/testBoot/getUser/1</a></em></strong></li>
</ul>
<p><img src="https://img-blog.csdn.net/20180927092946586?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>测试成功，就这样基本框架就搭建成功了</p>
<ul>
<li><strong><em>最后给个番外篇如何更改启动时显示的字符拼成的字母，就是更改下图标红框的地方</em></strong></li>
</ul>
<p><img src="https://img-blog.csdn.net/20180927093510607?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>其实很好改，只需要在resources下新建一个txt文件就可以，命名为banner.txt，那这种字符该怎么拼出来呢，下面推荐一个网址，有这种工具，链接传送门：[字母转字符](<a href="http://patorjk.com/software/taag/#p=display&amp;f=Graffiti&amp;t=Type">http://patorjk.com/software/taag/#p=display&amp;f=Graffiti&amp;t=Type</a> Something )。如下：</p>
<p><img src="https://img-blog.csdn.net/20180926172941481?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>直接输入要生成的字母，系统会自动转换，然后复制下面转换好的字符到新建的banner.txt文件中，重新启动项目就可以了。</p>
<p><img src="https://img-blog.csdn.net/20180927095715246?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lrdTUyMDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<hr>
<p>—路漫漫其修远兮，吾将上下而求索</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>MyBatis</tag>
        <tag>项目实战</tag>
      </tags>
  </entry>
  <entry>
    <title>【排错】JDBC：Access denied for user &#39;root&#39;@&#39;localhost</title>
    <url>/2020/11/18/MySQL-JDBC/JDBC%EF%BC%9AAccess-denied-for-user-root-localhost/</url>
    <content><![CDATA[<h2 id="springboot-com-mysql-cj-exceptions-CJException-Access-denied-for-user-‘root’-’localhost"><a href="#springboot-com-mysql-cj-exceptions-CJException-Access-denied-for-user-‘root’-’localhost" class="headerlink" title="springboot com.mysql.cj.exceptions.CJException: Access denied for user ‘root’@’localhost"></a>springboot com.mysql.cj.exceptions.CJException: Access denied for user ‘root’@’localhost</h2><p>在application.yml文件中配置的时候要记得</p>
<p>1）最重要的！<strong>密码（password）要加双引号！！！！！特别是以零开头的密码！！</strong></p>
<p>2）设置time__zone 为 +8：00</p>
<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.url &#x3D; jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;imoocmybatis?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;UTC</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">      datasource:</span><br><span class="line">        driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql:&#x2F;&#x2F;localhost&#x2F;girl</span><br><span class="line">        username: root</span><br><span class="line">        password: &quot;0111&quot;  </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL-JDBC</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>MySQL</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis之整合Spring（Dao和Mapper两种方式）</title>
    <url>/2020/10/28/MyBatis/MyBatis%E4%B9%8B%E6%95%B4%E5%90%88Spring%EF%BC%88Dao%E5%92%8CMapper%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<h2 id="MyBatis之整合Spring（Dao和Mapper两种方式）"><a href="#MyBatis之整合Spring（Dao和Mapper两种方式）" class="headerlink" title="MyBatis之整合Spring（Dao和Mapper两种方式）"></a>MyBatis之整合Spring（Dao和Mapper两种方式）</h2><h3 id="1-基础环境搭建"><a href="#1-基础环境搭建" class="headerlink" title="1. 基础环境搭建"></a>1. 基础环境搭建</h3><p> 　　首先环境肯定得有，环境嘛，除了<a href="http://lib.csdn.net/base/java">Java</a>环境和开发环境外，那就是jar包咯，关于mybatis和spring整合的jar包，我已经上传到下载频道了==&gt;<a href="http://download.csdn.net/detail/eson_15/9549624">传送门</a><br> 　　 将这些jar包导入到lib文件夹中即可，然后就是工程中的一些文件了，配置文件啊，java文件啊等，先看一下整个工程的结构。<br> <img src="https://img-blog.csdn.net/20160615203246719" alt="工程结构"><br> 　　下面来完成所有的整合步骤。</p>
<h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h3><p> 　　在于spring整合之前，mybatis都是自己管理数据源的，然后sqlSessionFactory是我们自己去注入的，现在整合了，这些都要交给spring来管理了，来看一下beans.xml文件中的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 加载classpath下的db.properties文件，里面配了数据库连接的一些信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;$&#123;dataSource&#125;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 配置sqlSessionFactory，SqlSessionFactoryBean是用来产生sqlSessionFactory的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载mybatis的全局配置文件，放在classpath下的mybatis文件夹中了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mybatis/SqlMapConfig.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载数据源，使用上面配置好的数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 　　跟spring和<a href="http://lib.csdn.net/base/javaee">hibernate</a>整合的情况差不多，都是通过properties文件加载<a href="http://lib.csdn.net/base/mysql">数据库</a>连接信息，然后导入配置文件配置一下sessionFactory，下面看看db.properties和SqlMapConfig.xml文件。</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#db.properties</span></span><br><span class="line"><span class="attr">dataSource</span>=<span class="string">org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc\:mysql\://localhost\:3306/mybatis</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span><span class="comment">&lt;!--整合的话，不设置settngs也行 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打开延迟加载的开关 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将积极加载改为消极加载，即延迟加载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 别名的定义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ssm.po&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;sqlmap/User.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ssm.mapper&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 扫描整个包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-dao方式开发的配置"><a href="#3-dao方式开发的配置" class="headerlink" title="3. dao方式开发的配置"></a>3. dao方式开发的配置</h2><p> 　　在最开始我们提到，mybatis中有两种开发方式，一种dao开发方式，一种mapper开发方式，后者用的比较多，但是不排除没有使用dao方式的，所以两种我都总结一下，首先看dao方式开发的配置。</p>
<h3 id="3-1-配置User-xml"><a href="#3-1-配置User-xml" class="headerlink" title="3.1 配置User.xml"></a>3.1 配置User.xml</h3><p> 　　在sqlMap包中有个User.xml，里面是针对用户的操作的一些配置，这里是整合，所以我就写了一个statement，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- namespace命名空间，作用就是对sql进行分类化管理，即sql隔离</span></span><br><span class="line"><span class="comment">注意：使用mapper代理方法开发的话，namespace就有特殊重要的作用了</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ssm.po.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 　　只是通过id查询用户，如果测试成功，说明整合成功，这里写完了后，别忘了在SqlMapConfig.xml中加载这个映射文件，但是上面已经加载过了，即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mapper resource&#x3D;&quot;sqlmap&#x2F;User.xml&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-开发dao及其实现类"><a href="#3-2-开发dao及其实现类" class="headerlink" title="3.2 开发dao及其实现类"></a>3.2 开发dao及其实现类</h3><p> 　　接下来就是开发dao及其实现类了，就一个方法，通过id查询用户，先来看下dao的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//根据用户id查询用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 　　再看下实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//继承SqlSessionDaoSupport，通过this.getSqlSession()就能得到sqlSession，因为SqlSessionDaoSupport中有该方法</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">this</span>.getSqlSession();</span><br><span class="line">        User user = sqlSession.selectOne(<span class="string">&quot;test.findUserById&quot;</span>, id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 　　这里是重点：通过dao方式开发的话，dao的实现类在实现接口的同时，需要继承SqlSessionDaoSupport类，这个类中有获取SqlSession的方法，因为sqlSessionFactory已经在beans.xml文件中配置好了（下面有写），spring会自动注入进去，继承了SqlSessionDaoSupport类就可以直接通过getSqlSession()方法来获取sqlSession。然后就可以操作数据库了。</p>
<h3 id="3-3-配置dao"><a href="#3-3-配置dao" class="headerlink" title="3.3 配置dao"></a>3.3 配置dao</h3><p> 　　上面也说了，要获取sqlSession必须得有sqlSessionFactory才行啊，这就需要spring来注入了，所以我们在beans.xml中配置一下该dao</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 原始dao方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ssm.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 　　这样的话，dao开发方式就整合好了，下面来测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImplTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;classpath:beans.xml&quot;</span>);<span class="comment">//得到spring容器</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);<span class="comment">//获取这个bean</span></span><br><span class="line">        User user = userDao.findUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-mapper方式开发的配置"><a href="#4-mapper方式开发的配置" class="headerlink" title="4. mapper方式开发的配置"></a>4. mapper方式开发的配置</h2><p> 　　由前面的博文可知，mapper方法开发的话，mapper.xml和mapper.java文件要放在一个包下，这里主要放在ssm.mapper的包下了，下面看一下两个文件：</p>
<h3 id="4-1-配置UserMapper-xml和UserMapper-java"><a href="#4-1-配置UserMapper-xml和UserMapper-java" class="headerlink" title="4.1 配置UserMapper.xml和UserMapper.java"></a>4.1 配置UserMapper.xml和UserMapper.java</h3><p>​        UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- UserMapper.xml文件 --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- namespace命名空间，作用就是对sql进行分类化管理，即sql隔离</span></span><br><span class="line"><span class="comment">注意：使用mapper代理方法开发的话，namespace就有特殊重要的作用了,namespace=mapper接口地址</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ssm.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 　　UserMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mapper接口，相当于dao接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//根据id查询用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"> </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>这个和之前的都一样，没什么难度，注意xml中的namespace要写成对应的java文件的完全限定名即可。</p>
<h3 id="4-2-配置beans-xml"><a href="#4-2-配置beans-xml" class="headerlink" title="4.2 配置beans.xml"></a>4.2 配置beans.xml</h3><p> 　　上面已经配置好了mapper的映射和接口了，那么如何由spring来产生一个代理对象呢？spring是通过MapperFactoryBean来创建代理对象的，看下面的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MapperFactoryBean：根据mapper接口生成的代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ssm.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 　　从配置中可以看出，使用MapperFactoryBean来产生mapper的代理对象，首先要配置一个mapperInterface，即你要spring产生哪个mapper接口对应的代理对象，所以肯定要把我们刚刚写好的mapper接口的完全限定名给传进去，spring就知道要创建对应的代理对象了。当然，sqlSessionFactory是必不可少的，否则怎么产生sqlSession呢？<br> 　　测试程序就不写了，把上面的测试程序改一下，获取”userMapper”这个bean即可。<br>  但是问题来了，如果有很多个mapper接口咋整？那beans.xml中难道要写很多个这样的bean么？答案肯定不是这样，我们可以在beans.xml中通过扫描包即可，即告诉spring，你把指定的包中所有的mapper接口都给我生成一个代理对象出来，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper批量扫描包，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ssm.mapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 　　从上面的配置中可以看出，spring使用MapperScannerConfiger来进行mapper扫描的。要想扫描成功，必须遵循之前说的规范：即mapper.xml和mapper.java两个文件名必须保持一致，且在同一个目录下。这样的话，自动扫描出来的mapper的bean的id就为mapper类名的首字母小写。所以上面的bean没有id属性，因为这个是根据具体的mapper接口来的。basePackage是用来指定要扫描的包。这样就可以批量扫描mapper接口了。<br> 　　测试程序和上面的一样，就不写了。到这里，spring和mybatis就整合好了，这里只是简单整合一下，主要是了解这个整合的过程以及方法，并没有用到spring的aop和事务等配置。</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>项目实战</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>【排错】Java出现The server time zone value &#39;�й���׼ʱ��&#39; is unrecognising</title>
    <url>/2020/11/18/MySQL-JDBC/Java%E5%87%BA%E7%8E%B0The-server-time-zone-value-%EF%BF%BD%D0%B9%EF%BF%BD%EF%BF%BD%EF%BF%BD%D7%BC%CA%B1%EF%BF%BD%EF%BF%BD-is-unrecogni/</url>
    <content><![CDATA[<h1 id="Java出现The-server-time-zone-value-‘�й���׼ʱ��’-is-unrecogni的解决"><a href="#Java出现The-server-time-zone-value-‘�й���׼ʱ��’-is-unrecogni的解决" class="headerlink" title="Java出现The server time zone value ‘�й���׼ʱ��’ is unrecogni的解决"></a>Java出现The server time zone value ‘�й���׼ʱ��’ is unrecogni的解决</h1><p>报错<br> The server time zone value ‘й׼ʱ’ is  unrecognized or represents more than one time zone. You must configure  either the server or JDBC driver (via the serverTimezone configuration  property) to use a more specifc time zone value if you want to utilize  time zone support.</p>
<h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>原因是因为使用了Mysql Connector/J 6.x以上的版本，然后就报了时区的错误</p>
<p>遇到的问题 servertime=UTC导致时间差8个小时（MySQL jdbc 6.0 版本以上必须配置此参数）</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p> 在配置url的时候不能简单写成 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;数据库名</span><br></pre></td></tr></table></figure>

<p>而是要写成 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;数据库名?serverTimezone&#x3D;UTC</span><br></pre></td></tr></table></figure>

<p>而UTC代表的是全球标准时间 ，但是我们使用的时间是北京时区也就是东八区，领先UTC八个小时。</p>
<p>UTC + (＋0800) = 本地（北京）时间</p>
<h2 id="设置成中国时间"><a href="#设置成中国时间" class="headerlink" title="设置成中国时间"></a>设置成中国时间</h2><p>url的时区使用中国标准时间。也是就</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;数据库名?serverTimezone&#x3D;Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL-JDBC</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让mysql的自动递增的字段重新从1开始呢？</title>
    <url>/2020/11/18/MySQL-JDBC/%E5%A6%82%E4%BD%95%E8%AE%A9mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E9%80%92%E5%A2%9E%E7%9A%84%E5%AD%97%E6%AE%B5%E9%87%8D%E6%96%B0%E4%BB%8E1%E5%BC%80%E5%A7%8B%E5%91%A2%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何让mysql的自动递增的字段重新从1开始"><a href="#如何让mysql的自动递增的字段重新从1开始" class="headerlink" title="如何让mysql的自动递增的字段重新从1开始?"></a>如何让mysql的自动递增的字段重新从1开始?</h1><p>数据库表自动递增字段在用过一段时间后清空，还是继续从清空后的自动编号开始。</p>
<h2 id="让某个字段自动从1开始自动递增呢？"><a href="#让某个字段自动从1开始自动递增呢？" class="headerlink" title="让某个字段自动从1开始自动递增呢？"></a>让某个字段自动从1开始自动递增呢？</h2><p>下面两个方法偶都试过，很好用：</p>
<ol>
<li><p>清空所有数据，将自增去掉，存盘，在加上自增，存盘，就从1开始了<br>如何让mysql的自动编号从1开始</p>
</li>
<li><p>truncate table 你的表名</p>
<p>这样不但将清除数据，而且可以重新位置identity属性的字段</p>
</li>
</ol>
<p>不过以上都不能保留现有数据哦。</p>
<h2 id="设置MySQL自动增长从某个指定的数开始"><a href="#设置MySQL自动增长从某个指定的数开始" class="headerlink" title="设置MySQL自动增长从某个指定的数开始"></a>设置MySQL自动增长从某个指定的数开始</h2><ol>
<li> 创建表的时候就设置： </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;Test&#96; (</span><br><span class="line">&#96;ID&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">&#96;class&#96; varchar(2) NOT NULL,</span><br><span class="line">&#96;NAME&#96; varchar(50) NOT NULL,</span><br><span class="line">&#96;SEX&#96; varchar(2) NOT NULL,</span><br><span class="line">PRIMARY KEY (&#96;ID&#96;)</span><br><span class="line">) ENGINE&#x3D;MEMORY AUTO_INCREMENT&#x3D;1000 DEFAULT CHARSET&#x3D;utf8 CHECKSUM&#x3D;1 DELAY_KEY_WRITE&#x3D;1 ROW_FORMAT&#x3D;DYNAMIC</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>如果在创建表时没有设置，后来想设置，可以通过修改实现： </p>
<p>alter table Test auto_increment = 1000; </p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL-JDBC</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>如何复制网页信息</title>
    <url>/2020/11/07/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/%E5%A6%82%E4%BD%95%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h2 id="网站内容禁止复制？电脑大神教你5种方法，5秒破解，秒学！"><a href="#网站内容禁止复制？电脑大神教你5种方法，5秒破解，秒学！" class="headerlink" title="网站内容禁止复制？电脑大神教你5种方法，5秒破解，秒学！"></a>网站内容禁止复制？电脑大神教你5种方法，5秒破解，秒学！</h2><p>通过搜索引擎查阅资料的时候经常会将查到的内容复制下来。不过遗憾的是，并是所有网站的内容你都可以轻松的自由复制、拿来即用。当你复制这些网站的内容时有的会提示你登录之后才可以复制，有的甚至需要付费之后才能复制。好不容易找到了资源，眼看着却复制不出来，是不是很着急？遇到这种情况怎么办呢？</p>
<p><img src="/2020/11/07/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/%E5%A6%82%E4%BD%95%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E4%BF%A1%E6%81%AF/d2bf85ec5b7cc34db7221e17390743af6649.gif" alt="img"></p>
<p>实际上，对网页内容限制复制基本上都是利用JavaScript代码来实现。所以，知道了它的原理，我们就可以轻松应对了。</p>
<p>1、使用JavaScript代码，以牙还牙</p>
<p>刚才已经说过，对网页内容限制复制基本上都是利用JavaScript代码来实现。同样，我们也可以通过Javascript代码来禁用脚本，让之前加载的限制代码失效。</p>
<p>具体操作方法为：</p>
<p>在浏览器地址栏中输入: javascript:void($={}); 然后按回车键，然后网页上的内容就任由你复制啦，注意要手动输入，复制无效哦。如果输入后还是无效的话，可以先将这个网页按F5键刷新一下，再在浏览器中输入上面的代码。</p>
<p><img src="/2020/11/07/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/%E5%A6%82%E4%BD%95%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E4%BF%A1%E6%81%AF/9612a8a0dac9a570a30ce42b706f59454944.gif" alt="img"></p>
<p>2、保存为网页</p>
<p>有的Javascript脚本会在保存网页后失效，我们可以利用这个特性来实现复制的目的。</p>
<p>具体操作方法为：</p>
<p>在需要复制内容的网页空白区域点右键，并选择【网页另存为】选项，并选择【仅HTML】将网页以html格式保存在电脑中。然后再打开保存的这个网页就可以自由复制了。</p>
<p><img src="/2020/11/07/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/%E5%A6%82%E4%BD%95%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E4%BF%A1%E6%81%AF/2b9f0154fe0ccb7dd6aacc127c4c93ef9053.gif" alt="img"></p>
<p>3、截图识别</p>
<p>网页可以限制你复制但是限制不了你截图，所以可以将需要复制的内容部分截图，然后通过一些文字识别工具将图片中的文字识别出来。</p>
<p><img src="/2020/11/07/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/%E5%A6%82%E4%BD%95%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E4%BF%A1%E6%81%AF/7d1c2365aa0d9cd0f9ff08c87328c5362906.gif" alt="img"></p>
<p>4、查看源代码</p>
<p>网页的内容都是由html源代码经过浏览器解析之后才显示出来的。所以，当我们能够看到内容的时候，这些内容已经是加载到我们的浏览器了。此时只需按一个组合键【ctrl+U】打开这个网页的源代码即可轻松复制。</p>
<p>需要注意的是，大多数小伙伴打开源代码后，发现里面的内容很多，而且还看不懂。不过没关系，再按一下组合键【Ctr+F】搜索一部分文章内容，就可以快速定位到你需要的文字的位置。接下就自由复制吧。</p>
<p><img src="/2020/11/07/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/%E5%A6%82%E4%BD%95%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E4%BF%A1%E6%81%AF/2222" alt="img"></p>
<p>5、审查元素</p>
<p>这是一个比较高级的方法，但是效率是非常快的。直接在需要复制的文字上点鼠标右键然后选择【审查元素】，你会发现浏览器已经自动打开网页的源代码并定位到当前内容了。直接在文字上双击并【Ctr+C】复制即可。</p>
<p>有了以上几种方法吗，以后在遇到网站上的文章无法复制再也不用怕啦，快快收藏起来吧！除此之外还有一些其它的方法，如果你还知道的话，欢迎大家留言交流！</p>
]]></content>
      <tags>
        <tag>小妙招</tag>
        <tag>爬数据</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 GitHub Pages + Hexo 來架設個人部落格</title>
    <url>/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/</url>
    <content><![CDATA[<h1 id="教學-使用-GitHub-Pages-Hexo-來架設個人部落格"><a href="#教學-使用-GitHub-Pages-Hexo-來架設個人部落格" class="headerlink" title="[教學] 使用 GitHub Pages + Hexo 來架設個人部落格"></a>[教學] 使用 GitHub Pages + Hexo 來架設個人部落格</h1><p>​               </p>
<p><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/07/261667/original/f83071ffb726a0af8c3470cea40cde57.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/f83071ffb726a0af8c3470cea40cde57.png" alt="img"></a></p>
<p>如果想要架設自己專屬的部落格該怎麼做呢？大部分的人會利用網路上現有的服務，例如：Blogger、痞客邦、udn部落格等平台上發文；而這類的部落格平台，最大優點就是擁有文章搜尋、文章分類、留言…等一般使用者可能會用到的功能，通通都幫你準備好了，非常方便。</p>
<p>至於缺點呢，就是始終如一或看起來都大同小異的主題介面。另外，有些部落格為了要營利，可能在部落格邊欄和文章內安插廣告；因此接下來就要來介紹如何不靠網路上現有的 Blog 平台，自己架設一個能客製化界面的專屬部落格。</p>
<h1 id="為何使用-GitHub-Pages-來架設-Hexo-部落格？"><a href="#為何使用-GitHub-Pages-來架設-Hexo-部落格？" class="headerlink" title="為何使用 GitHub Pages 來架設 Hexo 部落格？"></a>為何使用 GitHub Pages 來架設 Hexo 部落格？</h1><p>在架設自己的部落格之前，首先必須要先有一個可以放網站的空間！總共有三種方法，第一種是去尋找網路上提供的主機空間，大多數要付費（月費/年費），只有極少數是免費的（但免費的限制都很多）。第二種是自己用 NAS 來架設，這裡也不多贅述；而第三種就是透過 GitHub Pages 來架站，它是完全免費的且架設方法很簡單，不過還是有<a href="https://help.github.com/articles/what-is-github-pages/">以下幾點限制</a>：</p>
<blockquote>
<p>GitHub Pages source repositories have a recommended limit of 1GB . </p>
</blockquote>
<blockquote>
<p>Published GitHub Pages sites may be no larger than 1 GB.</p>
</blockquote>
<blockquote>
<p>GitHub Pages sites have a soft bandwidth limit of 100GB per month.</p>
</blockquote>
<blockquote>
<p>GitHub Pages sites have a soft limit of 10 builds per hour.</p>
</blockquote>
<p>總結上述限制，就是<strong>網站大小不能超過 1 GB</strong>、<strong>網站每月流量不能超過 100 GB</strong>、還有<strong>一小時內的網站更新不得超過 10 次</strong>；這些限制除非是把 GitHub Pages 當圖床、丟影片，或是每天超過幾千幾萬人會瀏覽您的網站，否則對於大部分的人一定來說都夠用。況且 GitHub 是非常著名的軟體原始碼代管服務，網站基本是不會有掛掉、連不上等問題的。</p>
<p>既然這麼方便又免費，那多數的個人網站應該都架在 GitHub Pages 了呀？因此筆者還是要說它唯一的缺點，也就是 <strong>GitHub Pages 只能架設「靜態網站」</strong>。舉例來說，需要連接資料庫的網站（像是要輸入帳號密碼登入的那種頁面），還有也是很受歡迎的個人部落格服務 - Wordpress，也是需要資料庫才能運作，所以上述這些都不適合。</p>
<p>說到使用靜態網站架設部落格的方式，就非 HEXO 莫屬了！HEXO 使用 Node.js 建置，擁有許多免費主題供大家使用；且如果有程式底子的人，透過修改主題框架、加入套件等，就能讓部落格看起來與眾不同。</p>
<h1 id="架設-Hexo-部落格之超簡易教學"><a href="#架設-Hexo-部落格之超簡易教學" class="headerlink" title="架設 Hexo 部落格之超簡易教學"></a>架設 Hexo 部落格之超簡易教學</h1><h2 id="建立-GitHub-Pages-環境"><a href="#建立-GitHub-Pages-環境" class="headerlink" title="建立 GitHub Pages 環境"></a>建立 GitHub Pages 環境</h2><h3 id="gt-註冊-Github-帳號"><a href="#gt-註冊-Github-帳號" class="headerlink" title="-&gt; 註冊 Github 帳號"></a>-&gt; 註冊 Github 帳號</h3><p>GitHub官網：<a href="https://github.com/">https://github.com/</a></p>
<h3 id="gt-建立-Github-Pages"><a href="#gt-建立-Github-Pages" class="headerlink" title="-&gt; 建立 Github Pages"></a>-&gt; 建立 Github Pages</h3><p>靜態網頁的好夥伴：Github Pages，它可以給我們託管在 GitHub 上的靜態網頁。在申請完 Github 帳號之後，點一下畫面中間的 Start a Project。</p>
<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/07/260720/original/61e62ab04f869e34bd1395b82731e19b.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/61e62ab04f869e34bd1395b82731e19b.png" alt="img"></a></p>
<p>接著將專案名稱取名為 username.github.io 並按下最下方的 Create repository</p>
<p>註： <strong>username 指的是你的 GitHub 帳號</strong>，在旁邊 Owner 的地方就會顯示你的帳號。例如我的帳號是 xdxd123，那麼專案名稱就取名為 xdxd123.github.io。</p>
<p><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/07/260722/original/6893f5d772893585be564efd54f09583.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/6893f5d772893585be564efd54f09583.png" alt="img"></a></p>
<p>接著進入專案，到 Settings 頁面。</p>
<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/07/260723/original/e7da8f0c9e9629465e0f5f4fc3f069c0.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/e7da8f0c9e9629465e0f5f4fc3f069c0.png" alt="img"></a></p>
<p>頁面往下滑，有個 GitHub Pages 設定，點一下 Choose a theme。</p>
<p><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/07/260724/original/c11565101bde07447e8ca2bee0be9582.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/c11565101bde07447e8ca2bee0be9582.png" alt="img"></a></p>
<p>開新分頁後，有好幾個樣板供使用者選擇，這裡直接按下 Select theme。(這時候的樣板只是暫時，之後才會部署自己的 Hexo 部落格上來)</p>
<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/07/260725/original/56208f06d870026e9d3837d6b7f382a9.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/56208f06d870026e9d3837d6b7f382a9.png" alt="img"></a></p>
<p>最後在網址列輸入 <a href="https://username.github.io/">https://username.github.io/</a> (username 是自己的 GitHub 帳號)，就能看到自己剛架好的 Github Pages 了唷！</p>
<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/07/260726/original/d473d4a00522e4fcf34907b01894a448.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/d473d4a00522e4fcf34907b01894a448.png" alt="img"></a></p>
<h2 id="建立-Hexo-環境"><a href="#建立-Hexo-環境" class="headerlink" title="建立 Hexo 環境"></a>建立 Hexo 環境</h2><h3 id="gt-安裝相關軟體"><a href="#gt-安裝相關軟體" class="headerlink" title="-&gt; 安裝相關軟體"></a>-&gt; 安裝相關軟體</h3><p>目前的樣板只是暫時的，我們的目標是要使用 Hexo 框架來架設部落格，最後才會部署到 GitHub Pages。接下來要建立 Hexo 環境，由於筆者是 Windows 系統，這邊以 Windows 系統來示範安裝和部署，因此需要先安裝以下軟體：</p>
<ol>
<li><a href="https://nodejs.org/en/">Node.js</a></li>
<li><a href="https://git-scm.com/">Git</a></li>
<li><a href="https://notepad-plus-plus.org/download/">Notepad++</a> (文字編輯器，建議安裝；如果使用者有自己習慣使用的文字編輯器則不用裝)</li>
<li><a href="https://apps.apple.com/tw/app/xcode/id497799835?mt=12">Xcode</a> ( Mac 用戶才需要安裝)</li>
</ol>
<h3 id="gt-初始設定"><a href="#gt-初始設定" class="headerlink" title="-&gt; 初始設定"></a>-&gt; 初始設定</h3><p>若都安裝好了，我們可以開啟我們的終端機(命令提示字元)，並輸入以下指令安裝 Hexo：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn1-t17.techbang.com/system/attached_images/2019/07/260731/original/9875f1ae9febd27ddee61157dbe719af.png?1562918224"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/1" alt="img"></a></p>
<p>安裝完 Hexo 套件後，我們要在終端機輸入以下指令來初始化 Hexo 部落格 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init name  &#x2F;&#x2F;初始化新的 Hexo，會在當前路徑建立一個叫 name 的資料夾，資料夾名稱可以隨意取，例如「myblog」，那麼指令就是 hexo init myblogcd name  &#x2F;&#x2F;進入您剛剛建立的 name 資料夾當中，cd 是 change directory 的意思npm install  &#x2F;&#x2F;安裝 Hexonpm install hexo-deployer-git --save  &#x2F;&#x2F;安裝 git 部署套件</span><br></pre></td></tr></table></figure>

<p>這樣就完成安裝了唷！</p>
<h3 id="gt-設定部落格相關資訊"><a href="#gt-設定部落格相關資訊" class="headerlink" title="-&gt; 設定部落格相關資訊"></a>-&gt; 設定部落格相關資訊</h3><p>進入剛設定好的 Hexo 資料夾之後(本範例資料夾名稱為 myblog )，先找到 _config.yml 這個檔案，然後對它點右鍵 -&gt; Edit with Notepad++ (或是用自己習慣的文字編輯器打開)。</p>
<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/07/260732/original/9fc2d1e17fac835aa3151d70bbd2d997.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/9fc2d1e17fac835aa3151d70bbd2d997.png" alt="img"></a></p>
<p>打開 _config.yml 後，修改第 6~12 行資訊，輸入完記得按下 Ctrl+S 存檔：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 我的部落格  &#x2F;&#x2F;輸入部落格標題subtitle: 一個抒發本人心情的地方  &#x2F;&#x2F;輸入副標題description:  &#x2F;&#x2F;輸入網站描述 keywords:  &#x2F;&#x2F;輸入網站關鍵字(以逗號隔開)，方便 SEO author: 王小明  &#x2F;&#x2F;輸入姓名或暱稱language: zh-TW  &#x2F;&#x2F;輸入您所使用的語言timezone:  &#x2F;&#x2F;留空以使用系統時間</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/07/260733/original/a4bf28579048e804d781b1d25dda37c8.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/a4bf28579048e804d781b1d25dda37c8.png" alt="img"></a></p>
<p>接著第 16 行的地方，url 請換成自己網站的連結 <a href="https://username.github.io/">https://username.github.io/</a> ，username是自己的 GitHub 帳號。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: https:&#x2F;&#x2F;username.github.io&#x2F;</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/07/260742/original/5f656992529e8245a79e6725385cc9f7.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/5f656992529e8245a79e6725385cc9f7.png" alt="img"></a></p>
<p>這樣就初步完成部落格的個人化設定了！</p>
<h3 id="gt-設定部署至-GitHub-的資訊"><a href="#gt-設定部署至-GitHub-的資訊" class="headerlink" title="-&gt; 設定部署至 GitHub 的資訊"></a>-&gt; 設定部署至 GitHub 的資訊</h3><p>接著一樣在 _config.yml，要找到部署至 github 的設定：deploy (在文件的底部)，請輸入以下設定，<strong>repo 的 username 改成自己的 GitHub 帳號</strong>，所以 repo 的連結架構長這樣： <a href="https://github.com/%E8%87%AA%E5%B7%B1%E5%B8%B3%E8%99%9F/%E5%B0%88%E6%A1%88%E5%90%8D%E7%A8%B1.git">https://github.com/自己帳號/專案名稱.git</a> ，輸入完一樣記得按下 Ctrl+S 存檔。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git  branch: master</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/07/260734/original/ffc47200c885d05688795451e8e58e27.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/ffc47200c885d05688795451e8e58e27.png" alt="img"></a></p>
<p>註：至於 _config.yml 在 deploy 的地方，為何預設只有 type 一個項目呢？<strong>這是因為 Hexo 可以部署到很多地方，GitHub 只是其中一個選項，而每個網站的設定值皆不同。</strong>使用者也可以一次部署到多個網站，有興趣者可以參照這個文件教學：<a href="https://hexo.io/zh-tw/docs/one-command-deployment.html">Deployment | Hexo</a>。</p>
<h3 id="gt-部署至-GitHub"><a href="#gt-部署至-GitHub" class="headerlink" title="-&gt; 部署至 GitHub"></a>-&gt; 部署至 GitHub</h3><p>回到終端機，<strong>首先確認終端機的路徑在 myblog 資料夾根目錄下</strong>，並依序輸入以下三個指令：(輸入 hexo d 後會要求登入 GitHub 帳號，如圖所示)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo cl  &#x2F;&#x2F;清除之前建立的靜態檔案，也可以輸入 hexo cleanhexo g  &#x2F;&#x2F;建立靜態檔案，也可以輸入 hexo generatehexo d  &#x2F;&#x2F;部署至 Github Pages，也可以輸入 hexo deploy</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/07/260740/original/f5221b90b385f283395b092c5878b204.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/f5221b90b385f283395b092c5878b204.png" alt="img"></a></p>
<p>這三個缺一不可的指令，就是幫我們把網站自動生成並發佈到 <a href="https://username.github.io/">https://username.github.io</a> 上的指令，完成後就可以打開瀏覽器看看自己網站發布成功的樣子摟！</p>
<p><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/07/260741/original/072bfe3ce60b25a6e7cb3f2e8959bdf8.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/072bfe3ce60b25a6e7cb3f2e8959bdf8.png" alt="img"></a></p>
<p>小結：本次介紹如何安裝 Hexo 環境，包含個人資訊和部署設定，而 Hexo 還能自訂主題、套件等等，玩法非常的多！</p>
<h1 id="附錄：實用教學"><a href="#附錄：實用教學" class="headerlink" title="附錄：實用教學"></a>附錄：實用教學</h1><h2 id="直接在指定資料夾路徑開啟終端機"><a href="#直接在指定資料夾路徑開啟終端機" class="headerlink" title="直接在指定資料夾路徑開啟終端機"></a>直接在指定資料夾路徑開啟終端機</h2><p>在部署時，終端機的路徑在 myblog 資料夾根目錄下才可以輸入指令，除了用 cd 指令，有沒有更輕鬆的方式呢？答案是<strong>直接在該資料夾的路徑列輸入 cmd，按下 enter 後，就會在這個路徑打開命令提示字元。</strong></p>
<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/07/260743/original/566a2d9f07baed839dacc729414be21a.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/566a2d9f07baed839dacc729414be21a.png" alt="img"></a></p>
<h2 id="專案名稱和部落格網址的關係"><a href="#專案名稱和部落格網址的關係" class="headerlink" title="專案名稱和部落格網址的關係"></a>專案名稱和部落格網址的關係</h2><p>前面有提到，如果你的帳號叫 <strong>xdxd123</strong>，那麼專案名稱就要叫做 <strong>xdxd123.github.io</strong>，這樣子連到該專案的網址才會是 <a href="https://xdxd123.github.io/">https://xdxd123.github.io/</a> 。那如果專案名稱不是這樣取呢？還有辦法連到這個專案的網站嗎？還是一個 GitHub 帳號只能建立一個部落格？</p>
<p><a href="https://cdn0-t17.techbang.com/system/attached_images/2019/07/260722/original/6893f5d772893585be564efd54f09583.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/6893f5d772893585be564efd54f09583.png" alt="img"></a></p>
<p>關於以上問題，一個 GitHub 帳號可以架設很多個網站；名稱的部分，如果我的名稱不是以 <strong>username.github.io</strong> 為命名，例如我取該專案的名稱為 hello，那麼的網址連結就會是 <a href="https://xdxd123.github.io/hello/">https://xdxd123.github.io/hello/</a> ，也就是在網址尾巴附上專案名稱。</p>
<p>以下做簡單的整理(假設使用者名稱為 <strong>xdxd123</strong>)：</p>
<table>
<thead>
<tr>
<th>專案(repository)名稱</th>
<th>該專案的網址連結</th>
</tr>
</thead>
<tbody><tr>
<td>xdxd123.github.io</td>
<td><a href="https://xdxd123.github.io/">https://xdxd123.github.io/</a></td>
</tr>
<tr>
<td>hello.github.io</td>
<td><a href="https://xdxd123.github.io/hello.github.io/">https://xdxd123.github.io/hello.github.io/</a></td>
</tr>
<tr>
<td>hello</td>
<td><a href="https://xdxd123.github.io/hello/">https://xdxd123.github.io/hello/</a></td>
</tr>
<tr>
<td>project</td>
<td><a href="https://xdxd123.github.io/project/">https://xdxd123.github.io/project/</a>　　　　　(…依此類推)</td>
</tr>
</tbody></table>
<p>要注意的是，假設用專案名稱：<strong>hello</strong> 來建立 Hexo 部落格，記得 Hexo 資料夾根目錄下的 _config.yml 要修改第 16 行和第 17 行，如下圖，否則部署至 GitHub Pages 後會無法正確顯示：</p>
<p><a href="https://cdn2-t17.techbang.com/system/attached_images/2019/07/261695/original/06f228fbb59459252395b1d842f05edf.png"><img src="/2019/11/13/Hexo/%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E4%BE%86%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/06f228fbb59459252395b1d842f05edf.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Word中Tab的缩进量设置</title>
    <url>/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/Word%E4%B8%ADTab%E7%9A%84%E7%BC%A9%E8%BF%9B%E9%87%8F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="有时候我会碰到Tab键不灵的情况，"><a href="#有时候我会碰到Tab键不灵的情况，" class="headerlink" title="有时候我会碰到Tab键不灵的情况，"></a>有时候我会碰到Tab键不灵的情况，</h3><h3 id="实际上是设置了Tab的缩进量为0-设置回2字符即可。"><a href="#实际上是设置了Tab的缩进量为0-设置回2字符即可。" class="headerlink" title="实际上是设置了Tab的缩进量为0. 设置回2字符即可。"></a>实际上是设置了Tab的缩进量为0. 设置回2字符即可。</h3><p><img src="/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/Word%E4%B8%ADTab%E7%9A%84%E7%BC%A9%E8%BF%9B%E9%87%8F%E8%AE%BE%E7%BD%AE/tab.png"></p>
]]></content>
      <categories>
        <category>Office办公技巧</category>
      </categories>
      <tags>
        <tag>Word</tag>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>word文章中快速样式-标题2345-等找不到了怎么办</title>
    <url>/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/word%E6%96%87%E7%AB%A0%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%A0%B7%E5%BC%8F-%E6%A0%87%E9%A2%982345-%E7%AD%89%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    <content><![CDATA[<h2 id="word快速样式中的标题2标题3不见了怎么办"><a href="#word快速样式中的标题2标题3不见了怎么办" class="headerlink" title="word快速样式中的标题2标题3不见了怎么办"></a>word快速样式中的标题2标题3不见了怎么办</h2><p>一般情况下word快速样式中默认的有标题1，标题2，标题3和标题4，如果某一天你发现快速样式中的标题2和标题3，或是其他任意格式不见了，应该如何找回呢？请看下文。</p>
<p><img src="/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/word%E6%96%87%E7%AB%A0%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%A0%B7%E5%BC%8F-%E6%A0%87%E9%A2%982345-%E7%AD%89%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/0.png"></p>
<h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h2><ol>
<li>打开word，在开始菜单下的工具栏中找到样式，然后点击图示的下拉箭头。<br><img src="/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/word%E6%96%87%E7%AB%A0%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%A0%B7%E5%BC%8F-%E6%A0%87%E9%A2%982345-%E7%AD%89%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/1.png"></li>
</ol>
<ol start="2">
<li><p>展开快速样式以后，在窗口中看到并没有标题2和标题3，但是在word编辑过程中需要使用这两种快速样式，应该怎么办呢？继续看下文。<br><img src="/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/word%E6%96%87%E7%AB%A0%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%A0%B7%E5%BC%8F-%E6%A0%87%E9%A2%982345-%E7%AD%89%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/2.png"></p>
</li>
<li><p>点击样式栏右下方图示位置的箭头符号。</p>
<p><img src="/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/word%E6%96%87%E7%AB%A0%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%A0%B7%E5%BC%8F-%E6%A0%87%E9%A2%982345-%E7%AD%89%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/3.png"></p>
</li>
<li><p>点击之后会出现下图的样式窗口，在样式窗口底部点击管理样式图标，如图所示。</p>
<p><img src="/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/word%E6%96%87%E7%AB%A0%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%A0%B7%E5%BC%8F-%E6%A0%87%E9%A2%982345-%E7%AD%89%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/4.png"></p>
</li>
<li><p>这时，弹出管理样式的设置页面，在该页面上方的菜单中点击【推荐】选项卡，然后在图示位置找到并选中标题2，接着点击下方的【显示】按钮。</p>
<p><img src="/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/word%E6%96%87%E7%AB%A0%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%A0%B7%E5%BC%8F-%E6%A0%87%E9%A2%982345-%E7%AD%89%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/5.png"></p>
</li>
<li><p>这样标题2的状态就变成了显示了，按同样的方法对标题3进行显示设置操作，设置好之后点击窗口下方的【确定】。</p>
<p><img src="/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/word%E6%96%87%E7%AB%A0%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%A0%B7%E5%BC%8F-%E6%A0%87%E9%A2%982345-%E7%AD%89%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/6.png"></p>
</li>
<li><p>点击确定后样式管理窗口消失，我们发现在工具栏的样式中标题2和标题3显示出来了，设置成功。</p>
<p><img src="/2020/11/16/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/word%E6%96%87%E7%AB%A0%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%A0%B7%E5%BC%8F-%E6%A0%87%E9%A2%982345-%E7%AD%89%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/7.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Office办公技巧</category>
      </categories>
      <tags>
        <tag>Word</tag>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>文件资源管理器打开缓慢的处理办法</title>
    <url>/2020/11/07/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E6%89%93%E5%BC%80%E7%BC%93%E6%85%A2%E7%9A%84%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h2 id="当文件资源管理器打开缓慢"><a href="#当文件资源管理器打开缓慢" class="headerlink" title="当文件资源管理器打开缓慢"></a>当文件资源管理器打开缓慢</h2><p><img src="/2020/11/07/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E6%89%93%E5%BC%80%E7%BC%93%E6%85%A2%E7%9A%84%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/70" alt="img"></p>
<h3 id="解决办法1："><a href="#解决办法1：" class="headerlink" title="解决办法1："></a>解决办法1：</h3><p>win10 打开设置 个性化 颜色 取消勾选  从 我的背景 自动选取一种颜色  即可</p>
<p>来源于贴吧， 奇奇怪怪的解决方案。 Windows系统 奇奇怪怪的Bug</p>
<h3 id="办法2："><a href="#办法2：" class="headerlink" title="办法2："></a>办法2：</h3><p>重启电脑即可。（这是因为我卸载又重装了一个 node.js）</p>
]]></content>
      <categories>
        <category>电脑操作</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware 虚拟机NAT模式如何设置网络连接</title>
    <url>/2020/11/18/%E8%99%9A%E6%8B%9F%E6%9C%BA/VMware-%E8%99%9A%E6%8B%9F%E6%9C%BANAT%E6%A8%A1%E5%BC%8F%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="VMware-虚拟机NAT模式如何设置网络连接"><a href="#VMware-虚拟机NAT模式如何设置网络连接" class="headerlink" title="VMware 虚拟机NAT模式如何设置网络连接"></a>VMware 虚拟机NAT模式如何设置网络连接</h2><p><img src="/2020/11/18/%E8%99%9A%E6%8B%9F%E6%9C%BA/VMware-%E8%99%9A%E6%8B%9F%E6%9C%BANAT%E6%A8%A1%E5%BC%8F%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/123.png"></p>
]]></content>
      <categories>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware：主机找不到vmnet1和vmnet8解决方法</title>
    <url>/2020/11/18/%E8%99%9A%E6%8B%9F%E6%9C%BA/VMware%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%89%BE%E4%B8%8D%E5%88%B0vmnet1%E5%92%8Cvmnet8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/2020/11/18/%E8%99%9A%E6%8B%9F%E6%9C%BA/VMware%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%89%BE%E4%B8%8D%E5%88%B0vmnet1%E5%92%8Cvmnet8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/123.png"></p>
]]></content>
      <categories>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>网关-ip-内网-外网</title>
    <url>/2020/11/18/%E7%BD%91%E7%BB%9C/%E7%BD%91%E5%85%B3-ip-%E5%86%85%E7%BD%91-%E5%A4%96%E7%BD%91/</url>
    <content><![CDATA[<p><img src="/2020/11/18/%E7%BD%91%E7%BB%9C/%E7%BD%91%E5%85%B3-ip-%E5%86%85%E7%BD%91-%E5%A4%96%E7%BD%91/1.png"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>ip</tag>
        <tag>网关</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的引用&lt;牛&gt;</title>
    <url>/2020/11/18/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/Java%E7%9A%84%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="谈Java中的引用"><a href="#谈Java中的引用" class="headerlink" title="谈Java中的引用"></a>谈Java中的引用</h1><p>先上两个面试中经常遇见的问题：</p>
<p>1.给出以下代码执行后的打印输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lll</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        i=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">changeReturn</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(User u)</span></span>&#123;</span><br><span class="line">        u.setAge(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> User <span class="title">changeReturn</span><span class="params">(User u)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">11</span>);</span><br><span class="line">        <span class="keyword">return</span> u=user;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setAge(<span class="number">1</span>);</span><br><span class="line">        change(i);</span><br><span class="line">        change(u);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(u.getAge());</span><br><span class="line">        System.out.println(changeReturn(i));</span><br><span class="line">        System.out.println(changeReturn(u).getAge());</span><br><span class="line">        System.out.println(u.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.说出以下代码执行后的输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lll2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            i=<span class="number">3</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            i=<span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> User <span class="title">printUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            u.setAge(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            u.setAge(<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            u.setAge(<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(print());</span><br><span class="line">        System.out.println(printUser().getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这两种类型的题，乍一看跟标题没什么关系。一个考察java的参数传递，一个考察java的异常。但其实这两个问题的本质，包括标题要讲的==和equals的区别，都与java中的引用息息相关。</p>
<h1 id="一、java中的引用"><a href="#一、java中的引用" class="headerlink" title="一、java中的引用"></a>一、java中的引用</h1><p>引用，是java中一个极其普通，但其实又最容易被人忽略的知识点。我们都知道java中没有指针的概念，取而代之的是封装好的引用。引用的本质，是一个指向对象存储内存地址的数据结构。我们知道java分两种数据类型，基本数据类型和引用数据类型，对于基本数据类型，其赋值一般都是在栈中直接分配，对于下面的语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p> 我们在程序中访问变量i，会直接访问10所在的内存空间。而对于下面的语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br></pre></td></tr></table></figure>

<p>首先我们要知道，这条语句并不是一个原子操作，其实这里分了三步：</p>
<ol>
<li><p>新建一个引用user</p>
</li>
<li><p>内存中分配空间存储new出来的User对象实例</p>
</li>
<li><p>将引用user指向User对象实例的内存空间</p>
</li>
</ol>
<p>不仅如此，java中new对象的操作还可能遇见指令重排序现象，对于虚拟机而言，1,2,3的执行顺序并不能保证，可以存在1,3,2现象，也就是新建引用后，直接指向要分配给User对象的内存空间，然后再执行User对象的实例化操作。这也是单例模式双重锁无法保证线程安全的原因。</p>
<p>java为何要多此一举，设计一个如此复杂的引用指向对象模式？java在设计之初便规定了8种基本数据类型，对于每种数据类型，其大小有固定的上下范围，便于jvm控制。<strong>而对于引用类型，由于在运行期会不断变化，很难在编译期去判定一个对象的大小。这也是java中数组分配在堆而不是栈的原因</strong>。引用本身只存储对象的内存地址，大小可控。基于此，jvm巧妙的设计出了堆内存区域，<strong>将基本数据类型和引用类型存放于栈中</strong>，<strong>无法预测的数组与对象存放于堆中</strong>。所以针对以上两个变量，i，user。我们在访问i的时候，是直接访问分配在栈中的10的内存空间，而访问user，是访问user所指向的，存储在堆中的User对象实例的内存地址。</p>
<h1 id="二、java方法传递参数的方式"><a href="#二、java方法传递参数的方式" class="headerlink" title="二、java方法传递参数的方式"></a>二、java方法传递参数的方式</h1><p>上面啰里啰嗦说的这些，可能或多或少每个java程序员都接触过。但是深入理解引用和基本数据类型的区别，非常重要。基于此，我们先解决一个java面试中的老大难问题，也就是题目一，java传递参数的方式。</p>
<p>编程语言传递参数通常有两种方式，值传递和引用传递。java采用的是值传递可能很多人都知道，但是如何理解这个值传递？如何解释change(int i)方法跟changeReturn(int i)方法对i变量的操作？</p>
<p>首先记住一点，所谓的值传递，就是把当前变量的值复制一份，传入到一个方法中。如果当前变量是一个基本变量，那么复制变量i的操作等价于复制10这个数字，然后传入复制出的10。对于引用类型也是一样，复制变量user的操作就是在内存中开辟一块空间，将user所指向的内存的地址复制一遍，然后传入复制后的引用。</p>
<p>所以对于方法change(int i)而言，传入的i，与之前main方法中的i，完全是在两块内存中，我们在change(int i)方法中对i进行操作后，改变的是当前i的值，与之前main方法中i的值毫无关系：</p>
<p><img src="/2020/11/18/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/Java%E7%9A%84%E5%BC%95%E7%94%A8/1" alt="img"></p>
<p>当然实际栈中执行方法的顺序不是这样的，这里只是简单的描述了一下两块内存中不同的i，这里的复制i也就是change(int i)中的参数i，可以看到两个操作完全是在不同的内存区域操作，所以change(int i)方法并不能改变main方法中i的值。</p>
<p>那么对于引用类型，情况有什么不同呢？与i的操作类似，都是要先复制然后操作：</p>
<p><img src="/2020/11/18/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/Java%E7%9A%84%E5%BC%95%E7%94%A8/2" alt="img"></p>
<p>区别非常明显，因为引用中只存储了对象的内存地址，所以change(User  u)和main方法中的user，指向的是一个对象，对这两个引用的任何操作最终都是在一块内存区域中完成的，所以change(User  u)方法可以改变main方法中user的age值。</p>
<p>回过头来，我们继续分析changeReturn(int i)方法，我们已经知道，由于java的采用值传递的传参方式，change(int  i)方法无法改变main方法中的i值，那为何加一个返回值以后，i的值就可以被改变了呢？大家很容易想到，带有返回值后，原先i的值被覆盖掉了。这个覆盖操作是如何完成的？最终的答案，交给编译后的字节码输出解决：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">  descriptor: (I)V</span><br><span class="line">  flags: ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">       <span class="number">2</span>: istore_0</span><br><span class="line">       <span class="number">3</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">7</span>: <span class="number">3</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">changeReturn</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">  descriptor: (I)I</span><br><span class="line">  flags: ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">       <span class="number">2</span>: istore_0</span><br><span class="line">       <span class="number">3</span>: iload_0</span><br><span class="line">       <span class="number">4</span>: ireturn</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">9</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">10</span>: <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>通过javap命令输出后的字节码指令，我们可以清晰的看到，changeReturn比change方法多出的iload_0这个指令，以及最终的返回指令，return与ireturn。iload_0用来将当前局部变量表的0位置元素入栈，也就是i，ireturn弹出栈顶元素也就是复制后的i，之后main方法再对i进行操作时，拿到的是新的pop出的内存区域，也就是数据1存放的内存区域：</p>
<p><img src="/2020/11/18/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/Java%E7%9A%84%E5%BC%95%E7%94%A8/3" alt="img"></p>
<p>讲到这里大家可以思考一下最后一个方法，changeReturn(User  u)，其实原理是一致的，changeReturn方法中新new出了一个User，那么直接调用changeReturn方法返回的user引用，会使用新的User，但是即便我们在方法中将参数u的引用更新为新地址，由于这个参数u与main方法中的u引用并不是一个引用，所以main方法中的u引用指向的依旧是以前的User对象：</p>
<p><img src="/2020/11/18/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/Java%E7%9A%84%E5%BC%95%E7%94%A8/4" alt="img"></p>
<p>可以看到最终方法执行结束后，main方法中指向的User对象依旧是之前的User对象。</p>
<p>这里插一句题外话，很多面试者不喜欢一些java基础的题目考察，尤其是笔试题。但通过这道题可以充分考察出一个程序员对java内存模型的熟悉程度。很多题目并不是面经能够给你解决的，只有深入了解其背后的原理，才能真的融会贯通。</p>
<h1 id="三、java中的返回与异常"><a href="#三、java中的返回与异常" class="headerlink" title="三、java中的返回与异常"></a>三、java中的返回与异常</h1><p>继续看第二道题，看起来考察的是java中的异常机制，但其实要真的理解发生异常后的返回值，只需要理解两点：</p>
<p>1.java中方法的退出机制。</p>
<p>2.java中引用和基本类型的区别。</p>
<p>首先我们要明白java中对方法的执行，归根结底是jvm对字节码的执行，我们手写的代码，与最终编译后的字节码往往差异很大，所以很多方法执行顺序问题只要我们去看一眼字节码便一目了然。针对第一点，java中方法的退出机制，其实这也是异常体系中一个核心知识点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">0</span><span class="comment">//操作数栈深度只有1，局部变量表长度为3,</span></span><br><span class="line">         <span class="number">0</span>: iconst_1 <span class="comment">//</span></span><br><span class="line">         <span class="number">1</span>: istore_0 <span class="comment">//执行i=1，此时i保存在局部变量表下标为0的位置</span></span><br><span class="line">         <span class="number">2</span>: iconst_2 <span class="comment">//</span></span><br><span class="line">         <span class="number">3</span>: istore_0 <span class="comment">//执行i=2</span></span><br><span class="line">         <span class="number">4</span>: iload_0  <span class="comment">//复制i的值入栈</span></span><br><span class="line">         <span class="number">5</span>: istore_1 <span class="comment">//复制并且保存给当前返回值，注意这里是istore_1而不是istore_0</span></span><br><span class="line">         <span class="number">6</span>: iconst_4 <span class="comment">//</span></span><br><span class="line">         <span class="number">7</span>: istore_0 <span class="comment">//i=4</span></span><br><span class="line">         <span class="number">8</span>: iload_1  <span class="comment">//复制当前位置1的值入栈，也就是上面istore_1保存的值2</span></span><br><span class="line">         <span class="number">9</span>: ireturn  <span class="comment">//返回2</span></span><br><span class="line">        <span class="number">10</span>: astore_1 <span class="comment">//保存一个异常对象到局部变量表1，下面是catch逻辑</span></span><br><span class="line">        <span class="number">11</span>: iconst_3 <span class="comment">//</span></span><br><span class="line">        <span class="number">12</span>: istore_0 <span class="comment">// i=3</span></span><br><span class="line">        <span class="number">13</span>: iconst_4 <span class="comment">//</span></span><br><span class="line">        <span class="number">14</span>: istore_0 <span class="comment">// i=4</span></span><br><span class="line">        <span class="number">15</span>: goto          <span class="number">23</span></span><br><span class="line">        <span class="number">18</span>: astore_2 <span class="comment">//保存一个异常对象局部变量表2，下面执行的是如果catch中无法捕获的异常发生</span></span><br><span class="line">        <span class="number">19</span>: iconst_4 <span class="comment">//</span></span><br><span class="line">        <span class="number">20</span>: istore_0 <span class="comment">//i=4</span></span><br><span class="line">        <span class="number">21</span>: aload_2  <span class="comment">//</span></span><br><span class="line">        <span class="number">22</span>: athrow   <span class="comment">//抛出</span></span><br><span class="line">        <span class="number">23</span>: iload_0 <span class="comment">//此时再加载0位置的值，最后一条istore的值是4</span></span><br><span class="line">        <span class="number">24</span>: ireturn <span class="comment">//返回4</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">2</span>     <span class="number">6</span>    <span class="number">10</span>   Class java/lang/Exception</span><br><span class="line">             <span class="number">2</span>     <span class="number">6</span>    <span class="number">18</span>   any</span><br><span class="line">            <span class="number">10</span>    <span class="number">13</span>    <span class="number">18</span>   any</span><br></pre></td></tr></table></figure>

<p>关于字节码如何阅读，这里暂时不展开讲，可以翻看我之前转载的另一篇博文。通过字节码可以清晰的看到，遇见java中的return语句，jvm会先复制一份当前的返回值，然后进行finally中的操作。由于i代表的是int基本数据类型，这里复制操作复制的是真实的数值，所以finally中对i的操作不会影响当前方法的返回值。</p>
<p>如果这里不是很好理解，大家可以继续去想一下返回值是对象的情况，也就是printUser的字节码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> com.guttv.bms.dao.<span class="function">lll2$User <span class="title">printUser</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()Lcom/guttv/bms/dao/lll2$User;</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">0</span></span><br><span class="line">         0: new           #3                  // class com/guttv/bms/dao/lll2$User</span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         4: invokespecial #4                  // Method com/guttv/bms/dao/lll2$User.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         <span class="number">7</span>: astore_0</span><br><span class="line">         <span class="number">8</span>: aload_0</span><br><span class="line">         <span class="number">9</span>: iconst_1</span><br><span class="line">        10: invokevirtual #5                  // Method com/guttv/bms/dao/lll2$User.setAge:(I)V</span><br><span class="line">        <span class="number">13</span>: aload_0</span><br><span class="line">        <span class="number">14</span>: astore_1</span><br><span class="line">        <span class="number">15</span>: aload_0</span><br><span class="line">        <span class="number">16</span>: iconst_3</span><br><span class="line">        17: invokevirtual #5                  // Method com/guttv/bms/dao/lll2$User.setAge:(I)V</span><br><span class="line">        <span class="number">20</span>: aload_1</span><br><span class="line">        <span class="number">21</span>: areturn</span><br><span class="line">        <span class="number">22</span>: astore_1</span><br><span class="line">        <span class="number">23</span>: aload_0</span><br><span class="line">        <span class="number">24</span>: iconst_2</span><br><span class="line">        25: invokevirtual #5                  // Method com/guttv/bms/dao/lll2$User.setAge:(I)V</span><br><span class="line">        <span class="number">28</span>: aload_0</span><br><span class="line">        <span class="number">29</span>: iconst_3</span><br><span class="line">        30: invokevirtual #5                  // Method com/guttv/bms/dao/lll2$User.setAge:(I)V</span><br><span class="line">        <span class="number">33</span>: goto          <span class="number">44</span></span><br><span class="line">        <span class="number">36</span>: astore_2</span><br><span class="line">        <span class="number">37</span>: aload_0</span><br><span class="line">        <span class="number">38</span>: iconst_3</span><br><span class="line">        39: invokevirtual #5                  // Method com/guttv/bms/dao/lll2$User.setAge:(I)V</span><br><span class="line">        <span class="number">42</span>: aload_2</span><br><span class="line">        <span class="number">43</span>: athrow</span><br><span class="line">        <span class="number">44</span>: aload_0</span><br><span class="line">        <span class="number">45</span>: areturn</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">8</span>    <span class="number">15</span>    <span class="number">22</span>   Class java/lang/Exception</span><br><span class="line">             <span class="number">8</span>    <span class="number">15</span>    <span class="number">36</span>   any</span><br><span class="line">            <span class="number">22</span>    <span class="number">28</span>    <span class="number">36</span>   any</span><br></pre></td></tr></table></figure>

<p>整体流程与print方法类似，遇见return语句时，jvm同样是复制了当前的返回值，但注意这里的返回值是一个引用，jvm进行复制的时候，只是复制了引用的值，也就是对象的内存地址。复制前后的引用都指向一个对象，所以在finally中对user进行操作，依然会修改复制前的user对象，导致最终返回值的变化。</p>
<p>这里做一个简单总结：</p>
<p>1.java中return语句会触发程序复制当前的返回值</p>
<p>2.引用存储的永远都是对象的内存地址，对引用的复制只是对内存地址的复制，并不能复制一个新的对象产生。</p>
<h1 id="四、java中的-与equals"><a href="#四、java中的-与equals" class="headerlink" title="四、java中的==与equals"></a>四、java中的==与equals</h1><p>java中判断两个对象是否相等常用的两个方法就是==与equals，注意hashcode方法由于碰撞冲突的存在，不是一个特别的好的判定方案。equals方法比较简单，他是Object类的一个方法，默认由==实现。java中自带的包装类以及String类等一般都重写了该方法的具体实现。</p>
<p>==比较的是值，如果是基本类型，比较的就是具体的数值。如果是引用类型，比较的是引用的值。由于引用中保存的是对象的内存地址，所以==对两个引用的比较，实际上比较的就是两个引用是否指向同一个对象。</p>
<p>值得注意的是，在重写equals方法的实现时，如果涉及类型比较，要注意getClass方法与instanceof关键字的区别。简单来说，instanceof用来比较类型，getClass用来比较类。假设有如下类关系：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Son与Girl调用getClass比较返回false，调用instanceof返回true。</p>
<h1 id="五、浅拷贝与深拷贝"><a href="#五、浅拷贝与深拷贝" class="headerlink" title="五、浅拷贝与深拷贝"></a>五、浅拷贝与深拷贝</h1><p>涉及对象引用还有一个常见的问题就是浅拷贝与深拷贝，所谓的浅拷贝，其实就是只拷贝了对象引用，拷贝前后的引用还是指向了同一个内存对象。深拷贝与之对应，是重新开辟了新的内存空间，所以如果想要实现深拷贝，就必须要手动执行new对象的过程。java中Object类的clone方法是一个浅拷贝方法，深拷贝需要自己实现。需要深拷贝的地方必须自行实现对象的创建复制过程。</p>
]]></content>
      <categories>
        <category>Java面试准备</category>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>知乎 关于双非计算机硕士毕业问题</title>
    <url>/2020/11/19/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/%E7%9F%A5%E4%B9%8E-%E5%85%B3%E4%BA%8E%E5%8F%8C%E9%9D%9E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%95%E5%A3%AB%E6%AF%95%E4%B8%9A%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>作者：匿名用户<br> 链接：<a href="https://www.zhihu.com/question/268886169/answer/785486610">https://www.zhihu.com/question/268886169/answer/785486610</a><br> 来源：知乎<br> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>说说我吧，一个反例，双非软件工程渣硕，真实状况，大家参考，入坑请谨慎。</p>
<p>20190812</p>
<p>软件工程专业，双非本科，考研调剂双非硕士，19年6月毕业的我已经离开学校2个多月了，现在的我，在一家软件外包公司的银行驻场，今天下午工作时间，没有什么工作内容，也无心学习，在搜知乎搜索“硕士 外包”关键字，发现这个问题，勉强答一下。现在的我慌的一塌糊涂，想改变。</p>
<p>18年夏天没有什么工作经验出来实习，也是比较难找实习工作。最后在一个B轮互联网公司的运营部门实习了不到半年，但我是计算机专业的，很想搞开发，所以没有想到后面找工作的痛苦，就离开公司回学校了。</p>
<p>18年12月回了学校，赶快开始写毕业论文，做实验，想着写完论文就一门心思找工作。19年2月底，过完年到了学校终于基本完成了论文，开始春招。</p>
<p>2月底开始面试，主要在学校所在的城市（北方某二线城市）投简历，互联网公司不多，自己一心想找开发类、机器学习类、数据分析类工作，无奈没有很好的经验，面试准备的也不是很足，所以就基本不是很满意。后来找到了一个半国企性质的公司做机器学习类的工作，但一个组三个人，也是刚孵化的项目，本来很犹豫，不是很想去。</p>
<p>但是这个时候，刚刚写完论文初稿正在找工作的我，收到了相处一年多的女朋友的分手消息。多次挽留无效，就选择开始工作，让自己忙起来忘记她。于是去了学校当地那个半国企的公司，去了那里状态也不是很好，领导也是一个30多的单身老直男。实习干了两个月，里面很多都是当地硕士实习生，问了几个人都不想呆在这个地方，还有几个刚来的也是说春招实在找不到工作了，于是选择了这个公司。公司里干的活有点像做课题然后向国家申请经费的这种感觉，死气沉沉，技术提升可能不是很大。加之上面提到的那位直男领导的折磨（其实就领导两个人；工作需求讲不清，问他具体需求，又让我自己好好想想，发挥我的主观能动性，说他太忙，不要用这些小事烦他；但我自己有时候做出来了，又嫌我做的和他想的不一样，因此我觉得连沟通都沟通不了的领导，可能不是很好的选择。加之他有一天因为需求的事，当众和我大吵，我也跟他怼了一句，事后另一个组的同事都和我说，你们领导也太奇葩了吧。之后没有几天，他说可能之后得给我降薪，我说我考虑考虑，后来我就表明同意了他的要求，但我已经做好了离开的准备。一个写工作邮件还在写此致 敬礼这样的小学生术语的直男领导，是我不可战胜的恐惧），我选择离开了，4月中旬重新投简历，想换个地方工作，离开那座城市，因为回忆太多。</p>
<p>4月底来到帝都，去了软件行业一家有名的外包公司面试，和面试官聊了之后，觉得基本符合预期，说做数据挖掘等数据类相关工作，也用python，而我比较喜欢python开发，我预期薪资13k，面试的时候也基本同意。后来为了等这家公司的offer，后来三天又去了4、5家公司面试，有的不符合期望，有的不符合要求。过了3天，那个外包公司发来了offer，说给月薪10.5k（说到这里，还有一个插曲：在刚刚面试完这家外包公司时，上午面试，下午公司打电话来说，只能给12k，我基本同意了，后来发offer时又打电话说，只能给10.5k，这个时候稍微感觉这个公司有点不靠谱，和网上大家的评价差不多，不过想着面试官描述的工作内容自己基本喜欢，也就同意了），拿了offer就回学校准备毕业论文和答辩了，当时感觉，稍微松了一口气，从18年暑假算起，帝都和学校来回折腾快一年了。</p>
<p>之后就是6月毕业了，还差几天拿毕业证的我，响应公司的号召，赶紧先去公司实习了，是外派银行的项目，实习到7月1号签转正合同。结果来了工作的银行，工作内容是银行数据的ETL，主要写一些sql和存储过程，然后可能写一点perl脚步做跑批任务，根本不是数据挖掘，也不是python工作，和我想的python数据挖掘或者互联网后端工作基本不同，技术方向不同，技术也比较落后（可能好多细节还不是实习这半个月了解的，可能有一些细节是最近一段时间试用期了解到的）。想到如果在这里呆着，之后跳槽可能也不是很容易，因此有一些犹豫。</p>
<p>7月1号，伟大的我党的生日当天，我很犹豫地去了公司总部去签正式劳动合同，毕竟薪资也没有达到预期，工作内容也比较简单重复，提升不大。签合同时，看到劳动合同上写着12k，稍微有一点点意外，就凑合签了。第二天人事打电话过来说，合同签错了，多了1.5k，让我把合同退回去，我这个时候态度稍微强硬了一点，毕竟合同已经生效，所以就半推不就的不是很情愿，后来人事消停了。签合同第三天，中午吃饭时间（我们项目组几个人每天一起吃饭），我的项目经理接到一个微信后，突然问我要不要户口，说可能会解决（而我瞥了一眼，打电话的人是4月份我的面试官，也就是现在我驻场银行的总领导）。我看到这种情况，心里想可能是他们的上面套路吧，就说不需要。过了几天，后来那位面试官来找了我一次，说工资可能是弄错了，应该是10.5k，然后我说了句当时说了12k呀，然后他说可能是我们这边出了一点问题，但我给你找找人事吧，不行就12k吧，但说让我快速成长，多学习工作内容，他会注意我的，意思就是工作不要偷懒。然后后来就没有找我了，7月试用期的工资也是按12k的80%发的。</p>
<p>故事到了八月吧，基本也就是10多天前，我项目经理说，我得换到另一个项目组，因为那个项目组平时需求多，能养得起人。我说可以不换吗，他说*总（当时的面试官）不同意。现在我就被换到另一个项目组了，前几天从一个准备辞职的同事那里交接了一些工作，也是一些sql语句和一些重复的固化的工作流程，没有什么技术含量，就连sql逻辑都不用多想，因为项目组的模型工程师才是做sql逻辑的，ETL工程师也就改成sql语句，测试一下，然后进行数据的抽取和下发给下游系统。今天新的这个项目组的项目经理跟我说，让我明天工位换另一边，明天开始干活。</p>
<p>现在的我吧，毕业这一年经历这么多（可能也不算什么，大家都这么过来的？）心情极其复杂，干着自己不太满意的工作，就怕工作几年没有什么提升，技术老套跟不上互联网发展的步伐，过几年跳槽没有合适的工作机会，想到未来很是担忧。且身边的同事没有见过硕士，很多都不是计算机专业的，不少都是其他专业培训之后来的，感觉自己身边的同事也不牛x，自己也不能有很好的提升（没有歧视的意思哈，大家慎喷，我就单纯说一下事实，因为我也就一个渣硕）。还有一个比较熟的同事，还感觉自己现在的工作挺好的。他是体育大学毕业的，后来it培训后来的现在的公司，我跟他聊：工作就是一些不用想逻辑的sql语句，也不用一门编程语言，但他的意思是，感觉还挺好，天天乐呵呵，因此我就和他感觉灵魂里没有共同话题，其实稍微有一点鄙视他（从未来的发展和工作中的成长来说，他人挺好的，不是贬低他的意思，见谅）</p>
<p>上周五到今天在招聘网站，投了几十个python开发类的简历，现在还没有一个回复。我这一个应届毕业没有什么项目经验的渣硕，还要和20届的实习生竞争，还要和工作两年的有经验的工程师竞争，基本丧失应届生身份的我，感觉现在前途不太明朗。</p>
<p>（刚刚收到一个笔试通知邮件，今天晚上回去撸两道题，求过）</p>
<p>好了，先这样，现在我坐在甲方银行狭窄且不固定不能联外网的工位上，现在我想去男生都需要排队的甲方厕所里去静静，好好想想我这一个渣硕这是什么造型啊，这一年我都经历了什么，各方面不太如意吧。写了这么多，突然发现要下班了，可耻:(</p>
<p>知乎人均985，人均年薪100w，我双非渣硕可耻的匿了吧，严重拉低了贵乎计算机硕士的水平。</p>
<p>更新一下 20190813</p>
<p>昨天晚上做完了一套公司的面试题，可以查资料，但涉及面很广，python高级内容也不少，还有linux相对不是很容易搜索到的题目，到凌晨1:30才做完发了邮件。今天周二，连续两天凌晨两点入睡了，困。今天还是没有什么工作内容，下午还是挺烦，所以来更新一下。</p>
<p>这么多年，不知道是我心高气傲还是能力有限，总感觉自己学习工作的身边没有牛人共事，就是那种自己打心里佩服的人。</p>
<p>高考分数本来可以去一个比自己本科学校好一点的学校，结果因为不懂招生规则，最后补录进了一所当地学生在二本线附近就可以上的学校，这是第一次感觉自己身边没有牛人。</p>
<p>所以在本科学校努力学习，以后遇到一些牛人，本科期间绩点成绩专业第一，但是当时不是很懂保研，有可能是自卑，感觉我们这样的破学校没有什么保研资格，结果保研就被第二名轻松反超。</p>
<p>后来说，想考研，遇到一些优秀的人。所以抓住大四最后的几个月时间，努力复习，目标是一所帝都某211院校的计算机专业。通过笔试无奈面试与帝都这所学校失之交臂，有笔试比我成绩低但成功入学的同届考生的消息也是让我感觉既自卑又自负吧。</p>
<p>随后调剂来到研究生的双非大学，再次感觉到身边没有什么很优秀的人，很多人都是大部分同学都来自二本甚至三本学校，并且很多人都说自己本科学习不好，没有拿过奖学金，就是大四学了一年考的研，还有一些同学根本不是我同专业的，也没有很好的规划，因此再次感觉自己很失败，还是没有遇到什么优秀的人。当然我承认，比起贵乎人均常青藤海龟，我就是个渣硕，就是差到掉渣的那种。</p>
<p>现在从事的工作，也是银行的外包，身边的同事更是哪里的都有，瞬间开始更加怀疑自己了，始终身边没有优秀的人。现在的同事中，有非计算机专业培训来的，有计算机相关专业的本科，咱也不敢问有没有研究生毕业的。像这样的外包公司，除了我这一个渣硕，也没有人会选择来这工作吧。</p>
<p>20多年了，挫败感很强，感觉中考、高考、研究生、工作，从小到大，贯穿始终，没有一件自己很满意，很有成就感的事，也没有好的运气遇到一些共事的牛人以求自勉。现在自己的状态就是，看不上身边的同事，自己又达不到很高的水平，好迷茫吧应该是。</p>
<p>也可能是我这个人性格使然？一直以来，娱乐也不能尽兴，总担心自己如果像别人那么肆无忌惮的玩耍会负罪感太强，常常使自己有一定的压力，但有时候方向不太对，干着急，学习也不能很好的坚持一个方向，所以面试就是涉猎多但不精通。</p>
<p>现在看着一些同事们互相还聊的挺开心，不知道他们有没有我这样类似的烦恼，但我最近基本不想和其他同事交流，既看不上自己又看不上别人，我究竟是一种什么样的存在。</p>
<p>一直体会不到别人在人生某次重大选择过程中，突然感觉好幸运的那种感觉：差一点就进不来了这所学校了，或者差一点就进不来这个公司了，就是那种既满足自己期望又幸运的感觉。</p>
<p>说了这么多，负能量挺高，希望大家以我为戒，不要成为我这样一个被自己嫌弃的人吧。</p>
<p>20190821</p>
<p>看到一句话，供大家欣赏：</p>
<p>什么时候出国读书、什么时候决定做第一份职业、何时选定了对象而恋爱、什么时候结婚，其实都是命运的巨变。只是当时站在三岔路口，眼见风云千樯，你作出抉择的那一日，在日记上，相当沉闷和平凡，当时还以为是生命中普通的一天。</p>
<p>20190826</p>
<p>愿你有好运，如果没有，</p>
<p>希望你在慈悲中学会坚强；</p>
<p>愿有很多人爱你，如果没有，</p>
<p>希望你在寂寞中学会宽容。</p>
<p>《愿你慢慢长大》</p>
]]></content>
      <categories>
        <category>职业规划</category>
      </categories>
      <tags>
        <tag>知乎</tag>
        <tag>职业规划</tag>
      </tags>
  </entry>
  <entry>
    <title>为毛不能自定义一个 Java.long.String/Math 类？</title>
    <url>/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/%E4%B8%BA%E6%AF%9B%E4%B8%8D%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA-Java-long-String-Math-%E7%B1%BB%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="为什么不能自定义java-lang-String-Math"><a href="#为什么不能自定义java-lang-String-Math" class="headerlink" title="为什么不能自定义java.lang.String/Math"></a>为什么不能自定义java.lang.String/Math</h1><p>如果直接写一个java.lang.String类，并写一个main方法，即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.lang;</span><br><span class="line"> public class String &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     System.out.println(&quot;Hello String&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>运行之后会抛一个异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">错误: 在类 java.lang.String 中找不到主方法, 请将主方法定义为:</span><br><span class="line">   public static void main(String[] args)</span><br></pre></td></tr></table></figure>



<p>这是什么原因呢？</p>
<p>答案先给出：</p>
<p>Java类加载机制为代理模式，先交给其父加载器去加载，如果父加载器加载不了，则由自己加载。我们自定义的类是由系统类加载器进行加载，而它的父加载器为扩展类加载器。我们定义的java.lang.String最先由扩展类加载器加载，它负责加载Java核心库，但java.lang.String正是系统中的类，已经被扩展类加载器记载过了，所以不再加载自定义的java.lang.String。但是系统的java.lang.String没有main方法，所以出现了上面的这个异常。</p>
<p>另外，自定义包不能以java.xxx.xxx开头，这是一种安全机制，如果以java开头，系统直接抛异常。</p>
<p>再来看以下两段代码：</p>
<p>片段1：</p>
<p><img src="/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/%E4%B8%BA%E6%AF%9B%E4%B8%8D%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA-Java-long-String-Math-%E7%B1%BB%EF%BC%9F/1.jpg" alt="img"></p>
<p>片段1执行结果：</p>
<p><img src="/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/%E4%B8%BA%E6%AF%9B%E4%B8%8D%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA-Java-long-String-Math-%E7%B1%BB%EF%BC%9F/2.jpg" alt="img"></p>
<p>对于代码片段1，虽然能加载自定义的com.test.String类，但是main方法中的String对象也是自定义的，不符合main方法的定义方式，故系统抛找不到mian方法。</p>
<p>片段2：</p>
<p><img src="/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/%E4%B8%BA%E6%AF%9B%E4%B8%8D%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA-Java-long-String-Math-%E7%B1%BB%EF%BC%9F/3.jpg" alt="img"></p>
<p>对于代码片段2，在main方法的定义中把String类的路径写全了，明确了，故能正常执行。</p>
<p><strong>原因</strong></p>
<p>这里必须要提到java加载类的过程。</p>
<p>Java在加载类时，采用的是代理模式，即，类加载器在尝试自己去查找某个类的字节代码并定义它时，会先代理给其父类加载器，由父类加载器先去尝试加载这个类，以此类推。在说明代理模式背后的原因之前，首先需要说明一下Java虚拟机是如何判定两个java类是相同的。Java虚拟机不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样。只有两者都相同，才认为两个类时相同的。即便是同样的字节代码，被不同的类加载器加载之后所得到的类，也是不同的，如果此时试图对这两个类的对象进行相互赋值，会抛出运行时异常ClassCastException。</p>
<p>了解到这一点，就可以理解代理模式的设计动机了。代理模式是为了保证Java核心库的类型安全，所有的Java应用都至少需要引用java.lang.Object类，也就是说在运行时，java.lang.Object这个类需要被加载到Java虚拟机中。如果这个过程由Java应用自己的类加载器来完成的话，很可能就存在多个版本的java.lang.Object类，可是这些类之间是不兼容的。通过代理模式，对于Java核心库的类的加载工作由引导类加载器统一完成，保证了Java应用所使用的都是同一个版本的Java核心库的类，是相互兼容的。</p>
<h1 id="在源码层面解读这个问题"><a href="#在源码层面解读这个问题" class="headerlink" title="在源码层面解读这个问题"></a>在源码层面解读这个问题</h1><h2 id="需求缘起"><a href="#需求缘起" class="headerlink" title="需求缘起"></a>需求缘起</h2><p>最近学习了下java类加载相关的知识。看到网上经常会有一道这样的有一道面试题是，能不能自己写个类叫java.lang.System？</p>
<p>网上提供的答案：通常不可以，但可以采取另类方法达到这个需求。所谓的另类方法指自己写个类加载器来加载java.lang.System达到目的。</p>
<p>首先表明下我的观点。上述答案完全是误导读者，是不正确的答案。我就纳闷了网上怎么把这种完全不正确的搜索结果排在前面，而且几乎搜到的都是这种不正确的答案。可能很多不明真相的朋友就这么被误导了，所以还是希望大家对网上的内容先持怀疑态度为好。下面详细说明为什么</p>
<h2 id="网上错误答案的详细解释"><a href="#网上错误答案的详细解释" class="headerlink" title="网上错误答案的详细解释"></a><strong>网上错误答案的详细解释</strong></h2><p>“为了不让我们写System类，类加载采用委托机制，这样可以保证爸爸们优先，爸爸们能找 到的类，儿子就没有机会加载。而System类是Bootstrap加载器加载的，就算自己重写，也总是使用Java系统提供的System，自己写的 System类根本没有机会得到加载。</p>
<p>但是，我们可以自己定义一个类加载器来达到这个目的，为了避免双亲委托机制，这个类加载器也必须是特殊的。由于系统自带的三个类加载器都加载特定目录下的类，如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。</p>
<h2 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h2><p>类加载器可分为两类：一是启动类加载器(Bootstrap ClassLoader)，是C++实现的，是JVM的一部分；另一种是其它的类加载器，是Java实现的，独立于JVM，全部都继承自抽象类 java.lang.ClassLoader。jdk自带了三种类加载器，分别是启动类加载器（Bootstrap ClassLoader），扩展类加载器（Extension ClassLoader），应用程序类加载器（Application ClassLoader）。后两种加载器是继承自抽象类java.lang.ClassLoader。关于这三种加载器各自的作用这里不做详细说明，有兴 趣的可以自己了解下。</p>
<p>类加载器是有层次的</p>
<p>一般是： 自定义类加载器 &gt;&gt; 应用程序类加载器 &gt;&gt; 扩展类加载器 &gt;&gt; 启动类加载器</p>
<p>上面的层次关系被称为双亲委派模型(Parents Delegation Model)。除了最顶层的启动类加载器外，其余的类加载器都有对应的父类加载器。</p>
<p>再简单说下双亲委托机制：如果一个类加载器收到了类加载的请求，它首先不会自己尝试去加载这 个类，而是把这个请求委派给父类加载器，每一个层次的类加载器都是加此，因此所有的加载请求最终到达顶层的启动类加载器，只有当父类加载器反馈自己无法完 成加载请求时（指它的搜索范围没有找到所需的类），子类加载器才会尝试自己去加载。</p>
<p>再回去看下解释内容，我相信前面的部分大家应该很看懂了，也没什么大问题。最后的如果部分” 如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。” 我就不明白所以了，逻辑完全不通。我想它的本意可能是，将自己的java.lang.System类放置在特殊目录，然后系统自带的加载器无法加载，这样 最终还是由我们自己的加载器加载（因为我们自己的加载器知道其所在的特殊目录）。这种说法好像逻辑上没有问题，那么我们就来实验下了。</p>
<h2 id="自己验证"><a href="#自己验证" class="headerlink" title="自己验证"></a>自己验证</h2><p><img src="/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/%E4%B8%BA%E6%AF%9B%E4%B8%8D%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA-Java-long-String-Math-%E7%B1%BB%EF%BC%9F/20180124155246940" alt="img"></p>
<p>主要包括4个类：</p>
<h3 id="MyClassLoader"><a href="#MyClassLoader" class="headerlink" title="MyClassLoader:"></a>MyClassLoader:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyq.maventest.classloader;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@ClassName</span>: package-info</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 自定义类加载器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> youqiang.xiong</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2018年1月24日下午3:16:11</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line">publicclass MyClassLoader extends ClassLoader&#123;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"> </span><br><span class="line">String className = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(name.startsWith(<span class="string">&quot;java.lang&quot;</span>))&#123;</span><br><span class="line"> </span><br><span class="line">className = <span class="string">&quot;/&quot;</span> + name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> </span><br><span class="line">className = name.substring(name.lastIndexOf(<span class="string">&#x27;.&#x27;</span>) + <span class="number">1</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">System.out.println(className);</span><br><span class="line"> </span><br><span class="line">InputStream is = getClass().getResourceAsStream(className);</span><br><span class="line"> </span><br><span class="line">System.out.println(is);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(is == <span class="keyword">null</span>)</span><br><span class="line"> </span><br><span class="line">returnsuper.loadClass(name);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">byte</span>[] b = newbyte[is.available()];</span><br><span class="line"> </span><br><span class="line">is.read(b);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> </span><br><span class="line">e.printStackTrace();</span><br><span class="line"> </span><br><span class="line"><span class="function">thrownew <span class="title">ClassNotFoundException</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="ClassLoaderTest"><a href="#ClassLoaderTest" class="headerlink" title="ClassLoaderTest:"></a>ClassLoaderTest:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyq.maventest.classloader;</span><br><span class="line">  </span><br><span class="line">publicclassClassLoaderTest &#123;</span><br><span class="line"> </span><br><span class="line"><span class="function">publicstaticvoid <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line"> </span><br><span class="line">ClassLoader myLoader = <span class="keyword">new</span> MyClassLoader();</span><br><span class="line"> </span><br><span class="line">Object obj = myLoader.loadClass(<span class="string">&quot;java.lang.Math&quot;</span>).newInstance();</span><br><span class="line"> </span><br><span class="line">System.out.println(obj);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Math："><a href="#Math：" class="headerlink" title="Math："></a><strong>Math</strong>：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@ClassName</span>: Math</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 自定义Math类，复写Java.lang.Math，检查是否会加载</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> youqiang.xiong</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2018年1月24日下午3:18:41</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">publicfinalclassMath &#123;</span><br><span class="line"> </span><br><span class="line"><span class="function">publicstaticvoid <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MyMath："><a href="#MyMath：" class="headerlink" title="MyMath："></a>MyMath：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">publicclassMyMath &#123;</span><br><span class="line">      </span><br><span class="line">     <span class="function">publicstaticvoid <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的测试代码没用自定义java.lang.System类，因为测试代码用到了JDK自带的System类进行输出打印，会冲突，所以改用为自定义的java.lang.Math类。如果自定义的Math类能加载，那么自定义的System类同样能加载。</p>
<h2 id="先直接运行下Math类"><a href="#先直接运行下Math类" class="headerlink" title="先直接运行下Math类"></a>先直接运行下Math类</h2><p>输出如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">错误: 在类 java.lang.Math 中找不到 main 方法, 请将 main 方法定义为:</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">否则 JavaFX 应用程序类必须扩展javafx.application.Application</span></span><br></pre></td></tr></table></figure>

<p>提示Math类没有main方法。首先大家要明白一个概念，当类首次主动使用时，必须进行类 的加载，这部分工作是由类加载器来完成的。根据双亲委托原则，Math类首先由启动类加载器去尝试加载，很显然，它找到rt.jar中的 java.lang.Math类并加载进内存（并不会加载我们自定义的Math类），然后执行main方法时，发现不存在该方法，所以报方法不存在错误。 也就是说，默认情况下JVM不会加载我们自定义的Math类。</p>
<h2 id="再直接运行MyMath类"><a href="#再直接运行MyMath类" class="headerlink" title="再直接运行MyMath类"></a>再直接运行MyMath类</h2><p>Jvm弹出异常提示框</p>
<p><img src="/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/%E4%B8%BA%E6%AF%9B%E4%B8%8D%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA-Java-long-String-Math-%E7%B1%BB%EF%BC%9F/20180124155247455" alt="img"></p>
<p>此时打开jvisualvm 可以监控到此程序的cpu，内存等运行情况</p>
<p><img src="/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/%E4%B8%BA%E6%AF%9B%E4%B8%8D%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA-Java-long-String-Math-%E7%B1%BB%EF%BC%9F/20180124155248125" alt="img"></p>
<p>点击两次按钮弹出后，会出现如下异常信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.SecurityException: Prohibited <span class="keyword">package</span> name: java.lang</span><br><span class="line"> </span><br><span class="line">    at java.lang.ClassLoader.preDefineClass(ClassLoader.java:<span class="number">662</span>)</span><br><span class="line"> </span><br><span class="line">    at java.lang.ClassLoader.defineClass(ClassLoader.java:<span class="number">761</span>)</span><br><span class="line"> </span><br><span class="line">    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:<span class="number">142</span>)</span><br><span class="line"> </span><br><span class="line">    at java.net.URLClassLoader.defineClass(URLClassLoader.java:<span class="number">467</span>)</span><br><span class="line"> </span><br><span class="line">    at java.net.URLClassLoader.access$<span class="number">100</span>(URLClassLoader.java:<span class="number">73</span>)</span><br><span class="line"> </span><br><span class="line">    at java.net.URLClassLoader$<span class="number">1.</span>run(URLClassLoader.java:<span class="number">368</span>)</span><br><span class="line"> </span><br><span class="line">    at java.net.URLClassLoader$<span class="number">1.</span>run(URLClassLoader.java:<span class="number">362</span>)</span><br><span class="line"> </span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line"> </span><br><span class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">361</span>)</span><br><span class="line"> </span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">424</span>)</span><br><span class="line"> </span><br><span class="line">    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="number">335</span>)</span><br><span class="line"> </span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">357</span>)</span><br><span class="line"> </span><br><span class="line">    at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:<span class="number">495</span>)</span><br></pre></td></tr></table></figure>

<p>注意红色部分的内容。由堆栈异常信息可知道，当应用程序类加载器类（AppClassLoader）尝试加载MyMath类时，ClassLoader.java的662行抛出了SecurityException</p>
<p>禁止使用包名：java.lang。</p>
<p>直接查看抽象类java.lang.ClassLoader的preDefineClass方法代码，摘抄如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private ProtectionDomain preDefineClass(String name,</span><br><span class="line">ProtectionDomain pd)</span><br><span class="line"> &#123;</span><br><span class="line"> if (!checkName(name))</span><br><span class="line"> thrownew NoClassDefFoundError(&quot;IllegalName: &quot; + name);</span><br><span class="line"> if ((name !&#x3D; null) &amp;&amp; name.startsWith(&quot;java.&quot;)) &#123;</span><br><span class="line"> thrownew SecurityException</span><br><span class="line"> (&quot;Prohibited package name: &quot; +</span><br><span class="line">name.substring(0, name.lastIndexOf(&#39;.&#39;)));</span><br><span class="line"> &#125;</span><br><span class="line"> if (pd &#x3D;&#x3D; null) &#123;</span><br><span class="line"> pd &#x3D; defaultDomain;</span><br><span class="line"> &#125;</span><br><span class="line"> if (name !&#x3D; null) checkCerts(name, pd.getCodeSource());</span><br><span class="line">returnpd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到如果加载的类全名称以”java.”开头时，将会抛出SecurityException，这也是为什么直接执行MyMath类会出现SecurityException。</p>
<p>照这样，我们自定义的类加载器必须继承自ClassLoader，其loadClass()方法里调用了父类的defineClass()方法，并最终调到preDefineClass()方法，因此我们自定义的类加载器也是不能加载以”java.”开头的java类的。</p>
<h2 id="继续运行下ClassLoaderTest"><a href="#继续运行下ClassLoaderTest" class="headerlink" title="继续运行下ClassLoaderTest"></a>继续运行下<strong>ClassLoaderTest</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/java/lang/Math.class</span><br><span class="line"> </span><br><span class="line">sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream@<span class="number">4e25154f</span></span><br><span class="line"> </span><br><span class="line">java.lang.SecurityException: Prohibited <span class="keyword">package</span> name: java.lang</span><br><span class="line">    at java.lang.ClassLoader.preDefineClass(ClassLoader.java:<span class="number">662</span>)</span><br><span class="line"> </span><br><span class="line">    at java.lang.ClassLoader.defineClass(ClassLoader.java:<span class="number">761</span>)</span><br><span class="line"> </span><br><span class="line">    at java.lang.ClassLoader.defineClass(ClassLoader.java:<span class="number">642</span>)</span><br><span class="line"> </span><br><span class="line">    at com.xyq.maventest.classloader.MyClassLoader.loadClass(MyClassLoader.java:<span class="number">37</span>)</span><br><span class="line"> </span><br><span class="line">    at com.xyq.maventest.classloader.ClassLoaderTest.main(ClassLoaderTest.java:<span class="number">7</span>)</span><br><span class="line"> </span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ClassNotFoundException</span><br><span class="line"> </span><br><span class="line">    at com.xyq.maventest.classloader.MyClassLoader.loadClass(MyClassLoader.java:<span class="number">40</span>)</span><br><span class="line"> </span><br><span class="line">    at com.xyq.maventest.classloader.ClassLoaderTest.main(ClassLoaderTest.java:<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p>备注：第一个at部分清楚表明，也是在preDefineClass方法中抛出的SecurityException。</p>
<p>通过代码实例及源码分析可以看到，对于自定义的类加载器，强行用defineClass()方法去加载一个以”java.”开头的类也是会抛出异常的。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不能自己写以”java.”开头的类，其要么不能加载进内存，要么即使你用自定义的类加载器去强行加载，也会收到一个SecurityException。</p>
]]></content>
      <categories>
        <category>Java面试准备</category>
        <category>JVM</category>
        <category>类加载机制</category>
      </categories>
      <tags>
        <tag>类加载机制</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是HotSpot虚拟机</title>
    <url>/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/%E4%BB%80%E4%B9%88%E6%98%AFHotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="什么是HotSpot虚拟机"><a href="#什么是HotSpot虚拟机" class="headerlink" title="什么是HotSpot虚拟机"></a>什么是HotSpot虚拟机</h1><p>提起HotSpot VM，相信所有Java程序员都知道，它是Sun JDK和OpenJDK中所带的虚拟机，也是目前使用范围最广的Java虚拟机。</p>
<p>但不一定所有人都知道的是，这个目前看起来“血统纯正”的虚拟机在最初并非由Sun公司开发，而是由一家名为“Longview Technologies”的小公司设计的；</p>
<p>甚至这个虚拟机最初并非是为Java语言而开发的，它来源于Strongtalk VM，</p>
<p>而这款虚拟机中相当多的技术又是来源于一款支持Self语言实现“达到C语言50%以上的执行效率”的目标而设计的虚拟机，</p>
<p>Sun公司注意到了这款虚拟机在JIT编译上有许多优秀的理念和实际效果，在1997年收购了Longview Technologies公司，从而获得了HotSpot VM。</p>
<p>HotSpot VM既继承了Sun之前两款商用虚拟机的优点（如前面提到的准确式内存管理），也有许多自己新的技术优势，</p>
<p>如它名称中的HotSpot指的就是它的热点代码探测技术（其实两个VM基本上是同时期的独立产品，HotSpot还稍早一些，HotSpot一开始就是准确式GC，</p>
<p>而Exact VM之中也有与HotSpot几乎一样的热点探测。</p>
<p>为了Exact VM和HotSpot VM哪个成为Sun主要支持的VM产品，在Sun公司内部还有过争论，HotSpot打败Exact并不能算技术上的胜利），</p>
<p>HotSpot VM的热点代码探测能力可以通过执行计数器找出最具有编译价值的代码，然后通知JIT编译器以方法为单位进行编译。</p>
<p>如果一个方法被频繁调用，或方法中有效循环次数很多，将会分别触发标准编译和OSR（栈上替换）编译动作。</p>
<p>通过编译器与解释器恰当地协同工作，可以在最优化的程序响应时间与最佳执行性能中取得平衡，而且无须等待本地代码输出才能执行程序，</p>
<p>即时编译的时间压力也相对减小，这样有助于引入更多的代码优化技术，输出质量更高的本地代码。</p>
<p><strong>在2006年的JavaOne大会上，Sun公司宣布最终会把Java开源</strong>，并在随后的一年，陆续将JDK的各个部分（其中当然也包括了HotSpot VM）在GPL协议下公开了源码，</p>
<p>并在此基础上建立了OpenJDK。这样，HotSpot VM便成为了Sun JDK和OpenJDK两个实现极度接近的JDK项目的共同虚拟机。</p>
<p>在2008年和2009年，Oracle公司分别收购了BEA公司和Sun公司，这样Oracle就同时拥有了两款优秀的Java虚拟机：JRockit VM和HotSpot VM。</p>
<p>Oracle公司宣布在不久的将来（大约应在发布JDK 8的时候）会完成这两款虚拟机的整合工作，使之优势互补。</p>
<p>整合的方式大致上是在HotSpot的基础上，移植JRockit的优秀特性，譬如使用JRockit的垃圾回收器与MissionControl服务，</p>
<p>使用HotSpot的JIT编译器与混合的运行时系统。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>GC</tag>
        <tag>HotSpot虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>【1-2】Java核心技术及面试指南</title>
    <url>/2020/11/18/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E3%80%90Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97%E3%80%91/%E3%80%901-2%E3%80%91Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="第一章-带你走进Java的世界"><a href="#第一章-带你走进Java的世界" class="headerlink" title="第一章  带你走进Java的世界"></a>第一章  带你走进Java的世界</h1><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><ol>
<li>调试代码时：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F6 进入下一行代码</span><br><span class="line">F5 进入当前方法中</span><br><span class="line">F8 跳转到下一个断点。</span><br></pre></td></tr></table></figure>
<h2 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h2><ol>
<li>保证单一职责原则，<ol>
<li>在一个类（class）中，应当放同一种类的代码。</li>
<li>同一类业务的类放入同一个package。</li>
</ol>
</li>
</ol>
<h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><p>在公司项目中，Web是重点，Core是基础。</p>
<p>应该通过Spring系列框架或者MyBatis等基于java Web 的架构或者技术来提升自己。</p>
<table>
<thead>
<tr>
<th>技术种类</th>
<th>具体的技术</th>
<th>应用的层面和作用</th>
</tr>
</thead>
<tbody><tr>
<td>架构技术</td>
<td>Nginx（负载均衡）<br>Kafka（消息服务）</td>
<td>在架构层面为整个系统服务，一旦有流量提升的需求，则可以采用扩展服务器的方式来应对。</td>
</tr>
<tr>
<td>Java Web 技术</td>
<td>Spring系列框架+MyBatis</td>
<td>前后端交互，完成各类web层面的业务</td>
</tr>
<tr>
<td>Core技术</td>
<td>集合，数据库，IO，异常处理。</td>
<td>在业务实现时会大量使用。</td>
</tr>
</tbody></table>
<h3 id="学习路线："><a href="#学习路线：" class="headerlink" title="学习路线："></a>学习路线：</h3><ol>
<li>第一个月  面向对象的语法，Java集合，异常处理流程和基本的IO处理流程。</li>
<li>第二个月进入Java Web初级阶段学习，数据库，JDBC，多线程编程，基本的Web技术（JSP，Servlet，JavaBean+DB架构的简单项目开发）</li>
<li>第三个月深入了解Java Web的资深框架技术 <ol>
<li>学习Spring (IOC |AOP)的基本理念， 能运行IOC和AOP的部分代码，结合代码知道AutoWire等知识。</li>
<li>学习SpringMVC（SpringBoot）框架，跑简单项目，了解组成结构和开发要点。</li>
<li>学习ORM技术，了解MyBatis基本开发模式，知道如何通过ORM和数据库交互。</li>
<li>运行简单的Spring框架+ORM框架的案例，了解框架中各部分的开发要点。</li>
</ol>
</li>
</ol>
<h3 id="学习技巧"><a href="#学习技巧" class="headerlink" title="学习技巧"></a>学习技巧</h3><ol>
<li><p>了解概念。</p>
</li>
<li><p>通读API，知道如何操作常用API，一定要通过代码（有必要就进行Debug）来了解基本用法。</p>
</li>
<li><p>了解性能相关的知识点。 积累多个知识体系是高级程序员的必备技术。</p>
<p><strong>学习一定要以市场需求为导向，切忌闭门造车</strong></p>
</li>
</ol>
<hr>
<h1 id="第二章-基本语法中的常用技术点精讲"><a href="#第二章-基本语法中的常用技术点精讲" class="headerlink" title="第二章 基本语法中的常用技术点精讲"></a>第二章 基本语法中的常用技术点精讲</h1><h2 id="数据类型，封装类"><a href="#数据类型，封装类" class="headerlink" title="数据类型，封装类"></a>数据类型，封装类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String num&#x3D;&quot;123&quot;;</span><br><span class="line">用封装类进行数据转换。</span><br><span class="line">int intval&#x3D;Integer.valuOf(num);</span><br></pre></td></tr></table></figure>

<h3 id="和equals的区别"><a href="#和equals的区别" class="headerlink" title="== 和equals的区别"></a>== 和equals的区别</h3><ol>
<li>对于基本数据类型（int等） ==  可以用来比较值是否相等。</li>
<li>对于引用类型和封装类型（如 Integer) == 是比较内存中存放的地址是否一致。而封装在Integer中的equals方法才用来比较值是否相等。</li>
</ol>
<p><strong>equals是判断两个变量或者实例指向同一个内存空间的值是不是相同</strong><br><strong>==是判断两个变量或者实例是不是指向同一个内存空间</strong></p>
<p>这里涉及JVM的相关知识：</p>
<p>​    基本数据类型和引用类型存放于栈中，引用指向的无法预测的数组和对象存放于堆中。</p>
<h3 id="流程控制时的注意要点"><a href="#流程控制时的注意要点" class="headerlink" title="流程控制时的注意要点"></a>流程控制时的注意要点</h3><ol>
<li><p>应避免短路现象。</p>
<p> 写代码时，应当只在条件表达式 [if（条件表达式）] 中做简单的判断操作，而不应该进行数值运算，从而避免在写代码时出现短路现象。要保证代码的可读性。</p>
</li>
<li><p>注意循环的边界值。</p>
</li>
<li><p>switch中，每个case分支都需要加上break跳出语句，最底部建议加上default。</p>
</li>
</ol>
<h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1：String str &#x3D; &quot;abc&quot;; &#x2F;&#x2F; 存储在常量池中。</span><br><span class="line">2：String str &#x3D; new Sting(&quot;abc&quot;); &#x2F;&#x2F;存储在堆中（对象）</span><br></pre></td></tr></table></figure>

<ol>
<li>尽可能使用常量，如1;        避免使用变量，如2；</li>
<li>尽量避免大规模针对String的（如连接字符串）操作，这样会频繁地生成内存碎片，导致内存性能问题。应使用StringBuilder对象来处理这样的问题。</li>
</ol>
<h4 id="String对象使用时的易错点"><a href="#String对象使用时的易错点" class="headerlink" title="String对象使用时的易错点"></a>String对象使用时的易错点</h4><ol>
<li>String的常量（不仅是String，Interger等常量也是）是放在常量池中的，值相同的常量是共享同一块内存的，通过 == 比较他们的内存地址是相同的。</li>
</ol>
]]></content>
      <categories>
        <category>Java面试准备</category>
        <category>Java核心技术及面试指南。</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试准备</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM总结-导出自思维导图</title>
    <url>/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/JVM%E6%80%BB%E7%BB%93-%E5%AF%BC%E5%87%BA%E8%87%AA%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><p><img src="/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/JVM%E6%80%BB%E7%BB%93-%E5%AF%BC%E5%87%BA%E8%87%AA%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/JVM.png"></p>
<h2 id="Java对象区域与Java对象创建方法"><a href="#Java对象区域与Java对象创建方法" class="headerlink" title="Java对象区域与Java对象创建方法"></a>Java对象区域与Java对象创建方法</h2><h3 id="Java对象区域"><a href="#Java对象区域" class="headerlink" title="Java对象区域"></a>Java对象区域</h3><ul>
<li><p>Java堆 | 方法区</p>
</li>
<li><p>程序计数器</p>
</li>
<li><p>虚拟机栈</p>
<p>为虚拟机执行Java方法（即字节码）服务</p>
<ul>
<li><p>局部变量表</p>
<p>基本数据类型 (boolen、byte、char、short、int、 float、 long、double）<br>对象引用（reference类型，它不等于对象本身，可能是一个指向对象起始地址的指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）<br>returnAddress类型（指向了一条字节码指令的地址）</p>
</li>
</ul>
</li>
<li><p>本地方法栈</p>
<p>为虚拟机使用到的Native方法服务</p>
</li>
<li><p>运行时常量池</p>
</li>
<li><p>直接内存</p>
<p>NIO引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作</p>
</li>
</ul>
<h3 id="Java对象创建方法"><a href="#Java对象创建方法" class="headerlink" title="Java对象创建方法"></a>Java对象创建方法</h3><ul>
<li><strong>new关键字</strong> 这应该是我们最常见和最常用最简单的创建对象的方式。</li>
<li><strong>使用<code>newInstance()</code>方法</strong> 这里包括Class类的<code>newInstance()</code>方法和Constructor类的<code>newInstance()</code>方法（前者其实也是调用的后者）。</li>
<li><strong>使用<code>clone()</code>方法</strong> 要使用<code>clone()</code>方法我们必须实现实现Cloneable接口，用<code>clone()</code>方法创建对象并不会调用任何构造函数。即我们所说的浅拷贝。</li>
<li><strong>反序列化</strong> 要实现反序列化我们需要让我们的类实现<strong>Serializable接口</strong>。当我们序列化和反序列化一个对象，JVM会给我们创建一个单独的对象，在反序列化时，JVM创建对象并不会调用任何构造函数。即我们所说的深拷贝。</li>
</ul>
<h2 id="对象存活判定算法"><a href="#对象存活判定算法" class="headerlink" title="对象存活判定算法"></a>对象存活判定算法</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><ul>
<li><p>可作为GC Roots的对象</p>
<p><strong>虚拟机栈</strong>（栈帧中的局部变量表，Local Variable Table）中引用的对象。<br>方法区中类静态属性引用的对象。<br>方法区中常量引用的对象。<br>本地方法栈中JNI（即一般说的Native方法）引用的对象。</p>
</li>
</ul>
<h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h3><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><h3 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记-整理"></a>标记-整理</h3><h2 id="对象分配策略"><a href="#对象分配策略" class="headerlink" title="对象分配策略"></a>对象分配策略</h2><h3 id="对象优先在Eden区分配"><a href="#对象优先在Eden区分配" class="headerlink" title="对象优先在Eden区分配"></a>对象优先在Eden区分配</h3><h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><h3 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h3><p>对象在Survivor区中每“熬过”一次Minor GC，年龄就增加1岁</p>
<ul>
<li>参数-XX:MaxTenuringThreshold设置</li>
</ul>
<h3 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h3><p>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</p>
<h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><h2 id="FullGC触发条件"><a href="#FullGC触发条件" class="headerlink" title="FullGC触发条件"></a>FullGC触发条件</h2><h3 id="调用System-gc"><a href="#调用System-gc" class="headerlink" title="调用System.gc()"></a>调用System.gc()</h3><h3 id="老年代空间不足"><a href="#老年代空间不足" class="headerlink" title="老年代空间不足"></a>老年代空间不足</h3><h3 id="空间分配担保失败"><a href="#空间分配担保失败" class="headerlink" title="空间分配担保失败"></a>空间分配担保失败</h3><h3 id="JDK-1-7及以前的永久代空间不足"><a href="#JDK-1-7及以前的永久代空间不足" class="headerlink" title="JDK 1.7及以前的永久代空间不足"></a>JDK 1.7及以前的永久代空间不足</h3><p>​    永久代中存放的为一些class的信息、常量、静态变量等数据</p>
<h3 id="Concurrent-Mode-Failure"><a href="#Concurrent-Mode-Failure" class="headerlink" title="Concurrent Mode Failure"></a>Concurrent Mode Failure</h3><p>​    执行CMS GC的过程中同时有对象要放入老年代，而此时老年代空间不足</p>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><ul>
<li><p>启动类加载器（Bootstrap ClassLoader）</p>
</li>
<li><p>扩展类加载器（Extension ClassLoader）</p>
</li>
<li><p>应用程序类加载器（Application ClassLoader）</p>
</li>
<li><p>优点</p>
<p>虚拟机只有在两个类的类名相同且加载该类的加载器均相同的情况下才判定这是一个类。若不采用双亲委派机制，同一个类有可能被多个类加载器加载，这样该类会被识别为两个不同的类，相互赋值时会有问题。</p>
<p>双亲委派机制能保证多加载器加载某个类时，最终都是由一个加载器加载，确保最终加载结果相同。</p>
</li>
</ul>
<h3 id="线程上下文类加载器"><a href="#线程上下文类加载器" class="headerlink" title="线程上下文类加载器"></a>线程上下文类加载器</h3><p>getContextClassLoader()和 setContextClassLoader(ClassLoader cl)用来获取和设置线程的上下文类加载器。</p>
<ul>
<li><p>SPI</p>
<p>SPI 的接口是Java 核心库的一部分，是由引导类加载器加载的，而SPI 实现的 Java 类一般是由系统类加载器加载的。引导类加载器是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。</p>
<ul>
<li>父类加载器请求子类加载器去完成类加载器的动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器.</li>
</ul>
</li>
</ul>
<h2 id="7种垃圾回收器"><a href="#7种垃圾回收器" class="headerlink" title="7种垃圾回收器"></a>7种垃圾回收器</h2><h3 id="新生代-复制算法"><a href="#新生代-复制算法" class="headerlink" title="新生代 (复制算法)"></a>新生代 (复制算法)</h3><ul>
<li><p>Serial</p>
</li>
<li><p>ParNew</p>
</li>
<li><p>Parallel Scavenge</p>
<ul>
<li>吞吐量优先</li>
</ul>
</li>
</ul>
<h3 id="老年代-标记-整理"><a href="#老年代-标记-整理" class="headerlink" title="老年代 (标记-整理)"></a>老年代 (标记-整理)</h3><ul>
<li><p>Serial Old</p>
</li>
<li><p>Parallel Old</p>
<ul>
<li>吞吐量优先</li>
</ul>
</li>
<li><p>CMS (并发收集、低停顿)</p>
<ul>
<li><p>cpu资源敏感</p>
</li>
<li><p>浮动垃圾</p>
<p>+CMSScanvengeBeforeRemark：在执行remark操作之前先做一次Young GC<br>+CMSFullGCBeforeCompaction：对内存做压缩</p>
</li>
<li><p>空间碎片</p>
</li>
</ul>
</li>
</ul>
<h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><ul>
<li>横跨整个堆内存，独立区域（Region）</li>
<li>建立可预测的时间模型</li>
<li>避免全堆扫描——每个Region维护了一个与之对应的Remembered Set</li>
</ul>
<h3 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h3><p>并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。<br>并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行。而垃圾收集程序运行在另一个CPU上。</p>
<h3 id="Minor-GC-和-Full-GC"><a href="#Minor-GC-和-Full-GC" class="headerlink" title="Minor GC 和 Full GC"></a>Minor GC 和 Full GC</h3><p>新生代GC（Minor GC）：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。具体原理见上一篇文章。<br>老年代GC（Major GC / Full GC）：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</p>
<h2 id="如何进行GC优化"><a href="#如何进行GC优化" class="headerlink" title="如何进行GC优化"></a>如何进行GC优化</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMzY1OTU1NQ==&amp;mid=2247484236&amp;idx=1&amp;sn=b9743b2d7436f84e4617ff34e07abdd8&amp;chksm=96cd4300a1baca1635a137294bc93c518c033ce01f843c9e012a1454b9f3ea3158fa1412e9da&amp;scene=27&amp;ascene=0&amp;devicetype=android-24&amp;version=26060638&amp;nettype=WIFI&amp;abtest_cookie=BAABAAoACwASABMABAAjlx4AUJkeAFmZHgBomR4AAAA=&amp;lang=zh_CN&amp;pass_ticket=/+Lqr9N2EZtrEGLFo9vLA6Eqs89DSJ2CBKoAJFZ+BngphEP28dwmMQeSZcUB77qZ&amp;wx_header=1">https://mp.weixin.qq.com/s?__biz=MzIwMzY1OTU1NQ==&amp;mid=2247484236&amp;idx=1&amp;sn=b9743b2d7436f84e4617ff34e07abdd8&amp;chksm=96cd4300a1baca1635a137294bc93c518c033ce01f843c9e012a1454b9f3ea3158fa1412e9da&amp;scene=27&amp;ascene=0&amp;devicetype=android-24&amp;version=26060638&amp;nettype=WIFI&amp;abtest_cookie=BAABAAoACwASABMABAAjlx4AUJkeAFmZHgBomR4AAAA%3D&amp;lang=zh_CN&amp;pass_ticket=%2F%2BLqr9N2EZtrEGLFo9vLA6Eqs89DSJ2CBKoAJFZ%2BBngphEP28dwmMQeSZcUB77qZ&amp;wx_header=1</a></p>
<h2 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h2><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><ul>
<li>通过一个类的全限定名来获取定义此类的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时存储结构。</li>
<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul>
<li>文件格式验证</li>
<li>元数据验证</li>
<li>字节码验证</li>
<li>符号引用验证</li>
</ul>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li><p>为类变量分配内存</p>
<p>在方法区中分配，仅包括类变量（被static修饰的变量），而不包括实例变量</p>
</li>
<li><p>设置类变量初始值</p>
</li>
</ul>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>虚拟机将常量池内的符号引用替换为直接引用的过程</p>
<ul>
<li><p>7类符号引用</p>
<p>类或接口<br>字段<br>类方法（静态方法）<br>接口方法<br>方法类型<br>方法句柄<br>调用点限定符</p>
</li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>虚拟机执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p><em>XMind - Trial Version</em></p>
]]></content>
      <categories>
        <category>Java面试准备</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>集合总结-导自思维导图- 不断完善</title>
    <url>/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%B1%BB/%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93-%E5%AF%BC%E8%87%AA%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p><img src="/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%B1%BB/%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93-%E5%AF%BC%E8%87%AA%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/%E9%9B%86%E5%90%88.png"></p>
<h2 id="普通集合"><a href="#普通集合" class="headerlink" title="普通集合"></a>普通集合</h2><h3 id="List-–有序可重复"><a href="#List-–有序可重复" class="headerlink" title="List –有序可重复"></a>List –有序可重复</h3><ul>
<li>ArrayList</li>
<li>LinkedList</li>
<li>Vector</li>
</ul>
<h3 id="Set-–不可重复"><a href="#Set-–不可重复" class="headerlink" title="Set –不可重复"></a>Set –不可重复</h3><ul>
<li>HashSet</li>
<li>TreeSet</li>
<li>LinkedHashSet</li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li><p><strong>HashMap</strong></p>
<ul>
<li><p>回答思路（jdk1.7和1.8区别入手）</p>
<ul>
<li><p>数据结构（容量、加载因子、扩容阈值）</p>
<ul>
<li>【1.7】数组+链表 </li>
<li>【1.8】数组+链表+红黑树</li>
</ul>
</li>
<li><p>获取数据时</p>
<ul>
<li><p>hash值的计算方法</p>
<ul>
<li>【1.7】4次位移+5次异或运算</li>
<li>【1.8】1次位移+1次异或运算</li>
</ul>
</li>
<li><p>数据如何存放</p>
<ul>
<li><p>【1.7】数组+链表：数组冲突，放入到链表</p>
</li>
<li><p>【1.8】1.8数组+链表+红黑树：数组冲突，放入到链表，长度大于8时，放入红黑树</p>
<ul>
<li><p>为什么是8？</p>
<p>容器中节点分布在hash桶中的频率遵循泊松分布，桶的长度超过8的概率非常非常小</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>插入数据时</p>
<ul>
<li><p>计算hash值（扰动）</p>
</li>
<li><p>hash&amp;(length-1)计算数组位置</p>
</li>
<li><p>数组位置是否冲突</p>
<ul>
<li><p>数据存放在数组中</p>
</li>
<li><p>链表中</p>
<ul>
<li><p>是否需要树化</p>
<ul>
<li>插入后，是否需要扩容</li>
</ul>
</li>
</ul>
</li>
<li><p>红黑树中</p>
<ul>
<li>插入或者更新数据</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>扩容机制</p>
<ul>
<li><p>扩容后的计算方式</p>
<ul>
<li><p>【1.7】重新计算：hashCode() -&gt; 扰动 -&gt; hash&amp;(length-1)</p>
</li>
<li><p>【1.8】新位置=原位置 or 原位置+旧容量</p>
<ul>
<li>hash的新增位为0，新位置=原位置</li>
<li>hash的新增位为1，新位置=原位置+旧容量</li>
</ul>
</li>
</ul>
</li>
<li><p>转移数据方式</p>
<ul>
<li>【1.7】头插法</li>
<li>【1.8】尾插法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>TreeMap</p>
<ul>
<li><p>结构</p>
<ul>
<li>使用红黑树存储</li>
</ul>
</li>
</ul>
</li>
<li><p>LinkedHashMap</p>
<ul>
<li><p>结构</p>
<ul>
<li>LinkedHashMap继承自HashMap，具有HashMap的所有特性；</li>
<li>LinkedHashMap内部维护了一个双向链表存储所有的元素；</li>
<li>LinkedHashMap可以用来实现LRU缓存淘汰策略；</li>
</ul>
</li>
</ul>
</li>
<li><p>HashTable</p>
</li>
</ul>
<h2 id="线程安全集合"><a href="#线程安全集合" class="headerlink" title="线程安全集合"></a>线程安全集合</h2><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><ul>
<li><p>ConcurrentHashMap的key可以为空，HashTable不可以</p>
<ul>
<li>Hashtable使用的是安全失败机制（fail-safe）：无法判断对应的key是不存在还是为空</li>
</ul>
</li>
<li><p>安全失败机制（fail-safe）</p>
<ul>
<li>JUC使用这种机制：java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。</li>
</ul>
</li>
<li><p>快速失败（fail—fast）</p>
<ul>
<li>util下的集合使用这种机制：检测到 modCount！= expectedmodCount，就会抛出异常</li>
</ul>
</li>
<li><p>数据结构</p>
<ul>
<li><p>数组+链表（Segment+HashEntry）jdk1.7</p>
<ul>
<li><p>HashEntry和HashMap不同点：volatile去修饰了他的数据Value还有下一个节点next。</p>
</li>
<li><p>分段锁技术，其中 Segment 继承于 ReentrantLock</p>
</li>
<li><p>Segment默认值：16</p>
</li>
<li><p>get操作不需要加锁，为什么？</p>
<p><a href="https://juejin.im/entry/5b98b89bf265da0abd35034c">https://juejin.im/entry/5b98b89bf265da0abd35034c</a></p>
<ul>
<li>Node的元素val和指针next是用volatile修饰的，在多线程环境下线程A修改因为hash冲突修改结点的val或者新增节点的时候是对线程B可见的。</li>
</ul>
</li>
</ul>
</li>
<li><p>数组+链表+红黑树 jdk1.8</p>
<ul>
<li><p>CAS + synchronized</p>
</li>
<li><p>插入操作</p>
<ul>
<li>根据key计算hashCode</li>
<li>根据hashCode定位Node</li>
<li>判断是否需要初始化</li>
<li>如果没有冲突，直接采用CAS尝试写入，失败则自旋保证成功</li>
<li>如果当前位置的 hashcode == MOVED == -1，则需要进行扩容</li>
<li>如果超过8，则需要树化</li>
</ul>
</li>
<li><p>查询操作</p>
<ul>
<li>根据hashCode查询数组位置 -&gt; 如果是链表按照链表查找，如果是红黑树按照红黑树查找</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>乐观锁与悲观锁</p>
<ul>
<li>悲观锁：synchronized和ReentrantLock</li>
<li>乐观锁：CAS，Version</li>
</ul>
</li>
</ul>
<h3 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h3><ul>
<li><p>结构</p>
<ul>
<li>继承BlockingQueue</li>
<li>数组结构</li>
<li>使用ReentrantLock加锁</li>
<li>使用notFull和notEmpty控制阻塞</li>
<li>使用takeIndex和putIndex游标定位</li>
</ul>
</li>
</ul>
<h3 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h3><ul>
<li><p>结构</p>
<ul>
<li>继承BlockingQueue</li>
<li>单链表结构</li>
<li>使用ReentrantLock加锁</li>
<li>使用notFull和notEmpty控制阻塞</li>
</ul>
</li>
</ul>
<blockquote>
<p>ArrayBlockingQueue和LinkedBlockingQueue都是使用notFull和notEmpty控制安全</p>
</blockquote>
<h3 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h3><ul>
<li><p>结构</p>
<ul>
<li>继承BlockingQueue</li>
<li>数组结构</li>
<li>使用ReentrantLock加锁</li>
<li>使用notEmpty控制阻塞</li>
<li>使用二叉堆结构</li>
</ul>
</li>
</ul>
<h3 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h3><h3 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h3><ul>
<li><p>结构</p>
<ul>
<li>不继承BlockingQueue</li>
<li>不是阻塞队列</li>
<li>不能用于线程池</li>
<li>线程安全</li>
<li>使用CAS+自旋加锁</li>
</ul>
</li>
</ul>
<h3 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h3><h3 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h3><h3 id="LinkedTransferQueue"><a href="#LinkedTransferQueue" class="headerlink" title="LinkedTransferQueue"></a>LinkedTransferQueue</h3><h2 id="集合的架构图"><a href="#集合的架构图" class="headerlink" title="集合的架构图"></a>集合的架构图</h2><p><a href="https://blog.csdn.net/feiyanaffection/article/details/81394745">https://blog.csdn.net/feiyanaffection/article/details/81394745</a></p>
<p><em>XMind - Trial Version</em></p>
]]></content>
      <categories>
        <category>Java面试准备</category>
        <category>集合框架类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>集合框架类</tag>
        <tag>Java面试准备</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot：内置tomcat启动和外部tomcat部署总结：</title>
    <url>/2020/11/18/Spring%E7%B3%BB%E5%88%97%E6%A1%86%E6%9E%B6/SpringBoot/Spring-Boot%EF%BC%9A%E5%86%85%E7%BD%AEtomcat%E5%90%AF%E5%8A%A8%E5%92%8C%E5%A4%96%E9%83%A8tomcat%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93%EF%BC%9A/</url>
    <content><![CDATA[<h1 id="Spring-Boot：内置tomcat启动和外部tomcat部署总结"><a href="#Spring-Boot：内置tomcat启动和外部tomcat部署总结" class="headerlink" title="Spring Boot：内置tomcat启动和外部tomcat部署总结"></a>Spring Boot：内置tomcat启动和外部tomcat部署总结</h1><p>springboot的web项目的启动主要分为：内置Tomcat启动和外部Tomcat启动。</p>
<h1 id="使用内置tomcat启动"><a href="#使用内置tomcat启动" class="headerlink" title="使用内置tomcat启动"></a>使用内置tomcat启动</h1><h2 id="启动方式："><a href="#启动方式：" class="headerlink" title="启动方式："></a>启动方式：</h2><p>1、IDEA中main函数启动</p>
<p>2、mvn springboot-run 命令</p>
<p>3、java -jar XXX.jar</p>
<h2 id="配置内置tomcat属性："><a href="#配置内置tomcat属性：" class="headerlink" title="配置内置tomcat属性："></a>配置内置tomcat属性：</h2><p>关于Tomcat的属性都在org.springframework.boot.autoconfigure.web.ServerProperties配置类中做了定义，我们只需在application.properties配置属性做配置即可。通用的Servlet容器配置都已”server”左右前缀，而Tomcat特有配置都以”server.tomcat”作为前缀。下面举一些常用的例子。</p>
<h3 id="配置Servlet容器："><a href="#配置Servlet容器：" class="headerlink" title="配置Servlet容器："></a>配置Servlet容器：</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置程序端口，默认为8080</span></span><br><span class="line"><span class="string">server.port=</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">#用户绘画session过期时间，以秒为单位</span></span><br><span class="line"><span class="string">server.session.timeout=</span></span><br><span class="line"><span class="comment"># 配置默认访问路径，默认为/</span></span><br><span class="line"><span class="string">server.context-path=</span></span><br></pre></td></tr></table></figure>

<h3 id="配置Tomcat："><a href="#配置Tomcat：" class="headerlink" title="配置Tomcat："></a>配置Tomcat：</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置Tomcat编码,默认为UTF-8</span></span><br><span class="line"><span class="string">server.tomcat.uri-encoding=UTF-8</span></span><br><span class="line"><span class="comment"># 配置最大线程数</span></span><br><span class="line"><span class="string">server.tomcat.max-threads=1000</span></span><br></pre></td></tr></table></figure>



<h1 id="使用外置tomcat部署"><a href="#使用外置tomcat部署" class="headerlink" title="使用外置tomcat部署"></a>使用外置tomcat部署</h1><h2 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h2><h3 id="继承SpringBootServletInitializer"><a href="#继承SpringBootServletInitializer" class="headerlink" title="继承SpringBootServletInitializer"></a>继承SpringBootServletInitializer</h3><ul>
<li>外部容器部署的话，就不能依赖于Application的main函数了，而是要以类似于web.xml文件配置的方式来启动Spring应用上下文，此时我们需要在启动类中继承SpringBootServletInitializer并实现configure方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjt.chapter05;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter05Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(Chapter05Application.class);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter05Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类的作用与在web.xml中配置负责初始化Spring应用上下文的监听器作用类似，只不过在这里不需要编写额外的XML文件了。</p>
<h3 id="pom-xml修改tomcat相关的配置"><a href="#pom-xml修改tomcat相关的配置" class="headerlink" title="pom.xml修改tomcat相关的配置"></a>pom.xml修改tomcat相关的配置</h3><p>　　<em>首先介绍下maven中scope依赖范围的概念，因为后续涉及到这个会有问题。</em></p>
<p>　　<em>依赖范围就是用来控制依赖和三种classpath(编译classpath，测试classpath、运行classpath)的关系，Maven有如下几种依赖范围：</em></p>
<ul>
<li><em>compile:编译依赖范围。如果没有指定，就会默认使用该依赖范围。使用此依赖范围的Maven依赖，对于编译、测试、运行三种classpath都有效。典型的例子是spring-code,在编译、测试和运行的时候都需要使用该依赖。</em></li>
<li><em>test: 测试依赖范围。使用次依赖范围的Maven依赖，只对于测试classpath有效，在编译主代码或者运行项目的使用时将无法使用此依赖。典型的例子是Jnuit,它只有在编译测试代码及运行测试的时候才需要。</em></li>
<li><em>provided:已提供依赖范围。使用此依赖范围的Maven依赖，对于编译和测试classpath有效，但在运行时候无效。典型的例子是servlet-api,编译和测试项目的时候需要该依赖，但在运行项目的时候，由于容器以及提供，就不需要Maven重复地引入一遍。</em></li>
</ul>
<p>如果要将最终的打包形式改为war的话，还需要对pom.xml文件进行修改，因为spring-boot-starter-web中包含内嵌的tomcat容器，所以直接部署在外部容器会冲突报错。这里有两种方法可以解决，如下</p>
<ol>
<li>方法一：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里需要移除对嵌入式Tomcat的依赖，这样打出的war包中，在lib目录下才不会包含Tomcat相关的jar包，否则将会出现启动错误。</p>
<p>还有一个很关键的关键点，就是tomcat-embed-jasper中scope必须是provided。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为SpringBootServletInitializer需要依赖  javax.servlet，而tomcat-embed-jasper下面的tomcat-embed-core中就有这个javax.servlet，如果没用provided，最终打好的war里面会有servlet-api这个jar，这样就会跟tomcat本身的冲突了。这个关键点同样适应于下面说的第二种方法。</p>
<ol start="2">
<li>方法二：</li>
</ol>
<p>直接添加如下配置即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--部署成war包时开启↓↓↓↓--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--部署成war包时开启↑↑↑↑--&gt;</span></span><br></pre></td></tr></table></figure>

<p>provided的作用上面已经介绍的很透彻了，这里就不啰嗦了，这种方式的好处是，打包的war包同时适合java -jar命令启动以及部署到外部容器中。</p>
<h3 id="由jar变成war"><a href="#由jar变成war" class="headerlink" title="由jar变成war"></a>由jar变成war</h3><p><packaging>war</packaging></p>
<h3 id="注意的问题"><a href="#注意的问题" class="headerlink" title="注意的问题"></a>注意的问题</h3><p>此时打成的包的名称应该和application.properties的 </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.context-path</span>=<span class="string">/test</span></span><br></pre></td></tr></table></figure>

<p>保持一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>test<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不一样发布到tomcat的webapps下上下文会变化</p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>理解ClassNotFoundException与NoClassDefFoundError的区别</title>
    <url>/2020/11/19/Java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JVM/%E7%90%86%E8%A7%A3ClassNotFoundException%E4%B8%8ENoClassDefFoundError%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="理解ClassNotFoundException与NoClassDefFoundError的区别"><a href="#理解ClassNotFoundException与NoClassDefFoundError的区别" class="headerlink" title="理解ClassNotFoundException与NoClassDefFoundError的区别"></a>理解ClassNotFoundException与NoClassDefFoundError的区别</h1><p>上篇文章已经介绍过Java的类加载机制，在类加载的过程中我们最常遇到的异常就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassNotFoundException</span><br><span class="line">NoClassDefFoundError</span><br></pre></td></tr></table></figure>

<p>但是你知道他们的区别吗？以及什么情况下发生上面的异常？ 如果你还不清楚，那么不着急，我们来仔细分析一下：</p>
<p>先来说说第一个异常提示名字已经非常友好了，就是告诉我们使用类加载器就加载某个类的时候，发现所有的path下面都没有找到，从引导类路径，扩展类路径到当前的classpath下全部没有找到，就会抛出上面的异常，最常见的例子就是加载JDBC驱动包的时候，它的依赖jar并不在classpath里面，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> class_loader.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class.forName(<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就会抛出异常ClassNotFoundException：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ClassNotFoundException: oracle.jdbc.driver.OracleDriver</span><br><span class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">381</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">424</span>)</span><br><span class="line">    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="number">331</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">357</span>)</span><br><span class="line">    at java.lang.Class.forName0(Native Method)</span><br><span class="line">    at java.lang.Class.forName(Class.java:<span class="number">264</span>)</span><br><span class="line">    at class_loader.exception.ExceptionTest.main(ExceptionTest.java:<span class="number">8</span>)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class="number">147</span>)</span><br></pre></td></tr></table></figure>

<p>这种情况下，其实就是类找不到，通常在执行下面的方法时容易抛出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(),</span><br><span class="line">ClassLoader.loadClass()  </span><br><span class="line">ClassLoader.findSystemClass()</span><br></pre></td></tr></table></figure>

<p>接着我们看NoClassDefFoundError这个异常，严格来说不能叫异常，这种级别属于JVM的ERROR错误了，其严重级别要更高。</p>
<p>这个错误，主要有两种情况：</p>
<p>（1）编译时存在某个类，但是运行时却找不到，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;A hello&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         A a=<span class="keyword">new</span> A();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的Java类编译后会生成两个类文件，一个A.class,一个B.class，现在我在编译后，删掉了A的class文件，然后直接执行B的main方法，就会抛出 NoClassDefFoundError错误，因为当执行到 A a=new  A();这一步的时候，jvm认为这个类肯定在当前的classpath里面的，要不然编译都不会通过，更不用提执行了。既然它存在，那么在jvm里面一定能找到，如果不能找到，那就说明出大事了，因为编译和运行不一致，所以直接抛出这个ERROR，代表问题很严重。</p>
<p>（2）第二种情况，类根本就没有初始化成功，结果你还把它当做正常类使用，所以这事也不小，必须抛出ERROR告诉你不能再使用了。</p>
<p>看下面的一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Loading</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> i=<span class="number">1</span>/<span class="number">0</span>;<span class="comment">//故意使得类初始化失败.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> i=Loading.i;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">        <span class="comment">//此处，必须用Throwable，用Exception会直接退出.</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//继续使用.</span></span><br><span class="line">        Loading.print();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: Could not initialize class class_loader.exception.Loading</span><br><span class="line">java.lang.ExceptionInInitializerError</span><br><span class="line">    at class_loader.exception.NoClassFoundErrorTest.main(NoClassFoundErrorTest.java:18)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)</span><br></pre></td></tr></table></figure>

<p>注意这种情况比较特殊，并不是因为编译时和运行时环境不一致导致的，而是对于一个类如果初始化失败后，你还继续使用，那么JVM会认为是不正常的，由于它第一次调用已经失败，JVM就会假设后面继续调用肯定仍然会失败，所以直接抛ERROR给客户端。</p>
<p>这里需要注意，类初始化失败的异常是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.ExceptionInInitializerError</span><br></pre></td></tr></table></figure>

<p>也是一个严重级别的错误。</p>
<p>总结：</p>
<p>本文主要对比介绍了ClassNotFoundException与NoClassDefFoundError的区别和发生条件，从上面的测试我们可以分析出，直接采用反射或者类加载器的loadClass方法去动态加载一个所有classpath里面的都不存在的类，类加载器在运行时的load阶段就会直接抛出ClassNotFoundException异常。此外jvm认为这个异常是可以被预知的需要提前被check。对于另一种请情况，如果在编译时候正常，但在运行时执行new关键词的时候，发现依赖类找不到，或者是对于初始化失败的一个类，再次访问其静态成员或者方法，那么会直接抛出NoClassDefFoundError错误。这两种异常本质上的侧重点还是不一样的，前者侧重在类加载器加载阶段找不到类信息，后者则侧重在使用阶段时却出现了问题比如实例化依赖类找不到或者类本身就初始化失败了。</p>
]]></content>
      <categories>
        <category>Java面试准备</category>
        <category>类加载机制</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Java类加载机制</tag>
      </tags>
  </entry>
  <entry>
    <title>利用start.spring.io网站快速创建Spring项目Demo</title>
    <url>/2020/11/18/Spring%E7%B3%BB%E5%88%97%E6%A1%86%E6%9E%B6/SpringBoot/%E5%88%A9%E7%94%A8start-spring-io%E7%BD%91%E7%AB%99%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BASpring%E9%A1%B9%E7%9B%AEDemo/</url>
    <content><![CDATA[<h2 id="登录-start-spring-io网站可以快速创建Spring项目Demo"><a href="#登录-start-spring-io网站可以快速创建Spring项目Demo" class="headerlink" title="登录 start.spring.io网站可以快速创建Spring项目Demo"></a>登录 start.spring.io网站可以快速创建Spring项目Demo</h2><p><img src="/2020/11/18/Spring%E7%B3%BB%E5%88%97%E6%A1%86%E6%9E%B6/SpringBoot/%E5%88%A9%E7%94%A8start-spring-io%E7%BD%91%E7%AB%99%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BASpring%E9%A1%B9%E7%9B%AEDemo/123.jpg"></p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot 打包成jar部署并运行</title>
    <url>/2020/11/18/Spring%E7%B3%BB%E5%88%97%E6%A1%86%E6%9E%B6/SpringBoot/spring-boot-%E6%89%93%E5%8C%85%E6%88%90jar%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="spring-boot-打包成jar并部署运行"><a href="#spring-boot-打包成jar并部署运行" class="headerlink" title="spring boot 打包成jar并部署运行"></a>spring boot 打包成jar并部署运行</h1><p><strong>前言:spring boot 一般作为spring could 子项目，一般使用的是jar的方式进行部署，用war的方式很少，因为其本身集成了tomcat插件，也有使用哪种组合部署的方式，这里我们介绍jar的方式</strong></p>
<h2 id="maven-打包的形式"><a href="#maven-打包的形式" class="headerlink" title="maven 打包的形式"></a>maven 打包的形式</h2><ol>
<li><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-restful<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-restful :: Spsringboot 实现 Restful 服务，基于 HTTP / JSON 传输 Demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!---定义成jar的方式--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后再pom文件中定义启动的类的名称就是应用程序，启动的入口类</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.spring.springboot.Application<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>之后再定义spring boot 的入口类的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.spring.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.spring.springboot.dao.CityDao;</span><br><span class="line"><span class="keyword">import</span> org.spring.springboot.domain.City;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Boot 应用启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by bysocket on 16/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Spring Boot 应用的标识</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// mapper 接口类扫描包配置</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;org.spring.springboot.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 程序启动入口</span></span><br><span class="line">        <span class="comment">// 启动嵌入式的 Tomcat 并初始化 Spring 环境及其各 Spring 组件</span></span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//为了打包springboot项目</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(<span class="keyword">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要就是继承SpringBootServletInitializer 和重写 configure方法</p>
<ol start="4">
<li><p>然后到项目的pom平级的目录下面</p>
<p>使用mvn clean package 命令打包成jar</p>
</li>
</ol>
<h2 id="执行项目"><a href="#执行项目" class="headerlink" title="执行项目"></a>执行项目</h2><p>到打包成的jar目录下面执行</p>
<p>java -jar xxx.jar</p>
<p>即可执行 项目了</p>
<p>​    </p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>项目部署</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 实践 Mapper 与 DAO</title>
    <url>/2020/10/28/MyBatis/MyBatis%20%E5%AE%9E%E8%B7%B5%20%20-Mapper%E4%B8%8EDAO/</url>
    <content><![CDATA[<h1 id="MyBatis-实践-Mapper与DAO"><a href="#MyBatis-实践-Mapper与DAO" class="headerlink" title="MyBatis 实践  -Mapper与DAO"></a>MyBatis 实践  -Mapper与DAO</h1><p>标签： Java与存储</p>
<hr>
<h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><p><strong>MyBatis</strong>前身是<strong>iBatis</strong>,是一个基于Java的<strong>数据持久层/对象关系映射(ORM)框架</strong>. </p>
<p><img src="https://mybatis.org/images/mybatis-logo.png"></p>
<p> MyBatis是对JDBC的封装,使开发人员只需关注SQL本身,而不需花费过多的精力去处理如<strong>注册驱动</strong>、<strong>设置参数</strong>、<strong>创建<code>Connection</code>/<code>Statement</code>**、</strong>解析结果集**等JDBC过程性代码.MyBatis基于XML/注解的方式配置<code>Statement</code>,执行SQL,并将执行结果映射成Java对象, 大大降低了数据库开发的难度.</p>
<blockquote>
<p>MyBatis is a first class persistence framework with support for  custom SQL, stored procedures and advanced mappings. MyBatis eliminates  almost all of the JDBC code and manual setting of parameters and  retrieval of results. MyBatis can use simple XML or Annotations for  configuration and map primitives, Map interfaces and Java POJOs (Plain  Old Java Objects) to database records.<br> – MyBatis<a href="https://github.com/mybatis/mybatis-3">项目地址</a>/<a href="http://www.mybatis.org/mybatis-3/">在线文档</a>.</p>
</blockquote>
<hr>
<h2 id="初识MyBatis"><a href="#初识MyBatis" class="headerlink" title="初识MyBatis"></a>初识MyBatis</h2><p>使用MyBatis需要在pom.xml中添加如下依赖:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.16&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><ul>
<li>配置mybatis/<strong>mybatis-configuration.xml</strong><br> 作为MyBatis的全局配置文件,其配置了MyBatis的运行环境信息(如数据源/mapper文件等).</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;environments default&#x3D;&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id&#x3D;&quot;development&quot;&gt;</span><br><span class="line">            &lt;!-- 配置JDBC事务管理--&gt;</span><br><span class="line">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">            &lt;!-- 配置数据源--&gt;</span><br><span class="line">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;host:port&#x2F;db?characterEncoding&#x3D;utf-8&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;username&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;password&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;dataSource&gt;</span><br><span class="line">        &lt;&#x2F;environment&gt;</span><br><span class="line">    &lt;&#x2F;environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 加载mapper映射文件 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource&#x3D;&quot;mybatis&#x2F;mapper&#x2F;UserDAO.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>书写UserDAO(mapper映射)<br> 最为MyBatis最核心的部分,配置了操作数据库的<strong>SQL语句</strong>:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;namespace&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;selectUserById&quot; parameterType&#x3D;&quot;java.lang.Integer&quot; resultType&#x3D;&quot;com.fq.domain.User&quot;&gt;</span><br><span class="line">        SELECT * FROM user WHERE id &#x3D; #&#123;id&#125;;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;selectUserByName&quot; parameterType&#x3D;&quot;java.lang.String&quot; resultType&#x3D;&quot;com.fq.domain.User&quot;&gt;</span><br><span class="line">        SELECT * FROM user WHERE name LIKE &#39;%$&#123;value&#125;%&#39;;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>namespace</code></td>
<td>命名空间,用于隔离SQL语句</td>
</tr>
<tr>
<td><code>parameterType</code></td>
<td>定义SQL输入映射类型,MyBatis通过**<em>OGNL**</em>从输入对象中获取参数传入SQL语句.</td>
</tr>
<tr>
<td><code>resultType</code></td>
<td>定义SQL输出映射类型,MyBatis将SQL查询结果的<strong>一行记录</strong>映射为<code>resultType</code>指定的类型.</td>
</tr>
</tbody></table>
<blockquote>
<p>mapper映射文件名有<em>UserDAO.xml</em>/<em>UserMapper.xml</em>/<em>User.xml</em>等几种形式, 其一般存放在与mybatis-configuration.xml同级的mapper目录下,由于其主要作用为定义SQL语句与映射关系, 因此一般统称为**<em>mapper映射文件**</em>.</p>
</blockquote>
<ul>
<li>定义PO类<br> PO类主要作用为SQL(输入/输出)映射,通常与数据库表对应:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zhanghao</span><br><span class="line"> * @since 15&#x2F;12&#x2F;31 下午2:27.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    private Integer id;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(Integer id, String name, String password) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39; &#39;&#39; +</span><br><span class="line">                &quot;, password&#x3D;&#39;&quot; + password + &#39; &#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDAO(Java对象)<br> 获得SqlSession,执行SQL语句, 得到映射结果:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zhanghao</span><br><span class="line"> * @since 16&#x2F;2&#x2F;24 下午6:15.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class UserDAO &#123;</span><br><span class="line"></span><br><span class="line">    private SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setUp() throws IOException &#123;</span><br><span class="line">        String resource &#x3D; &quot;mybatis&#x2F;mybatis-configuration.xml&quot;;</span><br><span class="line">        factory &#x3D; new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(resource));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void selectUserById() &#123;</span><br><span class="line">        try (SqlSession session &#x3D; factory.openSession()) &#123;</span><br><span class="line">            User user &#x3D; session.selectOne(&quot;namespace.selectUserById&quot;, 1);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void selectUserByName() &#123;</span><br><span class="line">        try (SqlSession session &#x3D; factory.openSession()) &#123;</span><br><span class="line">            List&lt;User&gt; users &#x3D; session.selectList(&quot;namespace.selectUserByName&quot;, &quot;student&quot;);</span><br><span class="line">            for (User user : users) &#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><ul>
<li>mapper</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;insertUser&quot; parameterType&#x3D;&quot;com.fq.domain.User&quot;&gt;</span><br><span class="line">    INSERT INTO user(name, password) VALUES(#&#123;name&#125;, #&#123;password&#125;);</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDAO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void insertUser() &#123;</span><br><span class="line">    try (SqlSession session &#x3D; factory.openSession()) &#123;</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setName(&quot;new_name1&quot;);</span><br><span class="line">        user.setPassword(&quot;new_password&quot;);</span><br><span class="line">        session.insert(&quot;namespace.insertUser&quot;, user);</span><br><span class="line">        session.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="自增主键返回"><a href="#自增主键返回" class="headerlink" title="自增主键返回"></a>自增主键返回</h3><p>修改mapper文件,添加<selectKey>,可以将MySQL的自增主键(即刚刚插入数据时生成的ID)返回:</selectKey></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;insertUser&quot; parameterType&#x3D;&quot;com.fq.domain.User&quot;&gt;</span><br><span class="line">    &lt;selectKey keyProperty&#x3D;&quot;id&quot; order&#x3D;&quot;AFTER&quot; resultType&#x3D;&quot;java.lang.Integer&quot;&gt;</span><br><span class="line">        SELECT LAST_INSERT_ID();</span><br><span class="line">    &lt;&#x2F;selectKey&gt;</span><br><span class="line">    INSERT INTO user(name, password) VALUES(#&#123;name&#125;, #&#123;password&#125;);</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>keyProperty</code></td>
<td>指定存储到DO中的哪个属性;</td>
</tr>
<tr>
<td><code>order</code></td>
<td><code>selectKey</code>执行顺序(相对于<code>insert</code>语句),<code>AFTER</code>/<code>BEFORE</code>;</td>
</tr>
<tr>
<td><code>resultType</code></td>
<td>主键返回类型(DO中对应属性的类型);</td>
</tr>
<tr>
<td><code>LAST_INSERT_ID()</code></td>
<td>MySQL函数,返回**<em>auto_increment **</em>自增列新记录值.</td>
</tr>
</tbody></table>
<ul>
<li>UserDAO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void insertUser() &#123;</span><br><span class="line">    try (SqlSession session &#x3D; factory.openSession()) &#123;</span><br><span class="line">        System.out.println(session);</span><br><span class="line">        User user &#x3D; new User(null, &quot;new_name&quot;, &quot;new_password&quot;);</span><br><span class="line">        session.insert(&quot;namespace.insertUser&quot;, user);</span><br><span class="line">        &#x2F;&#x2F; 需要在commit之后才能获得自增主键</span><br><span class="line">        session.commit();</span><br><span class="line">        System.out.println(user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该功能还可以通过<insert>的useGeneratedKeys/keyProperty两个属性合作完成, 详见<a href="http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html#insert_update_and_delete">MyBatis文档</a>.</insert></p>
</blockquote>
<hr>
<h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><ul>
<li>mapper</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;updateUserById&quot; parameterType&#x3D;&quot;com.fq.domain.User&quot;&gt;</span><br><span class="line">    UPDATE user SET name &#x3D; #&#123;name&#125;, password &#x3D; #&#123;password&#125; WHERE id &#x3D; #&#123;id&#125;;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDAO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void updateUserById() &#123;</span><br><span class="line">    try (SqlSession session &#x3D; factory.openSession(true)) &#123;</span><br><span class="line">        session.update(&quot;namespace.updateUserById&quot;,</span><br><span class="line">                new User(1, &quot;feiqing&quot;, &quot;ICy5YqxZB1uWSwcVLSNLcA&#x3D;&#x3D;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;1234567</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><ul>
<li>mapper</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;delete id&#x3D;&quot;deleteUserById&quot; parameterType&#x3D;&quot;java.lang.Integer&quot;&gt;</span><br><span class="line">    DELETE FROM user WHERE id &#x3D; #&#123;id&#125;;</span><br><span class="line">&lt;&#x2F;delete&gt;123</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDAO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void deleteUserById() &#123;</span><br><span class="line">    try (SqlSession session &#x3D; factory.openSession(true)) &#123;</span><br><span class="line">        session.delete(&quot;namespace.deleteUserById&quot;, 51615);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li><code>#&#123;&#125;</code>/<code>$&#123;&#125;</code><ul>
<li><code>#&#123;&#125;</code>: 表示一个占位符号,实现向<code>PreparedStatement</code>占位符中设置值(<code>#&#123;&#125;</code>表示一个占位符<code>?</code>),自动进行Java类型到JDBC类型的转换(因此<code>#&#123;&#125;</code>可以有效防止SQL注入).<code>#&#123;&#125;</code>可以接收简单类型或PO属性值,如果<code>parameterType</code>传输的是单个简单类型值,<code>#&#123;&#125;</code>花括号中可以是<code>value</code>或其它名称.</li>
<li><code>$&#123;&#125;</code>: 表示拼接SQL串,通过<code>$&#123;&#125;</code>可将<code>parameterType</code>内容**<em>拼接**</em>在SQL中而<em>不进行JDBC类型转换</em>,<code>$&#123;&#125;</code>可以接收简单类型或PO属性值,如果<code>parameterType</code>传输的是单个简单类型值,<code>$&#123;&#125;</code>花括号中只能是<code>value</code>.<br> 虽然<code>$&#123;&#125;</code>不能防止SQL注入,但有时<code>$&#123;&#125;</code>会非常方便(如<code>order by</code>排序,需要将列名通过参数传入SQL,则用<code>ORDER BY $&#123;column&#125;</code>,使用<code>#&#123;&#125;</code>则无法实现此功能(详见<a href="http://blog.csdn.net/zjf280441589/article/details/50714873">JDBC基础</a>关于<code>PreparedStatement</code>的讨论).</li>
</ul>
</li>
<li><code>SqlSession</code><br> 提供操作数据库的方法(如:<code>selectOne</code>/<code>selectList</code>).但<code>SqlSession</code>是线程不安全的,因此最好将其定义成局部变量使用.</li>
<li>MyBatis优点(与JDBC相比) <ul>
<li>SQL写在Java代码中导致不易维护, 而MyBatis将SQL写在mapper中,XML与Java代码分离.</li>
<li>向SQL语句传参繁琐(如:SQL的<strong>where条件</strong>不一,SQL数据类型与Java不同),MyBatis通过<code>parameterType</code>自动将Java对象映射至SQL语句.</li>
<li>结果集解析麻烦(SQL变化导致解析代码变化,SQL数据类型与Java不同),MyBatis通过<code>resultType</code>自动将SQL执行结果映射成Java对象.</li>
</ul>
</li>
</ul>
<hr>
<p>附: 最好在pom.xml中添加一个日志系统实现(logback/log4j), 这样会在调试程序时打印日志信息,便于查错, 以logback为例:</p>
<ul>
<li>pom.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>logback.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name&#x3D;&quot;logRoot&quot; value&#x3D;&quot;&#x2F;data&#x2F;logs&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;pattern&quot; value&#x3D;&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;0&#125; - %msg%n&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name&#x3D;&quot;STDOUT&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;pattern&#125;&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;logRoot&#125;&#x2F;common-server.%d&#123;yyyy-MM-dd&#125;.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;maxHistory&gt;7&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;pattern&#125;&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level&#x3D;&quot;DEBUG&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;STDOUT&quot;&#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;FILE&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其他关于MyBatis日志的详细信息可参考<a href="http://www.mybatis.org/mybatis-3/zh/logging.html">MyBatis文档日志部分</a>.</p>
</blockquote>
<hr>
<h2 id="DAO开发"><a href="#DAO开发" class="headerlink" title="DAO开发"></a>DAO开发</h2><p>使用MyBatis开发DAO有两个方法,<strong>原始DAO开发</strong>与<strong>Mapper映射DAO开发</strong>.</p>
<hr>
<h3 id="原始DAO开发"><a href="#原始DAO开发" class="headerlink" title="原始DAO开发"></a>原始DAO开发</h3><p>原始DAO开发需要开发人员编写<strong>DAO接口</strong>与<strong>DAO实现</strong>,如根据ID查询用户信息:</p>
<ul>
<li>mapper(同前)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectUserById&quot; parameterType&#x3D;&quot;java.lang.Integer&quot; resultType&#x3D;&quot;com.fq.domain.User&quot;&gt;</span><br><span class="line">    SELECT * FROM user WHERE id &#x3D; #&#123;id&#125;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDAO接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zhanghao</span><br><span class="line"> * @since 16&#x2F;2&#x2F;22 上午10:20.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface UserDAO &#123;</span><br><span class="line">    User selectUserById(Integer id) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDAO实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserDAOImpl implements UserDAO &#123;</span><br><span class="line"></span><br><span class="line">    private SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    public UserDAOImpl(SqlSessionFactory factory) &#123;</span><br><span class="line">        this.factory &#x3D; factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public User selectUserById(Integer id) throws Exception &#123;</span><br><span class="line">        SqlSession session &#x3D; factory.openSession();</span><br><span class="line">        User user &#x3D; session.selectOne(&quot;namespace.selectUserById&quot;, id);</span><br><span class="line">        session.close();</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Client</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyBatisClient &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void originalClient() throws Exception &#123;</span><br><span class="line">        UserDAO dao &#x3D; new UserDAOImpl(new SqlSessionFactoryBuilder().</span><br><span class="line">                build(ClassLoader.getSystemResourceAsStream(&quot;mybatis&#x2F;mybatis-configuration.xml&quot;)));</span><br><span class="line">        User user &#x3D; dao.selectUserById(1);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原始DAO开发中存在的问题: <ol>
<li>DAO实现方法体中存在很多过程性代码. </li>
<li>调用<code>SqlSession</code>的方法(<code>select</code>/<code>insert</code>/<code>update</code>)需要指定<em>Statement</em>的id,存在硬编码,不利于代码维护.</li>
</ol>
</li>
</ul>
<hr>
<h3 id="Mapper映射开发"><a href="#Mapper映射开发" class="headerlink" title="Mapper映射开发"></a>Mapper映射开发</h3><p>mapper映射开发方法只需编写DAO接口,MyBatis根据接口定义与mapper文件中的SQL语句动态创建接口实现.</p>
<ul>
<li>mapper</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.fq.mybatis.UserDAO&quot;&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;selectUserById&quot; parameterType&#x3D;&quot;java.lang.Integer&quot; resultType&#x3D;&quot;com.fq.domain.User&quot;&gt;</span><br><span class="line">        SELECT * FROM user WHERE id &#x3D; #&#123;id&#125;;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 此时<code>namespace</code>必须与<code>UserDAO</code>接口的全限定名相同.</p>
</blockquote>
<ul>
<li>UserDAO接口与前面相同, 但不再使用<code>UserDAOImpl</code></li>
<li>Client</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zhanghao</span><br><span class="line"> * @since 16&#x2F;2&#x2F;22 下午2:57.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyBatisClient &#123;</span><br><span class="line"></span><br><span class="line">    private SqlSession session;</span><br><span class="line"></span><br><span class="line">    private SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setUp() &#123;</span><br><span class="line">        factory &#x3D; new SqlSessionFactoryBuilder().</span><br><span class="line">                build(ClassLoader.getSystemResourceAsStream(&quot;mybatis&#x2F;mybatis-configuration.xml&quot;));</span><br><span class="line">        session &#x3D; factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void mapperClient() throws Exception &#123;</span><br><span class="line">        UserDAO dao &#x3D; session.getMapper(UserDAO.class);</span><br><span class="line">        User user &#x3D; dao.selectUserById(1);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After</span><br><span class="line">    public void tearDown() &#123;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>mapper映射开发方法需要遵循以下规范: <ol>
<li>mapper文件中的namespace与DAO接口的全限定名相同;</li>
<li>mapper文件中的<em>Statement</em>的id与DAO接口方法名相同;</li>
<li>mapper文件中的<em>Statement</em>的<code>parameterType</code>/<code>resultType</code>与DAO方法的入参/回参类型相同.</li>
</ol>
</li>
</ul>
</blockquote>
<hr>
<h2 id="Mapper映射"><a href="#Mapper映射" class="headerlink" title="Mapper映射"></a>Mapper映射</h2><p>mapper映射文件(如UserDAO.xml)主要作用是定义SQL语句(每个SQL是一个<em>Statement</em>),是MyBatis的核心.</p>
<blockquote>
<p>MyBatis官方推荐使用mapper映射的方法来开发DAO,因此我们以后就不再过多介绍原始DAO的开发.</p>
</blockquote>
<hr>
<h3 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h3><h4 id="多个形参"><a href="#多个形参" class="headerlink" title="多个形参"></a>多个形参</h4><p>传递简单类型前面示例已经使用过,在此就不再赘述.当需要传递多个形参时,不再需要设置<code>parameterType</code>参数:</p>
<ul>
<li>mapper</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;updateUserById&quot;&gt;</span><br><span class="line">    UPDATE user SET name &#x3D; #&#123;1&#125;, password &#x3D; #&#123;2&#125; WHERE id &#x3D; #&#123;0&#125;;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDAO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void updateUserById(Integer id, String name, String password) throws Exception;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="传入PO"><a href="#传入PO" class="headerlink" title="传入PO"></a>传入PO</h4><p>MyBatis使用<strong>OGNL</strong>表达式解析对象属性值:</p>
<ul>
<li>mapper</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectUserByNamePassword&quot; parameterType&#x3D;&quot;com.fq.domain.User&quot; resultType&#x3D;&quot;com.fq.domain.User&quot;&gt;</span><br><span class="line">    SELECT *</span><br><span class="line">    FROM user</span><br><span class="line">    WHERE name &#x3D; #&#123;name&#125; AND password &#x3D; #&#123;password&#125;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDAO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User selectUserByNamePassword(User user) throws Exception;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="传入Map"><a href="#传入Map" class="headerlink" title="传入Map"></a>传入Map</h4><ul>
<li>mapper</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectUserByMap&quot; parameterType&#x3D;&quot;java.util.Map&quot; resultType&#x3D;&quot;com.fq.domain.User&quot;&gt;</span><br><span class="line">    SELECT *</span><br><span class="line">    FROM user</span><br><span class="line">    WHERE name &#x3D; #&#123;name&#125; AND password &#x3D; #&#123;password&#125;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>#&#123;&#125;</code>花括号内对应<code>Map</code>的<code>key</code>.</p>
</blockquote>
<ul>
<li>UserDAO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User selectUserByMap(Map&lt;String, Object&gt; map) throws Exception;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h3><h4 id="输出简单类型"><a href="#输出简单类型" class="headerlink" title="输出简单类型"></a>输出简单类型</h4><ul>
<li>mapper</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectUserCount&quot; parameterType&#x3D;&quot;java.lang.String&quot; resultType&#x3D;&quot;java.lang.Integer&quot;&gt;</span><br><span class="line">    SELECT count(*)</span><br><span class="line">    FROM user</span><br><span class="line">    WHERE name LIKE &#39;%$&#123;value&#125;%&#39;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDAO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Integer selectUserCount(String name) throws Exception;1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>返回简单类型必须保证**<em>查询结果只有一行记录 **</em>,最终将第一个字段的值转换为输出类型.</p>
</blockquote>
<hr>
<h4 id="输出PO对象-列表"><a href="#输出PO对象-列表" class="headerlink" title="输出PO对象/列表"></a>输出PO对象/列表</h4><ul>
<li><p>前面已经演示过输出两种类型(  <code> selectUserById </code>  /<code>  selectUserByName</code>  虽然当时使用的是原始DAO开发方法, 但mapper定义形式大同小异),因此在这儿只做简单总结: </p>
<ol>
<li>输出单个PO对象和输出PO列表在mapper中定义的<code>resultType</code>是一样的;</li>
<li>输出单个PO对象要保证SQL查询结果为单条数据,其内部使用<code>selectOne</code>方法调用;</li>
<li>输出PO列表表示<strong>查询结果可能为多条</strong>,其内部使用<code>selectList</code>方法调用,接口返回值可用<code>List</code>/<code>Set</code>承载.</li>
</ol>
</li>
</ul>
<hr>
<h4 id="输出Map"><a href="#输出Map" class="headerlink" title="输出Map"></a>输出Map</h4><p>输出PO对象完全可以改用<code>Map</code>输出,<strong>字段名作key,字段值作value</strong>.</p>
<ul>
<li>mapper</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectUserLikeName&quot; resultType&#x3D;&quot;java.util.Map&quot;&gt;</span><br><span class="line">    SELECT *</span><br><span class="line">    FROM user</span><br><span class="line">    WHERE name LIKE &#39;%$&#123;value&#125;%&#39;;</span><br><span class="line">&lt;&#x2F;select&gt;12345</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDAO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectUserLikeName(String name) throws Exception;1</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p><code>resultType</code>可将查询结果映射为PO,但前提是<strong>PO属性名</strong>与<strong>SQL字段名</strong>必须一致,如不一致,则可通过<code>resultMap</code>作对应映射:</p>
<ul>
<li>mapper</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id&#x3D;&quot;userMap&quot; type&#x3D;&quot;com.fq.domain.User&quot;&gt;</span><br><span class="line">    &lt;id column&#x3D;&quot;user_id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;user_name&quot; property&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;user_password&quot; property&#x3D;&quot;password&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;selectUserByName&quot; parameterType&#x3D;&quot;java.lang.String&quot; resultMap&#x3D;&quot;userMap&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">        id       user_id,</span><br><span class="line">        name     user_name,</span><br><span class="line">        password user_password</span><br><span class="line">    FROM user</span><br><span class="line">    WHERE name &#x3D; #&#123;name&#125;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>id</code></td>
<td>表示查询结果集的唯一标识;</td>
</tr>
<tr>
<td><code>result</code></td>
<td>表示普通结果,即PO属性;</td>
</tr>
<tr>
<td><code>column</code></td>
<td>表示SQL查询出来的字段名,</td>
</tr>
<tr>
<td><code>property</code></td>
<td>表示PO属性.</td>
</tr>
</tbody></table>
<ul>
<li>UserDAO接口同前.</li>
</ul>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>项目实战</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客本地部署流程</title>
    <url>/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="hexo博客本地部署流程"><a href="#hexo博客本地部署流程" class="headerlink" title="hexo博客本地部署流程"></a>hexo博客本地部署流程</h1><p>一年前用hexo部署过博客，由于其他事情导致长时间未使用，后来又尝试了wordpress与typecho，但个人比较喜欢修改主题样式，感觉wordpress与typecho的封装性太强，于是又回来继续使用hexo。记录自己重新部署hexo的过程，更新以前的部署笔记，故有的时间显示为2019年，但流程都是一样的。</p>
<hr>
<h2 id="本地部署过程"><a href="#本地部署过程" class="headerlink" title="本地部署过程"></a>本地部署过程</h2><p>需要安装的东西：git、Node.js、hexo。</p>
<p>其中git安装完成后的Git Bash，其作用与系统自带的CMD命令行相同，系统中的CMD命令同样可以在Git Bash中完成。</p>
<p>链接：</p>
<ul>
<li><a href="https://git-scm.com/downloads">git官方下载地址</a></li>
<li><a href="https://npm.taobao.org/mirrors/git-for-windows/">git淘宝镜像下载地址</a></li>
<li><a href="https://nodejs.org/en/">Node.js官网下载地址</a></li>
</ul>
<p>hexo使用命令安装。</p>
<p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a>里面有关于hexo的各种使用方法，包括各个指令、文件的说明、如何更改网站的一些信息等等。</p>
<h2 id="hexo常用指令："><a href="#hexo常用指令：" class="headerlink" title="hexo常用指令："></a>hexo常用指令：</h2><p><code>hexo new &quot;title&quot;</code> 新建文章(md文件)，title为文章的标题<br> <code>hexo new page &quot;pagename&quot;</code> 新建网页，pagename为网页的名称<br> <code>hexo clean</code> 清除部署的緩存<br> <code>hexo n == hexo new</code> 新建一篇文章<br> <code>hexo g == hexo generate</code> 生成静态页面<br> <code>hexo s == hexo server</code> 本地部署，可预览网站，默认端口为4000，浏览器输入<code>localhost:4000</code>即可进入网站进行预览，回到git-bash按<code>ctrl+c</code>退出预览(退出后<code>localhost:4000</code>失效)<br> <code>hexo d == hexo deploy</code> 将网站部署到GitHub<br> <code>hexo g -d</code> 生成页面并部署到GitHub<br> <code>hexo g -s</code> 生成页面并本地部署进行预览</p>
<h2 id="安装git："><a href="#安装git：" class="headerlink" title="安装git："></a>安装git：</h2><p>本文章书写日期时最新版本为2.22.0版本</p>
<p>因版本可能不同，因此安装过程中的组件选择可能会有所差异，基本默认选项即可</p>
<p>下载完成后进入安装界面 (注:以下安装的选项请以实际自身需求为准，仅供参考):</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030720.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030720.png" alt="mark"></a></p>
<p>选择需要安装的组件。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030722.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030722.png" alt="mark"></a></p>
<p>选择git的默认编辑器:</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030724.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030724.png" alt="mark"></a></p>
<p>配置环境变量选项,推荐默认第二项:</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030721.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030721.png" alt="mark"></a></p>
<p>选择https传输协议 默认即可:</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030723.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030723.png" alt="mark"></a></p>
<p>选择git的换行方式 请根据自身需求更改:</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030725.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030725.png" alt="mark"></a></p>
<p>设置git命令行的样式:</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030726.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030726.png" alt="mark"></a></p>
<p>设置选项：1.是否允许文件缓存 2.是否允许git许可证管理，默认勾选：</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030740.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030740.png" alt="mark"></a></p>
<p>是否参与新的测试,貌似是会使git更快，但还不稳定:</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030727.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030727.png" alt="mark"></a></p>
<p>install 安装即可:</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030728.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030728.png" alt="mark"></a></p>
<p>git安装完成后，需要进行配置，在git安装目录或菜单栏中找到git-bash，打开后如图</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030737.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030737.png" alt="mark"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030729.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030729.png" alt="mark"></a></p>
<p>输入如下，其中” “中的your name 和your email为你的Git Hub用户名(非昵称)与邮箱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure>

<p>并可通过以下命令查询用户名与邮箱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030731.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030731.png" alt="mark"></a></p>
<h2 id="安装Node-js："><a href="#安装Node-js：" class="headerlink" title="安装Node.js："></a>安装Node.js：</h2><p>Node.js 不要用太高的版本，用 12.14即可。 最近hexo g的时候 用 14.14版本出现了一些问题。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030730.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030730.png" alt="mark"></a></p>
<p>安装界面:</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030732.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030732.png" alt="mark"></a></p>
<p>next即可:</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030733.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030733.png" alt="mark"></a></p>
<p>以下过程命令行既可使用windows的cmd，也可以使用git安装过程中的 git-bash进行操作</p>
<p>命令行中输入<code>node -v</code>可查看node的版本 ,输入 <code>npm -v</code>查看npm包的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030735.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030735.png" alt="mark"></a></p>
<p>因为npm为国外源，下载速度感人，故使用cnpm使下载指向国内源。</p>
<p>利用淘宝服务器安装cnpm ,因为翻使用npm墙慢. -g表示全局安装.  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>下载完后查看cnpm版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030734.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030734.png" alt="mark"></a></p>
<p>查询成功则证明安装完成。</p>
<h2 id="安装hexo："><a href="#安装hexo：" class="headerlink" title="安装hexo："></a>安装hexo：</h2><p>使用cnpm下载hexo,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>用hexo -v查看hexo的版本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030736.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030736.png" alt="mark"></a></p>
<h2 id="hexo部署博客："><a href="#hexo部署博客：" class="headerlink" title="hexo部署博客："></a>hexo部署博客：</h2><p>在我的电脑中创建文件夹用于存储博客网站，即网站的站点。文件夹名称自定义，我使用blog,目录为D:\blog。.如果后面操作有失误,直接把文件夹干掉重来即可.<br>打开blog文件夹，右键空白处点击Git Bash Here在该目录下打开Git Bash(或者用CMD切换到该目录也行)。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030738.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030738.png" alt="mark"></a></p>
<p><strong>Windows Linux</strong> 可以再CMD直接 <code>hexo init</code> (前提是git安装好,并添加进环境变量. cnmp也安装好)  </p>
<p>或者不配置 git path， 在git Bash 打开之后,就可以直接输入<code>hexo init</code>  之后要等待一段时间.在blog目录下面看到很多文件即可.</p>
<p>输入<code>hexo init</code>进行初始化，等待时间较长，约几分钟。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/image-20201107163932172.png" alt="image-20201107163932172"></p>
<p><strong>注</strong>：若blog文件夹非空，则会报错:</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030742.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030742.png" alt="mark"></a></p>
<blockquote>
<p>可选：安装组件。(这一步其实在 hexo init 的时候已经自动做好了。)</p>
<p>cnpm install hexo –save</p>
</blockquote>
<p>用 hexo s 启动本地服务 默认端口号是 4000 自动生成一个HelloWord的md文档,放在 blog\source_posts 下面.可以在这个文件夹下自己新建一个我的第一篇博客.md. 然后<br>   <code>hexo clean</code> 清除一下 <code>hexo g</code>    generated嘛 重新构建一下.就可以新建博客啦.!</p>
<p>使用<code>hexo s</code> 在本地启动博客</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/image-20201107164105344.png" alt="image-20201107164105344"></p>
<p>如图所示显示本地部署成功</p>
<p>打开网页，地址栏输入<code>http://localhost:4000</code>即可从本地进入博客</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030746.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030746.png" alt="mark"></a></p>
<p>目录内的各个文件的作用参考<a href="https://hexo.io/zh-cn/docs/setup">官方文档</a></p>
<h1 id="静态页面部署到github过程"><a href="#静态页面部署到github过程" class="headerlink" title="静态页面部署到github过程"></a>静态页面部署到github过程</h1><h2 id="1-在github上创建静态网站的存储库："><a href="#1-在github上创建静态网站的存储库：" class="headerlink" title="1.在github上创建静态网站的存储库："></a>1.在github上创建静态网站的存储库：</h2><p>通过<code>Ctrl+C</code>停止服务</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030744.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030744.png" alt="mark"></a></p>
<p>登陆自己的Git Hub <a href="https://github.com/login">点击进入登陆界面</a></p>
<p>登陆成功后，网页右上角个人头像旁边，点击 + 号 选择New repository创建一个新的仓库</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030743.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030743.png" alt="mark"></a></p>
<p>输入的信息如下，其中 Repository name内容必须是 github的用户名，而不是昵称。点击Create repository创建项目。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030745.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030745.png" alt="mark"></a></p>
<p>创建成功后，界面如图，复制https的链接。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030748.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030748.png" alt="mark"></a></p>
<p>回到git-bash 使用cnpm安装git部署插件，插件名为:hexo-deployer-git</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>安装过程中若有警告可以忽略</p>
<h2 id="2-修改-config-yml-文件："><a href="#2-修改-config-yml-文件：" class="headerlink" title="2.修改 _config.yml 文件："></a>2.修改 _config.yml 文件：</h2><p>打开网站目录的 _config.yml</p>
<p>移动到最低端，在deploy:后面写入内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: https:&#x2F;&#x2F;github.com&#x2F;ZhangHao0810&#x2F;ZhangHao0810.github.io.git </span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030747.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030747.png" alt="mark"></a></p>
<h2 id="3-推送到github-page："><a href="#3-推送到github-page：" class="headerlink" title="3.推送到github page："></a>3.推送到github page：</h2><p>修改完成后，保存文件，在Git Bash中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>即可将本地的网站服务器渲染出的静态页面上传到github。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030809.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030809.png" alt="mark"></a></p>
<p>该过程可能需要输入github和coding的用户名和密码，若GitHub配置过SSH则不需要输入。</p>
<p>如果有报错，检查之前的配置是否有误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure>

<p>配置语句是否正确 your name为用户名(非昵称)</p>
<p>推送完成后，再次进入仓库，即可看到上传完成的静态网页。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030750.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030750.png" alt="mark"></a></p>
<p>并且可以通过 <code>你的用户名.github.io</code> 来进入网站，此时网站已经部署到github page，其他人也可以通过该地址访问你的网站。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030751.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030751.png" alt="mark"></a></p>
<p><code>hexo s</code>指令仅启动本地服务，修改后只能通过localhost:4000来进行访问，此时没有推送页面到github。想要推送到github生成页面的话，需要通过<code>hexo d</code>进行推送。</p>
<p>推送前输入指令<code>hexo clean</code>清除缓存，然后再输入<code>hexo g</code>重新生成静态页面，然后推送即可。</p>
<h2 id="如何自定义一个主题"><a href="#如何自定义一个主题" class="headerlink" title="如何自定义一个主题?"></a>如何自定义一个主题?</h2><p>githbu上有好的主题,可以在blog下 </p>
<p>cmd git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia  </p>
<p>即将这个项目clone到 theme/yilia下.</p>
<p>然后打开_config.yml 把theme 换成yilia 默认是 landscape</p>
<p>然后<code>hexo clean</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p><code>hexo s</code><br>查看一下 本地ok了之后关闭.再推到远端,  <code>hexo d</code><br>之后再照着主题的开发文档来美化自己的网站就行了.</p>
<h1 id="博客修改配置"><a href="#博客修改配置" class="headerlink" title="博客修改配置"></a>博客修改配置</h1><p><a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>里有基本的配置文件内容说明，例如修改博主名称、网站名称、副标题、描述等等。</p>
<h2 id="永久链接："><a href="#永久链接：" class="headerlink" title="永久链接："></a>永久链接：</h2><p>打开博客目录下的配置文件_config.yml，按<code>Ctrl+F</code>搜索 URL</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030800.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030800.png" alt="mark"></a></p>
<p>url内容不用改，修改permalink内容</p>
<p>其意思为：修改一篇文章的url</p>
<p>默认的设置为将一篇文章的创建日期+title作为永久链接，但这样并不美观，并且在分享链接时因为编码问题中文会被转码造成如下结果</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030749.png"><img src="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030749.png" alt="mark"></a></p>
<p>链接的格式为 你的域名/permalink内容，</p>
<p>比如我修改后的<code>post/:year:month:day:hour:minute/</code></p>
<p>会将创建文件时的年月日时分作为永久链接，避免了分享中文时的乱码。</p>
<p>加一个post是为了将文章统一放在一个文件夹中，在生成静态网页时，会生成一个post文件夹，里面存放生成的文章。还有其余的样式，在官方文档的永久链接中有说明。</p>
<p>还有一种改法是使用<code>:urlname</code>，然后在文档的头信息中给urlname参数，让该参数的值为永久链接，但同样避免不了中文转码的问题，我个人就使用日期作为永久链接了。但这样其实有个问题就是以后管理文档时，post文件夹内显示的都是日期数字，不能直观的看到文章标题。</p>
<h2 id="修改默认文章模板："><a href="#修改默认文章模板：" class="headerlink" title="修改默认文章模板："></a>修改默认文章模板：</h2><p>打开站点目录下的<code>scaffolds</code>文件夹，打开<code>post.md</code></p>
<p>该markdown文档的内容会在生成一个markdown文档后自动添加进去。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125; </span><br><span class="line">date: &#123;&#123; date &#125;&#125; </span><br><span class="line">comments: true</span><br><span class="line">toc: true</span><br><span class="line">top: false</span><br><span class="line"></span><br><span class="line"># 若使用urlname作为永久链接则添加该项</span><br><span class="line">urlname:</span><br><span class="line"></span><br><span class="line">categories: </span><br><span class="line">- [父类,子类]</span><br><span class="line">- 同级分类</span><br><span class="line">tags: [标签1,标签2]</span><br><span class="line">---</span><br><span class="line"># 前言</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>提前设置好模板，这样生成一个新markdown文档后，只需修改urlname以及设置分类<code>categories</code>与标签<code>tags</code>即可，若主题支持，可设置是否有目录<code>toc</code>，是否置顶<code>top</code>，是否开启评论<code>comments</code>，不同的主题可能名称不同，根据自己的主题修改即可。</p>
<p>若有不支持的功能也不会出错，仅仅无法加载该内容。</p>
<p>hexo博客本地部署流程与1586351508914 为标题与文档创建日期，不需要改动</p>
<p>分类<code>categories</code>里，前面有减号<code>-</code>的表示为同级分类，中括号<code>[]</code>括起来的为父子分类。</p>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line">- [生活,笔记]</span><br><span class="line">- 娱乐</span><br></pre></td></tr></table></figure>

<p>文档在推送后，分类为生活类中的笔记类，同时也是娱乐类。</p>
<p>也可以将娱乐类改为 <code>[娱乐,音乐]</code>，这样就同时是娱乐类中的音乐类。</p>
<h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>以我的域名为例，不同商家解析时都差不多。在域名管理处点击解析</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030752.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030752.png" alt="mark"></a></p>
<p>点击添加记录。会出现如图的添加设置。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030755.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030755.png" alt="mark"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030757.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030757.png" alt="mark"></a></p>
<p>主机记录可理解为域名前缀，即用户输入什么样的网址访问到该解析目标。如果主机记录为www   ，则用户需要输入www.[你的域名]才能访问到该解析目标。如果为@，则直接输入域名即可。如果不添加www   ，则通过www+域名方式访问的用户将访问失败，@同理，其余的也同理。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030754.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030754.png" alt="mark"></a></p>
<p>记录类型为解析目标的类型，如果想把该域名绑定到一个ip地址，则选A，如果目标为一个网址，则选CNAME。</p>
<p>这里有两种绑定方法，一种是选CNAME然后在记录值填写 [yourname].github.io ，另一种是选A，然后通过cmd命令行输入 <code>ping [yourname].github.io</code> 获取ip地址，记录值里填入ip地址。</p>
<p>获取 [yourname].github.io 的ip地址，如图，ping通后会显示ip地址。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030753.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030753.png" alt="mark"></a></p>
<p>记录值根据选择的记录类型进行填写。线路选默认。TTL为缓存生效时间，默认600秒即可，即10分钟后生效(实际大约需要5 分钟)。填写完毕后点击保存。可以为域名填写多个记录， 如图</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030756.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030756.png" alt="mark"></a></p>
<p>前两个是为github   pages绑定时添加的记录，一个www、一个@，这样可以让用域名直接访问的和加了www访问的用户都能访问到自己的博客   (部署到服务器后就不再用了所以暂停了)。接下来两条A类型是将网站部署到自己的服务器时，把域名解析到了自己的服务器IP地址，这样可以通过www、或者直接输入域名的方式来访问自己的服务器。最后一条是绑定的七牛云，用来当做博客的图床。每条记录后面都有操作可以进行修改以及暂停和开启。</p>
<h2 id="绑定到github-pages"><a href="#绑定到github-pages" class="headerlink" title="绑定到github pages"></a>绑定到github pages</h2><p>登陆到自己的github，进入网站绑定的仓库，进入设置</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030759.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030759.png" alt="mark"></a></p>
<p>往下找到GitHub Pages，在Custom domain填入刚刚购买的域名，点击save保存。勾选Enforce HTTPS则开启HTTPS安全协议。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030758.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030758.png" alt="mark"></a></p>
<p>然后到本地博客<code>source</code>文件夹下新建文件CNAME，输入内容为自己的域名，并将文件尾缀如<code>.txt</code>等删掉然后保存即可。(没有的话貌似每次将代码从本地推到github都会使域名访问404，因为每次推送都会覆盖原本的仓库代码。所以把CNAME文件放在source中，使每次推送都会建立一个CNAME)</p>
<p>至此，github pages的域名绑定完成了，稍等片刻即可尝试使用域名访问。</p>
<h1 id="源代码保存到github"><a href="#源代码保存到github" class="headerlink" title="源代码保存到github"></a>源代码保存到github</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>在仓库中的文件列表的左上方，点击Branch。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030802.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030802.png" alt="mark"></a></p>
<p>搜索 source （分支名，自定义），会提示未找到，是否创建，点击即可创建该分支</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030804.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030804.png" alt="mark"></a></p>
<h2 id="设置新建分支为默认分支"><a href="#设置新建分支为默认分支" class="headerlink" title="设置新建分支为默认分支"></a>设置新建分支为默认分支</h2><p>进入设置，左边的列表中选择 Branches，默认分支为master，改为新建的分支，然后点击Update更新。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030805.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030805.png" alt="mark"></a></p>
<h2 id="同步配置"><a href="#同步配置" class="headerlink" title="同步配置"></a>同步配置</h2><p>首先随便找个地方新建一个文件夹，将你的仓库克隆下来。</p>
<p>打开新建的文件夹，右键空白处点击<code>Git Bash Here</code></p>
<p>然后输入下方命令克隆文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone 【你的仓库地址】</span><br></pre></td></tr></table></figure>

<p>仓库地址获取方法：</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030803.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030803.png" alt="mark"></a></p>
<p>点击红框内的按钮复制，然后粘贴到clone后面即可，用空格与clone隔开。</p>
<p>克隆完成后，该文件夹内会出现<code>【你的用户名】.github.io</code>文件夹，进去拷贝<code>.git</code>文件夹到本地的博客根目录，然后这个新建的文件夹就可以删除了。</p>
<p>接下来在博客根目录右键空白处，打开git bash，输入下方命令，警告不用理会，若没出现报错就没问题。</p>
<p>会需要github的帐号密码，填一下就OK了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin 【你的仓库地址】</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;【描述，随便写】&quot;</span><br><span class="line">git push origin 【你的保存源代码的分支名】</span><br></pre></td></tr></table></figure>

<p>描述部分的效果如图，会将内容显示在该分支上。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030807.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030807.png" alt="mark"></a></p>
<p>每次推送时，输入的描述都会在这次推送时更新的文件后面显示出来。</p>
<p>接下来每次想保存时，输入下方指令即可，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;【描述】&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>但每次都要输入这么多很麻烦，可以创建一个脚本文件，在博客根目录下新建一个txt文本文件，名字随意自己能知道是保存用的就行，将上方三条指令写进去，描述写好后以后固定都是这个，然后将文件改为<code>.sh</code>结尾。也可以直接建一个<code>.sh</code>尾缀文件，然后用编辑器打开写入。这样以后每次运行这个脚本文件就会自动执行上面三条指令，完成推送。</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030806.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030806.png" alt="mark"></a></p>
<p>本地同步到github就完成了，但要注意的是只保存了关键文件，如主题、文章、配置等。</p>
<p>node_modules文件夹和public文件夹是没有保存上去的，public文件夹是生成的静态页面，不需要保存，若迁移后直接生成就有了。</p>
<p>node_modules文件夹存放着需要用到的插件，如果想保存的话，打开<code>.gitignore</code>文件，把里面的node_modules删掉保存即可，但是这样会造成每次保存都需要很久时间，因为里面东西太多了，看个人需要决定是否需要保存。</p>
<p>只要配置文件里面的deploy里的branch的值是master的话，生成的静态页面会推送到master分支</p>
<p><a href="https://cdn.jsdelivr.net/gh/lluuiq/blog_img/img/20200324030808.png"><img src="/2019/11/09/Hexo/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/20200324030808.png" alt="mark"></a></p>
<p>配置完成后，若以后要迁移到其他的服务器或者电脑上，只需要安装好git、Node.js、hexo，然后使用<code>hexo init</code>命令初始化一个根目录，再克隆下来就行了，若不指定克隆分支的话，会克隆默认分支，即设置好的保存博客源代码的分支。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
